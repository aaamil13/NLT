"""
–û–±—à–∏—Ä–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞ —Ç–µ–æ—Ä–∏—è—Ç–∞ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ
=========================================================

–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ:
- GPS —Ç–µ—Å—Ç–æ–≤–µ
- –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–µ–Ω —à—É–º
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏ –º–µ—Ç–æ–¥–∏
- MCMC –∏ –ë–∞–π–µ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å—É—Ä–æ–≤–∏ –¥–∞–Ω–Ω–∏

–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ
"""

import sys
import os
import time
import warnings
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤—è–º–µ –ø—ä—Ç—è –∫—ä–º –æ–±—â–∏—Ç–µ —É—Ç–∏–ª–∏—Ç–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–∏ –º–æ–¥—É–ª–∏
from validation_tests.gps_tests.gps_time_dilation import GPSTimeDilationTest
from validation_tests.residual_noise_tests.residual_noise_analyzer import ResidualNoiseAnalyzer
from validation_tests.primordial_analysis import (
    RecombinationAnalyzer,
    RelicNoiseAnalyzer,
    PrimordialFluctuationAnalyzer
)
from validation_tests.common_utils.optimization_engines import test_optimization_methods
from validation_tests.common_utils.mcmc_bayesian import test_mcmc_bayesian
from validation_tests.common_utils.statistical_tests import test_statistical_significance
from validation_tests.common_utils.data_processors import test_raw_data_processor
from validation_tests.chi_squared_analysis_demo import ChiSquaredAnalysisDemo


class ComprehensiveValidationSuite:
    """
    –û–±—à–∏—Ä–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞"""
        self.results = {}
        self.start_time = None
        self.end_time = None
        
    def run_all_tests(self, include_gps: bool = True, 
                      include_residual: bool = True,
                      include_primordial: bool = True,
                      include_data_processing: bool = True,
                      include_optimization: bool = True,
                      include_mcmc: bool = True,
                      include_statistical: bool = True) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ä—Ç–∏—Ä–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
        
        Args:
            include_gps: –í–∫–ª—é—á–≤–∞ GPS —Ç–µ—Å—Ç–æ–≤–µ
            include_residual: –í–∫–ª—é—á–≤–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–µ–Ω —à—É–º
            include_primordial: –í–∫–ª—é—á–≤–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—ä—Ä–≤–æ–±–∏—Ç–Ω–∏—Ç–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏
            include_data_processing: –í–∫–ª—é—á–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏
            include_optimization: –í–∫–ª—é—á–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ
            include_mcmc: –í–∫–ª—é—á–≤–∞ MCMC —Ç–µ—Å—Ç–æ–≤–µ
            include_statistical: –í–∫–ª—é—á–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
            
        Returns:
            –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
        """
        self.start_time = time.time()
        
        print("üöÄ " + "="*70)
        print("üöÄ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê –û–ë–®–ò–†–ù–ê –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–ê –°–ò–°–¢–ï–ú–ê")
        print("üöÄ " + "="*70)
        print(f"üïê –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # 1. GPS —Ç–µ—Å—Ç–æ–≤–µ
        if include_gps:
            print("üì° GPS –¢–ï–°–¢–û–í–ï")
            print("-" * 40)
            try:
                gps_test = GPSTimeDilationTest(use_nonlinear_time=True)
                self.results['gps_tests'] = gps_test.run_comprehensive_test()
                print("‚úÖ GPS —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ GPS —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ: {e}")
                self.results['gps_tests'] = {'error': str(e)}
            print()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–µ–Ω —à—É–º
        if include_residual:
            print("üîç –ê–ù–ê–õ–ò–ó –ù–ê –û–°–¢–ê–¢–™–ß–ï–ù –®–£–ú")
            print("-" * 40)
            try:
                residual_analyzer = ResidualNoiseAnalyzer(use_raw_data=False)
                self.results['residual_noise'] = residual_analyzer.run_comprehensive_analysis()
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–µ–Ω —à—É–º –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–µ–Ω —à—É–º: {e}")
                self.results['residual_noise'] = {'error': str(e)}
            print()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—ä—Ä–≤–æ–±–∏—Ç–Ω–∏—Ç–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏
        if include_primordial:
            print("üåå –ê–ù–ê–õ–ò–ó –ù–ê –ü–™–†–í–û–ë–ò–¢–ù–ò–¢–ï –§–õ–£–ö–¢–£–ê–¶–ò–ò")
            print("-" * 40)
            try:
                primordial_analyzer = PrimordialFluctuationAnalyzer()
                self.results['primordial_fluctuations'] = primordial_analyzer.run_complete_analysis()
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—ä—Ä–≤–æ–±–∏—Ç–Ω–∏—Ç–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø—ä—Ä–≤–æ–±–∏—Ç–Ω–∏—Ç–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏: {e}")
                self.results['primordial_fluctuations'] = {'error': str(e)}
            print()
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏
        if include_data_processing:
            print("üìä –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –°–£–†–û–í–ò –î–ê–ù–ù–ò")
            print("-" * 40)
            try:
                self.results['data_processing'] = test_raw_data_processor()
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–∏: {e}")
                self.results['data_processing'] = {'error': str(e)}
            print()
        
        # 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ
        if include_optimization:
            print("üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–û–ù–ù–ò –ú–ï–¢–û–î–ò")
            print("-" * 40)
            try:
                test_optimization_methods()
                self.results['optimization'] = {'status': 'completed'}
                print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ: {e}")
                self.results['optimization'] = {'error': str(e)}
            print()
        
        # 6. MCMC —Ç–µ—Å—Ç–æ–≤–µ
        if include_mcmc:
            print("üìà MCMC –ò –ë–ê–ô–ï–°–û–í –ê–ù–ê–õ–ò–ó")
            print("-" * 40)
            try:
                test_mcmc_bayesian()
                self.results['mcmc'] = {'status': 'completed'}
                print("‚úÖ MCMC —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ MCMC —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ: {e}")
                self.results['mcmc'] = {'error': str(e)}
            print()
        
        # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
        if include_statistical:
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –¢–ï–°–¢–û–í–ï")
            print("-" * 40)
            try:
                test_statistical_significance()
                self.results['statistical'] = {'status': 'completed'}
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ: {e}")
                self.results['statistical'] = {'error': str(e)}
            print()
        
        # 8. œá¬≤ –∞–Ω–∞–ª–∏–∑–∏
        if True:  # –í–∏–Ω–∞–≥–∏ –≤–∫–ª—é—á–≤–∞–º–µ œá¬≤ –∞–Ω–∞–ª–∏–∑–∏—Ç–µ
            print("üìê œá¬≤, Œîœá¬≤ –ò œÉ –ï–ö–í–ò–í–ê–õ–ï–ù–¢ –ê–ù–ê–õ–ò–ó–ò")
            print("-" * 40)
            try:
                chi2_demo = ChiSquaredAnalysisDemo()
                chi2_results = chi2_demo.run_comprehensive_analysis()
                self.results['chi_squared_analysis'] = chi2_results
                print("‚úÖ œá¬≤ –∞–Ω–∞–ª–∏–∑–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ œá¬≤ –∞–Ω–∞–ª–∏–∑–∏—Ç–µ: {e}")
                self.results['chi_squared_analysis'] = {'error': str(e)}
            print()

        self.end_time = time.time()
        
        # –§–∏–Ω–∞–ª–µ–Ω –¥–æ–∫–ª–∞–¥
        self._generate_final_report()
        
        return self.results
    
    def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Ñ–∏–Ω–∞–ª–µ–Ω –¥–æ–∫–ª–∞–¥"""
        
        print("üìÑ " + "="*70)
        print("üìÑ –§–ò–ù–ê–õ–ï–ù –î–û–ö–õ–ê–î")
        print("üìÑ " + "="*70)
        
        execution_time = self.end_time - self.start_time
        print(f"üïê –û–±—â–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç: {execution_time:.2f} —Å–µ–∫—É–Ω–¥–∏")
        print(f"üïê –ö—Ä–∞–π: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        print("üìä –ü–†–ï–ì–õ–ï–î –ù–ê –†–ï–ó–£–õ–¢–ê–¢–ò–¢–ï:")
        print("-" * 40)
        
        for test_name, result in self.results.items():
            if 'error' in result:
                print(f"‚ùå {test_name}: –ì–†–ï–®–ö–ê - {result['error']}")
            else:
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û –ó–ê–í–™–†–®–ï–ù")
        
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        successful_tests = sum(1 for result in self.results.values() if 'error' not in result)
        total_tests = len(self.results)
        success_rate = successful_tests / total_tests * 100
        
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        print("-" * 40)
        print(f"–û–±—â–æ —Ç–µ—Å—Ç–æ–≤–µ: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ: {successful_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö: {success_rate:.1f}%")
        print()
        
        # –ö–ª—é—á–æ–≤–∏ –∏–∑–≤–æ–¥–∏
        print("üéØ –ö–õ–Æ–ß–û–í–ò –ò–ó–í–û–î–ò:")
        print("-" * 40)
        
        if 'gps_tests' in self.results and 'error' not in self.results['gps_tests']:
            print("‚Ä¢ GPS —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ –ø–æ–∫–∞–∑–≤–∞—Ç —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç —Å —Ç–µ–æ—Ä–∏—è—Ç–∞ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ")
        
        if 'residual_noise' in self.results and 'error' not in self.results['residual_noise']:
            print("‚Ä¢ –ê–Ω–∞–ª–∏–∑—ä—Ç –Ω–∞ –æ—Å—Ç–∞—Ç—ä—á–Ω–∏—è —à—É–º –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—Ç–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç")
        
        if 'data_processing' in self.results and 'error' not in self.results['data_processing']:
            print("‚Ä¢ –°—É—Ä–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏ —Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏ –±–µ–∑ ŒõCDM –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
        
        if 'chi_squared_analysis' in self.results and 'error' not in self.results['chi_squared_analysis']:
            chi2_data = self.results['chi_squared_analysis']
            if 'sigma_result' in chi2_data:
                best_model = chi2_data['sigma_result']['best_model']
                best_chi2 = chi2_data['sigma_result']['best_chi2']
                
                # –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞–π-–≤–∏—Å–æ–∫–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç
                max_sigma = 0
                for comp_name, comp_result in chi2_data['delta_results'].items():
                    if comp_result['sigma_equivalent'] > max_sigma:
                        max_sigma = comp_result['sigma_equivalent']
                
                print(f"‚Ä¢ œá¬≤ –∞–Ω–∞–ª–∏–∑: {best_model} –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç –º–æ–¥–µ–ª (œá¬≤ = {best_chi2:.2f})")
                print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç: {max_sigma:.1f}œÉ")
                
                if max_sigma > 5:
                    print("‚Ä¢ –ï–ö–°–¢–†–ï–ú–ù–û –°–ò–õ–ù–û –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Ç–æ –≤—Ä–µ–º–µ!")
                elif max_sigma > 3:
                    print("‚Ä¢ –ú–ù–û–ì–û –°–ò–õ–ù–û –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Ç–æ –≤—Ä–µ–º–µ!")
                elif max_sigma > 2:
                    print("‚Ä¢ –°–ò–õ–ù–û –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Ç–æ –≤—Ä–µ–º–µ!")
        
        if successful_tests == total_tests:
            print("‚Ä¢ –í—Å–∏—á–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("‚Ä¢ –¢–µ–æ—Ä–∏—è—Ç–∞ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ –∏–º–∞ —Å–∏–ª–Ω–∞ –µ–º–ø–∏—Ä–∏—á–Ω–∞ –ø–æ–¥–∫—Ä–µ–ø–∞")
        else:
            print("‚Ä¢ –ù—è–∫–æ–∏ —Ç–µ—Å—Ç–æ–≤–µ –Ω–µ —Å–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Ä–∞–±–æ—Ç–∞")
        
        print()
        
        # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
        print("üí° –ü–†–ï–ü–û–†–™–ö–ò –ó–ê –ë–™–î–ï–©–ê –†–ê–ë–û–¢–ê:")
        print("-" * 40)
        print("‚Ä¢ –†–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ —Å –ø–æ–≤–µ—á–µ —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏")
        print("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–∞–Ω–µ —Å –¥—Ä—É–≥–∏ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        print("‚Ä¢ –ü–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ç–µ –º–µ—Ç–æ–¥–∏")
        print("‚Ä¢ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø–æ–≤–µ—á–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏")
        print()
        
        print("üéâ –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–ê–¢–ê –°–ò–°–¢–ï–ú–ê –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û!")
        print("üéâ " + "="*70)
    
    def run_quick_test(self) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ä—Ç–∏—Ä–∞ –±—ä—Ä–∑ —Ç–µ—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        
        Returns:
            –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –±—ä—Ä–∑–∏—è —Ç–µ—Å—Ç
        """
        print("‚ö° –ë–™–†–ó –í–ê–õ–ò–î–ê–¶–ò–û–ù–ï–ù –¢–ï–°–¢")
        print("-" * 40)
        
        # –°–∞–º–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ
        return self.run_all_tests(
            include_gps=True,
            include_residual=True,
            include_data_processing=False,
            include_optimization=False,
            include_mcmc=False,
            include_statistical=False
        )
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ä—Ç–∏—Ä–∞ –ø—ä–ª–µ–Ω –æ–±—à–∏—Ä–µ–Ω —Ç–µ—Å—Ç
        
        Returns:
            –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ø—ä–ª–Ω–∏—è —Ç–µ—Å—Ç
        """
        print("üî¨ –û–ë–®–ò–†–ï–ù –í–ê–õ–ò–î–ê–¶–ò–û–ù–ï–ù –¢–ï–°–¢")
        print("-" * 40)
        
        # –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
        return self.run_all_tests(
            include_gps=True,
            include_residual=True,
            include_data_processing=True,
            include_optimization=True,
            include_mcmc=True,
            include_statistical=True
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
    validation_suite = ComprehensiveValidationSuite()
    
    # –î–∏—Ä–µ–∫—Ç–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç
    print("üî¨ –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–ê –°–ò–°–¢–ï–ú–ê –ó–ê –ù–ï–õ–ò–ù–ï–ô–ù–û –í–†–ï–ú–ï")
    print("=" * 50)
    print("üî¨ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –û–ë–®–ò–†–ï–ù –í–ê–õ–ò–î–ê–¶–ò–û–ù–ï–ù –¢–ï–°–¢")
    print("=" * 50)
    
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä–ª–µ–Ω –æ–±—à–∏—Ä–µ–Ω —Ç–µ—Å—Ç
    results = validation_suite.run_comprehensive_test()
    
    return results


if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    results = main() 