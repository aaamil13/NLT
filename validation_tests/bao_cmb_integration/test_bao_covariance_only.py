#!/usr/bin/env python3
"""
–§–æ–∫—É—Å–∏—Ä–∞–Ω —Ç–µ—Å—Ç –Ω–∞ BAO –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü–∏
"""

import numpy as np
from observational_data import create_bao_data
from bao_covariance_matrices import BAOCovarianceMatrices
from no_lambda_cosmology import NoLambdaCosmology

def test_bao_covariance_matrices():
    """
    –¢–µ—Å—Ç –Ω–∞ BAO –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü–∏
    """
    
    print("üîç –¢–ï–°–¢ –ù–ê BAO –ö–û–í–ê–†–ò–ê–¶–ò–û–ù–ù–ò–¢–ï –ú–ê–¢–†–ò–¶–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –Ω–∞ BAOCovarianceMatrices –∫–ª–∞—Å–∞
    print("\nüìä –¢–µ—Å—Ç –Ω–∞ BAOCovarianceMatrices:")
    print("-" * 40)
    
    bao_cov = BAOCovarianceMatrices()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
    print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω BAOCovarianceMatrices")
    
    # –¢–µ—Å—Ç –Ω–∞ create_bao_data
    print("\nüìä –¢–µ—Å—Ç –Ω–∞ create_bao_data:")
    print("-" * 40)
    
    try:
        z_bao, DV_rs_obs, DV_rs_err, covariance_matrix = create_bao_data()
        
        print(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ BAO –¥–∞–Ω–Ω–∏:")
        print(f"   - –ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(z_bao)}")
        print(f"   - Redshift range: {np.min(z_bao):.3f} - {np.max(z_bao):.3f}")
        print(f"   - DV/rs range: {np.min(DV_rs_obs):.3f} - {np.max(DV_rs_obs):.3f}")
        print(f"   - –ì—Ä–µ—à–∫–∏ range: {np.min(DV_rs_err):.4f} - {np.max(DV_rs_err):.4f}")
        
        if covariance_matrix is not None:
            print(f"‚úÖ –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {covariance_matrix.shape}")
            print(f"   - Determinant: {np.linalg.det(covariance_matrix):.2e}")
            print(f"   - Condition number: {np.linalg.cond(covariance_matrix):.2e}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏—Ç–µ
            correlation_matrix = covariance_matrix / np.sqrt(np.outer(np.diag(covariance_matrix), np.diag(covariance_matrix)))
            off_diagonal = correlation_matrix[np.triu_indices_from(correlation_matrix, k=1)]
            
            print(f"   - –ú–∞–∫—Å –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.max(off_diagonal):.3f}")
            print(f"   - –ú–∏–Ω –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.min(off_diagonal):.3f}")
            print(f"   - –°—Ä–µ–¥–Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.mean(off_diagonal):.3f}")
            
            # –¢–µ—Å—Ç –Ω–∞ œá¬≤ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ
            test_chi_squared_calculation(z_bao, DV_rs_obs, DV_rs_err, covariance_matrix)
            
        else:
            print("‚ö†Ô∏è  –ù—è–º–∞ –ø—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ - fallback –∫—ä–º –¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ create_bao_data: {e}")
        import traceback
        traceback.print_exc()

def test_chi_squared_calculation(z_bao, DV_rs_obs, DV_rs_err, covariance_matrix):
    """
    –¢–µ—Å—Ç –Ω–∞ œá¬≤ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ –º–µ—Ç–æ–¥–∏
    """
    
    print("\nüîç –¢–ï–°–¢ –ù–ê œá¬≤ –ò–ó–ß–ò–°–õ–ï–ù–ò–ï–¢–û:")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    H0 = 72.0
    Omega_m = 0.30
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(H0=H0, Omega_m=Omega_m)
    
    # –ú–æ–¥–µ–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    DV_rs_model = []
    C_KM_S = 299792.458  # km/s
    
    for z in z_bao:
        D_A = cosmo.angular_diameter_distance(z)
        H_z = cosmo.hubble_function(z)
        D_H = C_KM_S / H_z
        D_V = (z * D_A**2 * D_H)**(1/3.0)
        r_s = cosmo.sound_horizon_scale()
        
        DV_rs_model.append(D_V / r_s)
    
    DV_rs_model = np.array(DV_rs_model)
    residuals = DV_rs_obs - DV_rs_model
    
    # –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞ œá¬≤
    chi2_diagonal = np.sum((residuals / DV_rs_err)**2)
    
    # –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ œá¬≤
    if covariance_matrix is not None:
        try:
            cov_inv = np.linalg.inv(covariance_matrix)
            chi2_full = residuals.T @ cov_inv @ residuals
            
            print(f"üìà –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞ œá¬≤: {chi2_diagonal:.2f}")
            print(f"üìà –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ œá¬≤: {chi2_full:.2f}")
            print(f"üìà Ratio (diagonal/full): {chi2_diagonal/chi2_full:.3f}")
            
            improvement = (chi2_diagonal - chi2_full) / chi2_diagonal * 100
            print(f"üìä –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ: {improvement:.1f}%")
            
            if improvement > 0:
                print("‚úÖ –ü—ä–ª–Ω–∞—Ç–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–≤–∞ –ø–æ-–¥–æ–±—Ä–æ —Ñ–∏—Ç–≤–∞–Ω–µ")
            else:
                print("‚ö†Ô∏è  –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–≤–∞ –ø–æ-–¥–æ–±—Ä–æ —Ñ–∏—Ç–≤–∞–Ω–µ")
                
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞: {e}")
    
    # –î–µ—Ç–∞–π–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä Residuals —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –°—Ä–µ–¥–Ω–æ: {np.mean(residuals):.4f}")
    print(f"   - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(residuals):.4f}")
    print(f"   - –ú–∞–∫—Å–∏–º–∞–ª–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.max(np.abs(residuals)):.4f}")
    print(f"   - Pull —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {np.sqrt(chi2_diagonal/len(residuals)):.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏ —Ç–æ—á–∫–∏
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ—á–∫–∏:")
    for i, (z, obs, model, err) in enumerate(zip(z_bao, DV_rs_obs, DV_rs_model, DV_rs_err)):
        residual = obs - model
        pull = residual / err
        print(f"   z={z:.3f}: obs={obs:.3f}, model={model:.3f}, pull={pull:.2f}")

def test_matrix_properties():
    """
    –¢–µ—Å—Ç –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞—Ç–∞ –Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü–∏
    """
    
    print("\nüîç –¢–ï–°–¢ –ù–ê –°–í–û–ô–°–¢–í–ê–¢–ê –ù–ê –ú–ê–¢–†–ò–¶–ò–¢–ï:")
    print("-" * 40)
    
    bao_cov = BAOCovarianceMatrices()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ survey –¥–∞–Ω–Ω–∏
    surveys = ['boss_dr12', 'eboss_dr16', '6dfgs', 'wigglez']
    
    for survey in surveys:
        print(f"\nüìä Survey: {survey}")
        try:
            # –¢—É–∫ –º–æ–∂–µ –¥–∞ –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ survey –¥–∞–Ω–Ω–∏
            # –∫–æ–≥–∞—Ç–æ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–º–µ get_survey_data –º–µ—Ç–æ–¥–∏
            pass
        except Exception as e:
            print(f"   ‚ùå –ì—Ä–µ—à–∫–∞: {e}")

if __name__ == "__main__":
    test_bao_covariance_matrices()
    test_matrix_properties() 