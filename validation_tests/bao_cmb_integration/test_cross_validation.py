#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ –ø—ä–ª–Ω–∞ Cross-Validation —Å–∏—Å—Ç–µ–º–∞
====================================

–¢–µ—Å—Ç–≤–∞ No-Lambda –∫–æ—Å–º–æ–ª–æ–≥–∏—è —Å—Ä–µ—â—É –≤—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏:
- BAO (–∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è)
- CMB (–∞–∫—É—Å—Ç–∏—á–Ω–∞ —Å–∫–∞–ª–∞ –∏ –ø–∏–∫–æ–≤–µ)
- Type Ia Supernovae (distance modulus)
- –õ–æ–∫–∞–ª–Ω–∏ H‚ÇÄ –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è

–ò–∑–ø–æ–ª–∑–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω nested sampling –∑–∞ –ø—ä–ª–Ω–∞ Bayesian inference.
"""

import numpy as np
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple
import logging
import time
import os

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from no_lambda_cosmology import NoLambdaCosmology
from observational_data import (
    BAOObservationalData, 
    CMBObservationalData,
    SNIaObservationalData,
    LocalH0ObservationalData,
    LikelihoodFunctions
)
from nested_sampling_analysis import OptimizedNestedSampling

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CrossValidationAnalysis:
    """
    –ü—ä–ª–Ω–∞ Cross-Validation —Å–∏—Å—Ç–µ–º–∞ –∑–∞ No-Lambda –∫–æ—Å–º–æ–ª–æ–≥–∏—è
    """
    
    def __init__(self, use_snia: bool = True, use_h0: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ cross-validation –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            use_snia: –î–∞–ª–∏ –¥–∞ —Å–µ –≤–∫–ª—é—á–∞—Ç SN Ia –¥–∞–Ω–Ω–∏
            use_h0: –î–∞–ª–∏ –¥–∞ —Å–µ –≤–∫–ª—é—á–∞—Ç H‚ÇÄ –¥–∞–Ω–Ω–∏
        """
        
        self.use_snia = use_snia
        self.use_h0 = use_h0
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Cross-Validation –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏
        self._load_all_data()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ nested sampling
        self._setup_nested_sampling()
        
        logger.info("‚úÖ Cross-Validation —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    
    def _load_all_data(self):
        """–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏"""
        
        logger.info("üìä –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏...")
        
        # –û—Å–Ω–æ–≤–Ω–∏ –¥–∞–Ω–Ω–∏
        self.bao_data = BAOObservationalData()
        self.cmb_data = CMBObservationalData()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏
        if self.use_snia:
            self.snia_data = SNIaObservationalData()
            logger.info(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(self.snia_data.get_combined_data()['redshifts'])} SN Ia supernovae")
        else:
            self.snia_data = None
        
        if self.use_h0:
            self.h0_data = LocalH0ObservationalData()
            logger.info(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(self.h0_data.h0_measurements)} H‚ÇÄ –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è")
        else:
            self.h0_data = None
        
        # –û–±–µ–¥–∏–Ω–µ–Ω–∞ likelihood —Å–∏—Å—Ç–µ–º–∞
        self.likelihood_func = LikelihoodFunctions(
            bao_data=self.bao_data,
            cmb_data=self.cmb_data,
            snia_data=self.snia_data,
            h0_data=self.h0_data
        )
    
    def _setup_nested_sampling(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ nested sampling –∑–∞ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏"""
        
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ nested sampling...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∏
        parameter_names = ['H0', 'Omega_m', 'epsilon_bao', 'epsilon_cmb']
        parameter_ranges = {
            'H0': (60.0, 80.0),
            'Omega_m': (0.05, 0.95),
            'epsilon_bao': (-0.1, 0.1),
            'epsilon_cmb': (-0.1, 0.1)
        }
        
        # Nested sampling –æ–±–µ–∫—Ç
        self.nested_sampler = OptimizedNestedSampling(
            parameter_names=parameter_names,
            parameter_ranges=parameter_ranges,
            nlive=150,  # –ü–æ-–≥–æ–ª—è–º –±—Ä–æ–π –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç
            use_snia=self.use_snia,
            use_h0=self.use_h0
        )
        
        logger.info("‚úÖ Nested sampling –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def run_individual_tests(self):
        """–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"""
        
        logger.info("\nüß™ –¢–ï–°–¢–í–ê–ù–ï –ù–ê –û–¢–î–ï–õ–ù–ò–¢–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ò")
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤ –º–æ–¥–µ–ª
        test_cosmo = NoLambdaCosmology(
            H0=70.0,
            Omega_m=0.3,
            epsilon_bao=0.02,
            epsilon_cmb=0.01
        )
        
        results = {}
        
        # BAO —Ç–µ—Å—Ç
        logger.info("\nüéµ BAO —Ç–µ—Å—Ç...")
        bao_combined = self.bao_data.get_combined_data()
        z_bao = bao_combined['redshifts']
        bao_predictions = test_cosmo.calculate_bao_predictions(z_bao)
        bao_loglike = self.likelihood_func.bao_likelihood(bao_predictions, use_anisotropic=True)
        results['BAO'] = {
            'loglike': bao_loglike,
            'chi2': -2 * bao_loglike,
            'n_data': len(z_bao),
            'reduced_chi2': -2 * bao_loglike / len(z_bao)
        }
        logger.info(f"  BAO œá¬≤: {results['BAO']['chi2']:.2f} (reduced: {results['BAO']['reduced_chi2']:.2f})")
        
        # CMB —Ç–µ—Å—Ç
        logger.info("\nüåå CMB —Ç–µ—Å—Ç...")
        theta_s_pred = test_cosmo.cmb_angular_scale()
        l_peaks_pred = np.array([
            test_cosmo.cmb_peak_position(),
            test_cosmo.cmb_peak_position() * 1.4,
            test_cosmo.cmb_peak_position() * 2.1
        ])
        cmb_predictions = {
            'theta_s': theta_s_pred,
            'l_peaks': l_peaks_pred
        }
        cmb_loglike = self.likelihood_func.cmb_likelihood(cmb_predictions)
        results['CMB'] = {
            'loglike': cmb_loglike,
            'chi2': -2 * cmb_loglike,
            'n_data': 4,
            'reduced_chi2': -2 * cmb_loglike / 4
        }
        logger.info(f"  CMB œá¬≤: {results['CMB']['chi2']:.2f} (reduced: {results['CMB']['reduced_chi2']:.2f})")
        
        # SN Ia —Ç–µ—Å—Ç
        if self.use_snia:
            logger.info("\nüåü SN Ia —Ç–µ—Å—Ç...")
            snia_combined = self.snia_data.get_combined_data()
            z_snia = snia_combined['redshifts']
            mu_pred = test_cosmo.distance_modulus(z_snia)
            snia_predictions = {'distance_modulus': mu_pred}
            snia_loglike = self.likelihood_func.snia_likelihood(snia_predictions)
            results['SN Ia'] = {
                'loglike': snia_loglike,
                'chi2': -2 * snia_loglike,
                'n_data': len(z_snia),
                'reduced_chi2': -2 * snia_loglike / len(z_snia)
            }
            logger.info(f"  SN Ia œá¬≤: {results['SN Ia']['chi2']:.2f} (reduced: {results['SN Ia']['reduced_chi2']:.2f})")
        
        # H‚ÇÄ —Ç–µ—Å—Ç
        if self.use_h0:
            logger.info("\nüî≠ H‚ÇÄ —Ç–µ—Å—Ç...")
            h0_pred = test_cosmo.h0_prediction()
            h0_predictions = {'H0': h0_pred['H0']}
            h0_loglike = self.likelihood_func.h0_likelihood(h0_predictions)
            results['H‚ÇÄ'] = {
                'loglike': h0_loglike,
                'chi2': -2 * h0_loglike,
                'n_data': 1,
                'reduced_chi2': -2 * h0_loglike / 1
            }
            logger.info(f"  H‚ÇÄ œá¬≤: {results['H‚ÇÄ']['chi2']:.2f} (reduced: {results['H‚ÇÄ']['reduced_chi2']:.2f})")
        
        # –û–±–µ–¥–∏–Ω–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        total_loglike = sum(r['loglike'] for r in results.values())
        total_chi2 = sum(r['chi2'] for r in results.values())
        total_n_data = sum(r['n_data'] for r in results.values())
        
        logger.info(f"\nüìä –û–ë–ï–î–ò–ù–ï–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
        logger.info(f"  –û–±—â–æ œá¬≤: {total_chi2:.2f}")
        logger.info(f"  –û–±—â–æ –¥–∞–Ω–Ω–∏: {total_n_data}")
        logger.info(f"  Reduciran œá¬≤: {total_chi2/total_n_data:.2f}")
        logger.info(f"  Log-likelihood: {total_loglike:.2f}")
        
        return results
    
    def run_full_analysis(self, nlive: int = 150):
        """–ü—ä–ª–µ–Ω nested sampling –∞–Ω–∞–ª–∏–∑"""
        
        logger.info("\nüéØ –ü–™–õ–ï–ù NESTED SAMPLING –ê–ù–ê–õ–ò–ó")
        logger.info("=" * 60)
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        start_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ø–æ-–≥–æ–ª—è–º –±—Ä–æ–π live points
        self.nested_sampler.nlive = nlive
        
        logger.info(f"–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ nested sampling —Å {nlive} live points...")
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ sampling
        self.nested_sampler.run_fast_sampling(
            nlive=nlive,
            dynamic=False,
            progress=False,
            parallel=True
        )
        
        end_time = time.time()
        runtime = end_time - start_time
        
        # –†–µ–∑—É–ª—Ç–∞—Ç–∏
        results = self.nested_sampler.results
        log_evidence = self.nested_sampler.log_evidence
        log_evidence_err = self.nested_sampler.log_evidence_err
        param_stats = self.nested_sampler.param_stats
        
        logger.info(f"\n‚úÖ NESTED SAMPLING –ó–ê–í–™–†–®–ï–ù!")
        logger.info(f"‚è±Ô∏è  Runtime: {runtime:.1f}s")
        logger.info(f"üìä Log-evidence: {log_evidence:.3f} ¬± {log_evidence_err:.3f}")
        logger.info(f"üìà Samples: {len(self.nested_sampler.posterior_samples)}")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
        logger.info(f"\nüîç –ü–ê–†–ê–ú–ï–¢–†–ò:")
        for param_name, stats in param_stats.items():
            logger.info(f"  {param_name}: {stats['median']:.3f} ¬± {stats['std']:.3f}")
        
        return {
            'runtime': runtime,
            'log_evidence': log_evidence,
            'log_evidence_err': log_evidence_err,
            'param_stats': param_stats,
            'n_samples': len(self.nested_sampler.posterior_samples)
        }
    
    def analyze_tensions(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ tensions –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏"""
        
        logger.info("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê TENSIONS")
        logger.info("=" * 60)
        
        tensions = {}
        
        # H‚ÇÄ tension
        if self.use_h0:
            h0_tension = self.h0_data.get_tension_analysis()
            tensions['H‚ÇÄ'] = h0_tension
            
            logger.info(f"H‚ÇÄ tension:")
            logger.info(f"  –õ–æ–∫–∞–ª–Ω–æ: {h0_tension['local_h0']:.2f} ¬± {h0_tension['local_err']:.2f}")
            logger.info(f"  CMB: {h0_tension['cmb_h0']:.2f} ¬± {h0_tension['cmb_err']:.2f}")
            logger.info(f"  Tension: {h0_tension['tension_sigma']:.1f}œÉ")
            logger.info(f"  –ó–Ω–∞—á–∏–º: {'–î–ê' if h0_tension['is_significant'] else '–ù–ï'}")
        
        # BAO-CMB consistency
        test_cosmo = NoLambdaCosmology(H0=70.0, Omega_m=0.3)
        
        # –ó–≤—É–∫–æ–≤–∞ —Å–∫–∞–ª–∞ –æ—Ç BAO vs CMB
        r_s_bao = test_cosmo.sound_horizon_scale()
        r_s_cmb = test_cosmo.sound_horizon_scale()  # –°—ä—â–∞—Ç–∞ –≤ No-Lambda
        
        logger.info(f"\nBAO-CMB consistency:")
        logger.info(f"  r_s (BAO): {r_s_bao:.3f} Mpc")
        logger.info(f"  r_s (CMB): {r_s_cmb:.3f} Mpc")
        logger.info(f"  Consistency: {abs(r_s_bao - r_s_cmb) / r_s_bao * 100:.2f}%")
        
        return tensions
    
    def summary_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ–±–æ–±—â–∞–≤–∞—â –¥–æ–∫–ª–∞–¥"""
        
        logger.info("\nüìã –û–ë–û–ë–©–ê–í–ê–© –î–û–ö–õ–ê–î")
        logger.info("=" * 60)
        
        # –î–∞–Ω–Ω–∏
        active_probes = ['BAO', 'CMB']
        if self.use_snia:
            active_probes.append('SN Ia')
        if self.use_h0:
            active_probes.append('H‚ÇÄ')
        
        logger.info(f"–ê–∫—Ç–∏–≤–Ω–∏ –ø—Ä–æ–±–∏: {', '.join(active_probes)}")
        
        # –û–±—â –±—Ä–æ–π –¥–∞–Ω–Ω–∏
        total_data = self.nested_sampler.cached_n_bao + self.nested_sampler.cached_n_cmb
        if self.use_snia:
            total_data += self.nested_sampler.cached_n_snia
        if self.use_h0:
            total_data += self.nested_sampler.cached_n_h0
        
        logger.info(f"–û–±—â–æ –¥–∞–Ω–Ω–∏: {total_data}")
        
        # –°–∏—Å—Ç–µ–º–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {self.nested_sampler.n_params}")
        logger.info(f"Live points: {self.nested_sampler.nlive}")
        
        # –°—Ç–∞—Ç—É—Å
        if self.nested_sampler.results is not None:
            logger.info(f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑")
            logger.info(f"Log-evidence: {self.nested_sampler.log_evidence:.3f}")
        else:
            logger.info(f"–°—Ç–∞—Ç—É—Å: ‚è≥ –ì–æ—Ç–æ–≤ –∑–∞ –∞–Ω–∞–ª–∏–∑")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ"""
    
    print("üöÄ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê CROSS-VALIDATION –ê–ù–ê–õ–ò–ó")
    print("=" * 70)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    USE_SNIA = True
    USE_H0 = True
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    cv_analyzer = CrossValidationAnalysis(
        use_snia=USE_SNIA,
        use_h0=USE_H0
    )
    
    # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—é–º–µ
    cv_analyzer.summary_report()
    
    # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    individual_results = cv_analyzer.run_individual_tests()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ tensions
    tensions = cv_analyzer.analyze_tensions()
    
    # –ü—ä–ª–µ–Ω –∞–Ω–∞–ª–∏–∑
    full_results = cv_analyzer.run_full_analysis(nlive=150)
    
    print("\nüéâ CROSS-VALIDATION –ê–ù–ê–õ–ò–ó –ó–ê–í–™–†–®–ï–ù!")
    print("=" * 70)
    
    # –§–∏–Ω–∞–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    print(f"üìä –§–∏–Ω–∞–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏:")
    print(f"  Log-evidence: {full_results['log_evidence']:.3f} ¬± {full_results['log_evidence_err']:.3f}")
    print(f"  Runtime: {full_results['runtime']:.1f}s")
    print(f"  Samples: {full_results['n_samples']}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    print(f"\nüîç –ù–∞–π-–¥–æ–±—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    for param_name, stats in full_results['param_stats'].items():
        print(f"  {param_name}: {stats['median']:.3f} ¬± {stats['std']:.3f}")
    
    return full_results


if __name__ == "__main__":
    results = main() 