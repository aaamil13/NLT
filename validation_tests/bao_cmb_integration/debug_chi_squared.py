#!/usr/bin/env python3
"""
Debug Chi-Squared Analysis
==========================

–ü–†–ò–û–†–ò–¢–ï–¢ ‚Ññ1: –î–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ œá¬≤ = 2099.4

–¶–µ–ª: –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞ –≤ –∫–æ–¥–∞, –µ–¥–∏–Ω–∏—Ü–∏—Ç–µ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∏—Ç–µ
–∫–æ—è—Ç–æ –ø—Ä–∏—á–∏–Ω—è–≤–∞ –æ–≥—Ä–æ–º–Ω–∏—è œá¬≤.

–°—Ç—ä–ø–∫–∏:
1. –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ œá¬≤ —Å—Ç—ä–ø–∫–∞ –ø–æ —Å—Ç—ä–ø–∫–∞ –∑–∞ best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
2. –†–∞–∑–ø–µ—á–∞—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –º–µ–∂–¥–∏–Ω–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
3. –°—Ä–∞–≤–Ω—è–≤–∞–Ω–µ —Å –∏–∑–≤–µ—Å—Ç–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
4. –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
"""

import numpy as np
import pandas as pd
from scipy.integrate import quad
from typing import Dict, Tuple
import matplotlib.pyplot as plt

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from observational_data import BAOObservationalData, CMBObservationalData
from no_lambda_cosmology import NoLambdaCosmology
from fast_cosmo import *

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
C_KM_S = 299792.458  # km/s
H0_PLANCK = 67.4  # km/s/Mpc
OMEGA_M_PLANCK = 0.315


class ChiSquaredDebugger:
    """
    –î–µ—Ç–∞–π–ª–µ–Ω –¥–µ–±—ä–≥–µ—Ä –∑–∞ œá¬≤ –∞–Ω–∞–ª–∏–∑
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –¥–µ–±—ä–≥–µ—Ä–∞"""
        
        # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
        self.bao_data = BAOObservationalData()
        self.cmb_data = CMBObservationalData()
        
        # Best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç comprehensive –∞–Ω–∞–ª–∏–∑–∞
        self.best_fit_params = {
            'H0': 69.1237,
            'Omega_m': 0.3233,
            'epsilon_bao': 0.0497,
            'epsilon_cmb': 0.0256
        }
        
        # –ó–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ Planck –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.planck_params = {
            'H0': 67.4,
            'Omega_m': 0.315,
            'epsilon_bao': 0.0,
            'epsilon_cmb': 0.0
        }
        
        print("üîç Chi-Squared Debugger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω")
        print(f"üéØ Best-fit params: {self.best_fit_params}")
        
    def debug_full_chi_squared(self):
        """
        –ü—ä–ª–µ–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ œá¬≤ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ
        """
        
        print("\n" + "="*60)
        print("üîç –î–ï–¢–ê–ô–õ–ï–ù –î–ï–ë–™–ì–í–ê–ù–ï –ù–ê œá¬≤ –ò–ó–ß–ò–°–õ–ï–ù–ò–ï")
        print("="*60)
        
        # –°—Ç—ä–ø–∫–∞ 1: –ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO —á–∞—Å—Ç
        print("\nüìä –°–¢–™–ü–ö–ê 1: BAO Chi-Squared Analysis")
        bao_chi2, bao_debug = self._debug_bao_chi_squared()
        
        # –°—Ç—ä–ø–∫–∞ 2: –ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB —á–∞—Å—Ç
        print("\nüìä –°–¢–™–ü–ö–ê 2: CMB Chi-Squared Analysis")
        cmb_chi2, cmb_debug = self._debug_cmb_chi_squared()
        
        # –°—Ç—ä–ø–∫–∞ 3: –û–±—â –∞–Ω–∞–ª–∏–∑
        print("\nüìä –°–¢–™–ü–ö–ê 3: –û–±—â–æ Chi-Squared")
        total_chi2 = bao_chi2 + cmb_chi2
        
        print(f"BAO œá¬≤: {bao_chi2:.3f}")
        print(f"CMB œá¬≤: {cmb_chi2:.3f}")
        print(f"–û–ë–©–û œá¬≤: {total_chi2:.3f}")
        
        # –°—Ç—ä–ø–∫–∞ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—á–∞–∫–≤–∞–Ω–∏—è—Ç–∞
        print("\nüìä –°–¢–™–ü–ö–ê 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—á–∞–∫–≤–∞–Ω–∏—è")
        self._compare_with_expectations(bao_chi2, cmb_chi2, total_chi2)
        
        # –°—Ç—ä–ø–∫–∞ 5: –î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑
        print("\nüìä –°–¢–™–ü–ö–ê 5: –î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑")
        self._detailed_analysis(bao_debug, cmb_debug)
        
        return total_chi2, bao_debug, cmb_debug
    
    def _debug_bao_chi_squared(self) -> Tuple[float, Dict]:
        """
        –î–µ—Ç–∞–π–ª–µ–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ BAO œá¬≤
        """
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ BAO –¥–∞–Ω–Ω–∏
        bao_combined = self.bao_data.get_combined_data()
        z_bao = bao_combined['redshifts']
        DV_rs_obs = bao_combined['DV_rs']
        DV_rs_err = bao_combined['DV_rs_err']
        
        print(f"üìä BAO –¥–∞–Ω–Ω–∏: {len(z_bao)} —Ç–æ—á–∫–∏")
        print(f"üìä Redshifts: {z_bao}")
        print(f"üìä DV/rs_obs: {DV_rs_obs}")
        print(f"üìä DV/rs_err: {DV_rs_err}")
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–µ–Ω –º–æ–¥–µ–ª
        cosmo = NoLambdaCosmology(**self.best_fit_params)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ sound horizon
        print(f"\nüîç –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ sound horizon...")
        r_s = cosmo.sound_horizon_scale()
        print(f"r_s = {r_s:.3f} Mpc")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ r_s –µ —Ä–∞–∑—É–º–µ–Ω
        if r_s < 100 or r_s > 200:
            print(f"‚ö†Ô∏è WARNING: r_s = {r_s:.3f} Mpc –∏–∑–≥–ª–µ–∂–¥–∞ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ!")
            print(f"‚ö†Ô∏è –û—á–∞–∫–≤–∞–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ ~147 Mpc")
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ç–µ DV/rs —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        print(f"\nüîç –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏ DV/rs...")
        
        DV_rs_theory = []
        debug_info = []
        
        for i, z in enumerate(z_bao):
            print(f"\n--- z = {z:.3f} ---")
            
            # Angular diameter distance
            D_A = cosmo.angular_diameter_distance(z)
            print(f"D_A({z:.3f}) = {D_A:.3f} Mpc")
            
            # Hubble parameter
            H_z = cosmo.hubble_function(z)
            print(f"H({z:.3f}) = {H_z:.3f} km/s/Mpc")
            
            # Hubble distance
            D_H = C_KM_S / H_z
            print(f"D_H({z:.3f}) = {D_H:.3f} Mpc")
            
            # Dilation scale D_V
            D_V = (z * D_A**2 * D_H)**(1/3)
            print(f"D_V({z:.3f}) = {D_V:.3f} Mpc")
            
            # DV/rs
            DV_rs = D_V / r_s
            print(f"DV/rs({z:.3f}) = {DV_rs:.6f}")
            
            DV_rs_theory.append(DV_rs)
            
            # –î–µ–±—ä–≥–≤–∞–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            debug_info.append({
                'z': z,
                'D_A': D_A,
                'H_z': H_z,
                'D_H': D_H,
                'D_V': D_V,
                'DV_rs_theory': DV_rs,
                'DV_rs_obs': DV_rs_obs[i],
                'DV_rs_err': DV_rs_err[i]
            })
        
        DV_rs_theory = np.array(DV_rs_theory)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏—Ç–µ
        print(f"\nüîç –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏...")
        residuals = DV_rs_obs - DV_rs_theory
        
        print(f"Residuals: {residuals}")
        relative_residuals = residuals/DV_rs_obs*100
        print(f"Relative residuals (%): {relative_residuals}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ –ø—Ä–∏–Ω–æ—Å–∏ –∫—ä–º œá¬≤
        print(f"\nüîç –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ –ø—Ä–∏–Ω–æ—Å–∏ –∫—ä–º œá¬≤...")
        individual_chi2 = (residuals / DV_rs_err)**2
        
        for i, (z, chi2_i) in enumerate(zip(z_bao, individual_chi2)):
            print(f"œá¬≤({z:.3f}) = {chi2_i:.3f}")
        
        # –û–±—â–æ BAO œá¬≤
        bao_chi2 = np.sum(individual_chi2)
        print(f"\nüìä BAO œá¬≤ = {bao_chi2:.3f}")
        
        # üö® –ö–†–ò–¢–ò–ß–ù–û: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑–ª–∏–∫–∞
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ù–û: –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑–ª–∏–∫–∞—Ç–∞")
        print(f"Obs range: {np.min(DV_rs_obs):.1f} - {np.max(DV_rs_obs):.1f}")
        print(f"Theory range: {np.min(DV_rs_theory):.3f} - {np.max(DV_rs_theory):.3f}")
        print(f"Ratio factor: {np.mean(DV_rs_obs/DV_rs_theory):.1f}")
        
        return bao_chi2, {
            'r_s': r_s,
            'debug_info': debug_info,
            'residuals': residuals,
            'individual_chi2': individual_chi2,
            'total_chi2': bao_chi2
        }
    
    def _debug_cmb_chi_squared(self) -> Tuple[float, Dict]:
        """
        –î–µ—Ç–∞–π–ª–µ–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ CMB œá¬≤
        """
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ CMB –¥–∞–Ω–Ω–∏
        acoustic_data = self.cmb_data.get_acoustic_scale()
        theta_s_obs = acoustic_data['theta_s']
        theta_s_err = acoustic_data['theta_s_err']
        
        print(f"üìä CMB theta_s_obs: {theta_s_obs:.6f}")
        print(f"üìä CMB theta_s_err: {theta_s_err:.6f}")
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–µ–Ω –º–æ–¥–µ–ª
        cosmo = NoLambdaCosmology(**self.best_fit_params)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ–Ω theta_s
        print(f"\nüîç –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ–Ω theta_s...")
        
        # Sound horizon
        r_s = cosmo.sound_horizon_scale()
        print(f"r_s = {r_s:.3f} Mpc")
        
        # Comoving distance –∫—ä–º decoupling (z ~ 1090)
        z_cmb = 1090
        D_M = cosmo.comoving_distance(z_cmb)
        print(f"D_M({z_cmb}) = {D_M:.3f} Mpc")
        
        # Angular scale
        theta_s_theory = r_s / D_M
        print(f"theta_s_theory = {theta_s_theory:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ theta_s –µ —Ä–∞–∑—É–º–µ–Ω
        if theta_s_theory < 0.0008 or theta_s_theory > 0.0015:
            print(f"‚ö†Ô∏è WARNING: theta_s = {theta_s_theory:.6f} –∏–∑–≥–ª–µ–∂–¥–∞ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ!")
            print(f"‚ö†Ô∏è –û—á–∞–∫–≤–∞–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ ~0.0104")
        
        # –û—Å—Ç–∞—Ç—ä–∫
        residual = theta_s_obs - theta_s_theory
        print(f"Residual: {residual:.6f}")
        relative_residual = residual/theta_s_obs*100
        print(f"Relative residual (%): {relative_residual:.2f}")
        
        # CMB œá¬≤
        cmb_chi2 = (residual / theta_s_err)**2
        print(f"\nüìä CMB œá¬≤ = {cmb_chi2:.3f}")
        
        # üö® –ö–†–ò–¢–ò–ß–ù–û: –ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB —Ä–∞–∑–ª–∏–∫–∞—Ç–∞
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ù–û: CMB –∞–Ω–∞–ª–∏–∑")
        print(f"Obs theta_s: {theta_s_obs:.6f}")
        print(f"Theory theta_s: {theta_s_theory:.6f}")
        print(f"Ratio: {theta_s_obs/theta_s_theory:.2f}")
        
        return cmb_chi2, {
            'theta_s_obs': theta_s_obs,
            'theta_s_theory': theta_s_theory,
            'theta_s_err': theta_s_err,
            'residual': residual,
            'chi2': cmb_chi2
        }
    
    def _compare_with_expectations(self, bao_chi2: float, cmb_chi2: float, total_chi2: float):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—á–∞–∫–≤–∞–Ω–∏—è—Ç–∞
        """
        
        # –ë—Ä–æ—è –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
        bao_combined = self.bao_data.get_combined_data()
        n_bao = len(bao_combined['redshifts'])
        n_cmb = 4  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ (theta_s + peaks)
        n_total = n_bao + n_cmb
        
        n_params = len(self.best_fit_params)
        dof = n_total - n_params
        
        print(f"üìä –ë—Ä–æ–π BAO —Ç–æ—á–∫–∏: {n_bao}")
        print(f"üìä –ë—Ä–æ–π CMB constrains: {n_cmb}")
        print(f"üìä –û–±—â–æ –¥–∞–Ω–Ω–∏: {n_total}")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {n_params}")
        print(f"üìä DOF: {dof}")
        
        # –û—á–∞–∫–≤–∞–Ω–∏—è
        expected_chi2 = dof
        reduced_chi2 = total_chi2 / dof
        
        print(f"\nüìä –û—á–∞–∫–≤–∞–Ω œá¬≤ ‚âà {expected_chi2}")
        print(f"üìä –ù–∞–º–µ—Ä–µ–Ω œá¬≤ = {total_chi2:.1f}")
        print(f"üìä Reduced œá¬≤ = {reduced_chi2:.1f}")
        
        # –î–∏–∞–≥–Ω–æ–∑–∞
        if reduced_chi2 > 10:
            print(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Reduced œá¬≤ >> 1 - —Å–∏–≥—É—Ä–Ω–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞ –≤ –∫–æ–¥–∞!")
        elif reduced_chi2 > 3:
            print(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú: Reduced œá¬≤ > 3 - –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞")
        elif reduced_chi2 > 1.5:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Reduced œá¬≤ > 1.5 - –≤—ä–∑–º–æ–∂–µ–Ω –ø—Ä–æ–±–ª–µ–º")
        else:
            print(f"‚úÖ –î–û–ë–†–ï: Reduced œá¬≤ ‚âà 1")
    
    def _detailed_analysis(self, bao_debug: Dict, cmb_debug: Dict):
        """
        –î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
        """
        
        print("\nüîç –î–ï–¢–ê–ô–õ–ï–ù –ê–ù–ê–õ–ò–ó:")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO
        print("\n--- BAO –ê–ù–ê–õ–ò–ó ---")
        r_s = bao_debug['r_s']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ sound horizon
        print(f"Sound horizon: {r_s:.3f} Mpc")
        if r_s < 100:
            print("‚ùå –ü–†–û–ë–õ–ï–ú: r_s –µ —Ç–≤—ä—Ä–¥–µ –º–∞–ª—ä–∫!")
        elif r_s > 200:
            print("‚ùå –ü–†–û–ë–õ–ï–ú: r_s –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º!")
        else:
            print("‚úÖ r_s –∏–∑–≥–ª–µ–∂–¥–∞ —Ä–∞–∑—É–º–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—Ç–µ –ø—Ä–∏–Ω–æ—Å–∏
        individual_chi2 = bao_debug['individual_chi2']
        max_chi2_idx = np.argmax(individual_chi2)
        max_chi2 = individual_chi2[max_chi2_idx]
        
        print(f"–ù–∞–π-–≥–æ–ª—è–º –ø—Ä–∏–Ω–æ—Å –∫—ä–º œá¬≤: {max_chi2:.3f} (index {max_chi2_idx})")
        
        if max_chi2 > 100:
            print("‚ùå –ü–†–û–ë–õ–ï–ú: –ï–¥–Ω–∞ —Ç–æ—á–∫–∞ –¥–∞–≤–∞ –æ–≥—Ä–æ–º–µ–Ω –ø—Ä–∏–Ω–æ—Å!")
            debug_point = bao_debug['debug_info'][max_chi2_idx]
            print(f"–ü—Ä–æ–±–ª–µ–º–Ω–∞ —Ç–æ—á–∫–∞: z={debug_point['z']:.3f}")
            print(f"Theory: {debug_point['DV_rs_theory']:.6f}")
            print(f"Obs: {debug_point['DV_rs_obs']:.6f}")
            print(f"Error: {debug_point['DV_rs_err']:.6f}")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB
        print("\n--- CMB –ê–ù–ê–õ–ò–ó ---")
        theta_s_theory = cmb_debug['theta_s_theory']
        theta_s_obs = cmb_debug['theta_s_obs']
        
        print(f"CMB theta_s theory: {theta_s_theory:.6f}")
        print(f"CMB theta_s obs: {theta_s_obs:.6f}")
        
        relative_error = abs(theta_s_theory - theta_s_obs) / theta_s_obs * 100
        print(f"Relative error: {relative_error:.1f}%")
        
        if relative_error > 50:
            print("‚ùå –ü–†–û–ë–õ–ï–ú: –û–≥—Ä–æ–º–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞ –≤ CMB!")
        elif relative_error > 10:
            print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú: –ì–æ–ª—è–º–∞ —Ä–∞–∑–ª–∏–∫–∞ –≤ CMB")
        else:
            print("‚úÖ CMB –∏–∑–≥–ª–µ–∂–¥–∞ —Ä–∞–∑—É–º–Ω–æ")
    
    def compare_with_reference(self):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ (Planck, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞)
        """
        
        print("\n" + "="*60)
        print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ï–§–ï–†–ï–ù–¢–ù–ò –°–¢–û–ô–ù–û–°–¢–ò")
        print("="*60)
        
        # –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç Planck 2018
        print("\nüìö –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ (Planck 2018):")
        print(f"H0 = 67.4 km/s/Mpc")
        print(f"Omega_m = 0.315")
        print(f"r_s ‚âà 147 Mpc")
        print(f"theta_s ‚âà 0.0104")
        
        # –ù–∞—à–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        cosmo = NoLambdaCosmology(**self.best_fit_params)
        r_s = cosmo.sound_horizon_scale()
        theta_s = cosmo.cmb_angular_scale()
        
        print(f"\nüìä –ù–∞—à–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏:")
        print(f"H0 = {self.best_fit_params['H0']:.1f} km/s/Mpc")
        print(f"Omega_m = {self.best_fit_params['Omega_m']:.3f}")
        print(f"r_s = {r_s:.1f} Mpc")
        print(f"theta_s = {theta_s:.6f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        h0_diff = abs(self.best_fit_params['H0'] - 67.4) / 67.4 * 100
        omega_diff = abs(self.best_fit_params['Omega_m'] - 0.315) / 0.315 * 100
        rs_diff = abs(r_s - 147) / 147 * 100
        theta_diff = abs(theta_s - 0.0104) / 0.0104 * 100
        
        print(f"H0 difference: {h0_diff:.1f}%")
        print(f"Omega_m difference: {omega_diff:.1f}%")
        print(f"r_s difference: {rs_diff:.1f}%")
        print(f"theta_s difference: {theta_diff:.1f}%")
        
        if any([h0_diff > 20, omega_diff > 20, rs_diff > 20, theta_diff > 20]):
            print("‚ùå –ü–†–û–ë–õ–ï–ú: –°—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ —Å–∞ —Ç–≤—ä—Ä–¥–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –æ—Ç –æ—á–∞–∫–≤–∞–Ω–∏—Ç–µ!")
        else:
            print("‚úÖ –°—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ –∏–∑–≥–ª–µ–∂–¥–∞—Ç —Ä–∞–∑—É–º–Ω–∏")
    
    def save_debug_results(self, debug_results: Dict):
        """
        –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        """
        
        print("\nüíæ –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏...")
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ DataFrame –∑–∞ BAO
        bao_data = []
        for info in debug_results[1]['debug_info']:
            bao_data.append({
                'z': info['z'],
                'DV_rs_obs': info['DV_rs_obs'],
                'DV_rs_theory': info['DV_rs_theory'],
                'DV_rs_err': info['DV_rs_err'],
                'residual': info['DV_rs_obs'] - info['DV_rs_theory'],
                'chi2_contribution': ((info['DV_rs_obs'] - info['DV_rs_theory']) / info['DV_rs_err'])**2
            })
        
        bao_df = pd.DataFrame(bao_data)
        bao_df.to_csv('debug_bao_analysis.csv', index=False)
        
        # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ summary
        with open('debug_chi_squared_summary.txt', 'w', encoding='utf-8') as f:
            f.write("CHI-SQUARED DEBUG SUMMARY\n")
            f.write("=" * 30 + "\n\n")
            
            f.write("BEST-FIT PARAMETERS:\n")
            for param, value in self.best_fit_params.items():
                f.write(f"{param}: {value:.6f}\n")
            
            f.write(f"\nCHI-SQUARED BREAKDOWN:\n")
            f.write(f"BAO œá¬≤: {debug_results[1]['total_chi2']:.3f}\n")
            f.write(f"CMB œá¬≤: {debug_results[2]['chi2']:.3f}\n")
            f.write(f"Total œá¬≤: {debug_results[0]:.3f}\n")
            
            f.write(f"\nKEY QUANTITIES:\n")
            f.write(f"Sound horizon: {debug_results[1]['r_s']:.3f} Mpc\n")
            f.write(f"CMB theta_s: {debug_results[2]['theta_s_theory']:.6f}\n")
        
        print("‚úÖ –î–µ–±—ä–≥–≤–∞–Ω–µ —Ñ–∞–π–ª–æ–≤–µ –∑–∞–ø–∏—Å–∞–Ω–∏:")
        print("   üìä debug_bao_analysis.csv")
        print("   üìã debug_chi_squared_summary.txt")


def test_standard_lcdm_comparison():
    """–¢–µ—Å—Ç —Å—ä—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω ŒõCDM –º–æ–¥–µ–ª –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    print("\nüîç –¢–ï–°–¢ –°–™–° –°–¢–ê–ù–î–ê–†–¢–ï–ù ŒõCDM –ú–û–î–ï–õ")
    print("=" * 40)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω ŒõCDM –º–æ–¥–µ–ª (Planck 2018)
    from astropy.cosmology import Planck18
    cosmo = Planck18
    
    # –ù–∞—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    H0 = 69.1  # km/s/Mpc
    Omega_m = 0.3233
    Omega_b = 0.049
    
    print(f"–ü–ª–∞–Ω–∫ 2018 r_s: {cosmo.comoving_distance(1090).value:.1f} Mpc (–∑–∞ z=1090)")
    print(f"–ü–ª–∞–Ω–∫ 2018 H0: {cosmo.H0.value:.1f} km/s/Mpc")
    print(f"–ü–ª–∞–Ω–∫ 2018 Omega_m: {cosmo.Om0:.3f}")
    print(f"–ü–ª–∞–Ω–∫ 2018 theta_s: {cosmo.angular_diameter_distance(1090).value / cosmo.comoving_distance(1090).value:.6f}")
    
    # –û–ø—Ä–æ—Å—Ç–µ–Ω —Ç–µ—Å—Ç –±–µ–∑ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏
    print("\nüîç –û–ü–†–û–°–¢–ï–ù –¢–ï–°–¢ –ë–ï–ó –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò –ö–û–†–ï–ö–¶–ò–ò")
    print("=" * 40)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω E(z) –∑–∞ No-Lambda
    def E_function_simple(z, H0, Omega_m, Omega_r=8.24e-5):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω–∞ E(z) —Ñ—É–Ω–∫—Ü–∏—è –ë–ï–ó –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏"""
        Omega_k = 1 - Omega_m - Omega_r
        return np.sqrt(Omega_m*(1+z)**3 + Omega_r*(1+z)**4 + Omega_k*(1+z)**2)
    
    def sound_speed_simple(z, Omega_b=0.049):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω–∞ sound speed –ë–ï–ó –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏"""
        c = 299792458  # m/s
        T_cmb = 2.725  # K
        T_nu = T_cmb * (4/11)**(1/3)  # K
        Omega_gamma = 8.24e-5 * (8/7) * (T_cmb/T_nu)**4
        R_b = (3 * Omega_b) / (4 * Omega_gamma * (1 + z))
        return c / np.sqrt(3 * (1 + R_b))
    
    def hubble_simple(z, H0, Omega_m, Omega_r=8.24e-5):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω–∞ Hubble —Ñ—É–Ω–∫—Ü–∏—è –ë–ï–ó –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏"""
        return H0 * E_function_simple(z, H0, Omega_m, Omega_r)
    
    def sound_horizon_simple(z_drag, H0, Omega_m, Omega_b):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω sound horizon –ë–ï–ó –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏"""
        def integrand(z):
            c_s = sound_speed_simple(z, Omega_b)  # m/s
            H_z = hubble_simple(z, H0, Omega_m)  # km/s/Mpc
            return (c_s / 1000) / H_z  # Mpc
        
        from scipy.integrate import quad
        r_s, _ = quad(integrand, 0, z_drag)
        return r_s
    
    # Drag epoch —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞
    def drag_epoch_simple(H0, Omega_m, Omega_b):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω–∞ drag epoch —Ñ–æ—Ä–º—É–ª–∞"""
        b1 = 0.313 * (Omega_m * H0**2 / 100)**(-0.419) * (1 + 0.607 * (Omega_m * H0**2 / 100)**0.674)
        b2 = 0.238 * (Omega_m * H0**2 / 100)**0.223
        z_drag = 1291 * (Omega_m * H0**2 / 100)**0.251 / (1 + 0.659 * (Omega_m * H0**2 / 100)**0.828) * (1 + b1 * (Omega_b * H0**2 / 100)**b2)
        return z_drag
    
    # –ò–∑—á–∏—Å–ª–µ–Ω–∏—è
    z_drag_simple = drag_epoch_simple(H0, Omega_m, Omega_b)
    r_s_simple = sound_horizon_simple(z_drag_simple, H0, Omega_m, Omega_b)
    
    print(f"–û–ø—Ä–æ—Å—Ç–µ–Ω z_drag: {z_drag_simple:.1f}")
    print(f"–û–ø—Ä–æ—Å—Ç–µ–Ω r_s: {r_s_simple:.1f} Mpc")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–∏—è –º–æ–¥–µ–ª
    print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"–ù–∞—à –º–æ–¥–µ–ª z_drag: {598.5:.1f}")
    print(f"–ù–∞—à –º–æ–¥–µ–ª r_s: {1966.151:.1f} Mpc")
    print(f"–û–ø—Ä–æ—Å—Ç–µ–Ω z_drag: {z_drag_simple:.1f}")
    print(f"–û–ø—Ä–æ—Å—Ç–µ–Ω r_s: {r_s_simple:.1f} Mpc")
    
    print(f"\n–ü—Ä–æ–±–ª–µ–º: –ù–∞—à–∏—è—Ç r_s –µ {1966.151/r_s_simple:.1f}x –ø–æ-–≥–æ–ª—è–º –æ—Ç –æ–ø—Ä–æ—Å—Ç–µ–Ω–∏—è!")
    
    return z_drag_simple, r_s_simple


def main():
    """
    –ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
    """
    
    print("üö® CHI-SQUARED DEBUGGER")
    print("üéØ –¶–µ–ª: –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞ –≤ œá¬≤ = 2099.4")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å—ä—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω ŒõCDM –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    test_standard_lcdm_comparison()
    
    # –û–±–∏—á–∞–π–Ω–æ—Ç–æ –¥–µ–±—ä–≥–≤–∞–Ω–µ
    analyzer = ChiSquaredDebugger()
    analyzer.debug_full_chi_squared()
    
    print("\nüéâ –î–µ–±—ä–≥–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏!")
    print("üìã –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –¥–µ—Ç–∞–π–ª–∏")


if __name__ == "__main__":
    main() 