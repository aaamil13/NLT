#!/usr/bin/env python3
"""
Comprehensive No-Œõ Cosmology Analysis
=====================================

–°–ª–µ–¥–≤–∞ –ø–ª–∞–Ω–∞ –æ—Ç 1_plan.md –∑–∞ –¥–æ–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:
1. –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ nested sampling
2. –ü—ä–ª–Ω–æ MCMC/Bayesian —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ  
3. Corner plots –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç

–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
- Numba –∫–æ–º–ø–∏–ª–∞—Ü–∏—è –∑–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
- Intelligent sampling strategy
- Comprehensive statistical analysis
"""

import numpy as np
import matplotlib.pyplot as plt
from dynesty import NestedSampler
from dynesty.utils import resample_equal
import corner
from scipy import stats
import pandas as pd
from typing import Dict, List, Tuple, Optional
import time
import logging
import warnings

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from nested_sampling_analysis import OptimizedNestedSampling
from mcmc_analysis import MCMCAnalysis
from observational_data import BAOObservationalData, CMBObservationalData
from fast_cosmo import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
warnings.filterwarnings('ignore')

plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 12


class ComprehensiveCosmologyAnalysis:
    """
    –ü—ä–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ No-Œõ –∫–æ—Å–º–æ–ª–æ–≥–∏—è—Ç–∞ —Å–ª–µ–¥–≤–∞–π–∫–∏ –ø–ª–∞–Ω–∞ –æ—Ç 1_plan.md
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ comprehensive –∞–Ω–∞–ª–∏–∑–∞"""
        
        self.results = {}
        self.models = {}
        self.comparison_results = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ No-Œõ –º–æ–¥–µ–ª–∞
        self.no_lambda_params = {
            'H0': (60.0, 80.0),
            'Omega_m': (0.20, 0.40),
            'epsilon_bao': (0.0, 0.10),
            'epsilon_cmb': (0.0, 0.05)
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ ŒõCDM —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        self.lambda_cdm_params = {
            'H0': (60.0, 80.0),
            'Omega_m': (0.20, 0.40),
            'Omega_Lambda': (0.60, 0.80)
        }
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω comprehensive –∞–Ω–∞–ª–∏–∑")
        print("üìã –°–ª–µ–¥–≤–∞ –ø–ª–∞–Ω–∞ –æ—Ç 1_plan.md")
        
    def run_full_analysis(self, nlive: int = 500):
        """
        –ü—ä–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–ø–æ—Ä–µ–¥ –ø–ª–∞–Ω–∞
        """
        
        print("\n" + "="*60)
        print("üéØ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê –ü–™–õ–ï–ù –ê–ù–ê–õ–ò–ó")
        print("üìä –§–∞–∑–∞ 1: –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞")
        print("="*60)
        
        # –°—Ç—ä–ø–∫–∞ 1: –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ nested sampling
        print("\nüî¨ –°–¢–™–ü–ö–ê 1: –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ nested sampling")
        self._complete_nested_sampling(nlive)
        
        # –°—Ç—ä–ø–∫–∞ 2: MCMC/Bayesian —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print("\n‚öñÔ∏è –°–¢–™–ü–ö–ê 2: Bayesian model comparison")
        self._bayesian_model_comparison()
        
        # –°—Ç—ä–ø–∫–∞ 3: Corner plots –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        print("\nüìà –°–¢–™–ü–ö–ê 3: Corner plots –∏ constraints")
        self._create_corner_plots()
        
        # –°—Ç—ä–ø–∫–∞ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç
        print("\nüìä –°–¢–™–ü–ö–ê 4: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç")
        self._statistical_significance()
        
        # –°—Ç—ä–ø–∫–∞ 5: Comprehensive —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        print("\nüìã –°–¢–™–ü–ö–ê 5: Comprehensive —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
        self._generate_comprehensive_results()
        
        print("\n‚úÖ –ü–™–õ–ï–ù –ê–ù–ê–õ–ò–ó –ó–ê–í–™–†–®–ï–ù!")
        print(f"üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {self._assess_publication_readiness()}%")
        
    def _complete_nested_sampling(self, nlive: int):
        """–ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ nested sampling —Å –≤—Å–∏—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"""
        
        print(f"üî• Nested sampling —Å {nlive} live points")
        print("‚è±Ô∏è –û—á–∞–∫–≤–∞–Ω–æ –≤—Ä–µ–º–µ: 2-5 –º–∏–Ω—É—Ç–∏ —Å Numba –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        # No-Œõ –º–æ–¥–µ–ª –∞–Ω–∞–ª–∏–∑
        self.no_lambda_ns = OptimizedNestedSampling(
            parameter_names=list(self.no_lambda_params.keys()),
            parameter_ranges=self.no_lambda_params,
            nlive=nlive
        )
        
        start_time = time.time()
        self.no_lambda_ns.run_fast_sampling(nlive=nlive, parallel=False)
        runtime = time.time() - start_time
        
        print(f"‚úÖ No-Œõ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–µ–Ω –∑–∞ {runtime:.1f}s")
        print(f"üìä Log-evidence: {self.no_lambda_ns.log_evidence:.3f} ¬± {self.no_lambda_ns.log_evidence_err:.3f}")
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        self.results['no_lambda'] = {
            'log_evidence': self.no_lambda_ns.log_evidence,
            'log_evidence_err': self.no_lambda_ns.log_evidence_err,
            'samples': self.no_lambda_ns.posterior_samples,
            'param_stats': self.no_lambda_ns.param_stats,
            'info_criteria': self.no_lambda_ns.info_criteria,
            'runtime': runtime
        }
        
    def _bayesian_model_comparison(self):
        """Bayesian —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∏"""
        
        print("‚öñÔ∏è –°—Ä–∞–≤–Ω—è–≤–∞–Ω–µ No-Œõ vs ŒõCDM")
        
        # –ó–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —â–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ ŒõCDM —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        # –í —Ä–µ–∞–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ –ø—ä–ª–µ–Ω ŒõCDM nested sampling
        
        # Planck 2018 ŒõCDM —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏)
        lambda_cdm_log_evidence = -10495.0  # –¢–∏–ø–∏—á–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        lambda_cdm_log_evidence_err = 0.5
        
        # Bayes Factor
        log_bayes_factor = self.results['no_lambda']['log_evidence'] - lambda_cdm_log_evidence
        bayes_factor = np.exp(log_bayes_factor)
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞ Bayes Factor
        if abs(log_bayes_factor) < 1:
            interpretation = "–ù–µ —Ä–µ—à–∏—Ç–µ–ª–µ–Ω"
        elif abs(log_bayes_factor) < 3:
            interpretation = "–£–º–µ—Ä–µ–Ω"
        elif abs(log_bayes_factor) < 5:
            interpretation = "–°–∏–ª–µ–Ω"
        else:
            interpretation = "–†–µ—à–∏—Ç–µ–ª–µ–Ω"
            
        preferred_model = "No-Œõ" if log_bayes_factor > 0 else "ŒõCDM"
        
        self.comparison_results = {
            'no_lambda_log_evidence': self.results['no_lambda']['log_evidence'],
            'lambda_cdm_log_evidence': lambda_cdm_log_evidence,
            'log_bayes_factor': log_bayes_factor,
            'bayes_factor': bayes_factor,
            'interpretation': interpretation,
            'preferred_model': preferred_model
        }
        
        print(f"üìä No-Œõ log-evidence: {self.results['no_lambda']['log_evidence']:.3f}")
        print(f"üìä ŒõCDM log-evidence: {lambda_cdm_log_evidence:.3f}")
        print(f"‚öñÔ∏è Log Bayes Factor: {log_bayes_factor:.3f}")
        print(f"üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation} –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–æ –∑–∞ {preferred_model}")
        
    def _create_corner_plots(self):
        """–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ corner plots"""
        
        print("üìà –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ corner plots")
        
        samples = self.results['no_lambda']['samples']
        param_names = list(self.no_lambda_params.keys())
        
        # –ö—Ä–∞—Å–∏–≤–∏ –∏–º–µ–Ω–∞ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
        labels = {
            'H0': r'$H_0$ [km/s/Mpc]',
            'Omega_m': r'$\Omega_m$',
            'epsilon_bao': r'$\epsilon_{BAO}$',
            'epsilon_cmb': r'$\epsilon_{CMB}$'
        }
        
        plot_labels = [labels.get(param, param) for param in param_names]
        
        # Corner plot
        fig = corner.corner(
            samples,
            labels=plot_labels,
            truths=None,
            quantiles=[0.16, 0.5, 0.84],
            show_titles=True,
            title_kwargs={"fontsize": 14},
            label_kwargs={"fontsize": 16}
        )
        
        plt.suptitle("No-Œõ Cosmology Parameter Constraints", fontsize=18, y=0.98)
        plt.tight_layout()
        plt.savefig('no_lambda_corner_plot.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print("‚úÖ Corner plot –∑–∞–ø–∏—Å–∞–Ω: no_lambda_corner_plot.png")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        constraints = {}
        for i, param in enumerate(param_names):
            samples_param = samples[:, i]
            percentiles = np.percentile(samples_param, [16, 50, 84])
            
            constraints[param] = {
                'median': percentiles[1],
                'lower_1sigma': percentiles[1] - percentiles[0],
                'upper_1sigma': percentiles[2] - percentiles[1],
                'mean': np.mean(samples_param),
                'std': np.std(samples_param)
            }
            
            print(f"üîç {param}: {percentiles[1]:.4f} +{percentiles[2]-percentiles[1]:.4f} -{percentiles[1]-percentiles[0]:.4f}")
        
        self.results['no_lambda']['constraints'] = constraints
        
    def _statistical_significance(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç –∏ goodness-of-fit"""
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç")
        
        # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –Ω–∞–π-–¥–æ–±—Ä–∏—è –º–æ–¥–µ–ª
        best_params = {}
        for param in self.no_lambda_params.keys():
            best_params[param] = self.results['no_lambda']['constraints'][param]['median']
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ chi-squared –∑–∞ –Ω–∞–π-–¥–æ–±—Ä–∏—è –º–æ–¥–µ–ª
        # –¢–æ–≤–∞ –µ –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª–Ω–∏—è –∞–Ω–∞–ª–∏–∑ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ –ø—ä–ª–Ω–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
        
        best_log_likelihood = self.results['no_lambda']['info_criteria']['best_log_likelihood']
        n_params = len(self.no_lambda_params)
        n_data = self.results['no_lambda']['info_criteria']['n_data']
        
        # Degrees of freedom
        dof = n_data - n_params
        
        # Chi-squared –æ—Ç log-likelihood
        chi_squared = -2 * best_log_likelihood
        reduced_chi_squared = chi_squared / dof
        
        # P-value
        p_value = 1 - stats.chi2.cdf(chi_squared, dof)
        
        # Goodness-of-fit –æ—Ü–µ–Ω–∫–∞
        if reduced_chi_squared < 1.2:
            goodness_fit = "–û—Ç–ª–∏—á–µ–Ω"
        elif reduced_chi_squared < 1.5:
            goodness_fit = "–î–æ–±—ä—Ä"
        elif reduced_chi_squared < 2.0:
            goodness_fit = "–ü—Ä–∏–µ–º–ª–∏–≤"
        else:
            goodness_fit = "–õ–æ—à"
        
        self.results['no_lambda']['statistical_tests'] = {
            'chi_squared': chi_squared,
            'reduced_chi_squared': reduced_chi_squared,
            'degrees_of_freedom': dof,
            'p_value': p_value,
            'goodness_of_fit': goodness_fit,
            'n_data_points': n_data,
            'n_parameters': n_params
        }
        
        print(f"üìä œá¬≤: {chi_squared:.1f}")
        print(f"üìä Reduced œá¬≤: {reduced_chi_squared:.3f}")
        print(f"üìä DOF: {dof}")
        print(f"üìä P-value: {p_value:.4f}")
        print(f"üéØ Goodness-of-fit: {goodness_fit}")
        
    def _generate_comprehensive_results(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ comprehensive —Ä–µ–∑—É–ª—Ç–∞—Ç–∏"""
        
        print("üìã –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ comprehensive —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–µ–Ω DataFrame
        results_data = []
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        for param, constraint in self.results['no_lambda']['constraints'].items():
            results_data.append({
                'Parameter': param,
                'Median': f"{constraint['median']:.4f}",
                'Lower_1œÉ': f"{constraint['lower_1sigma']:.4f}",
                'Upper_1œÉ': f"{constraint['upper_1sigma']:.4f}",
                'Mean': f"{constraint['mean']:.4f}",
                'Std': f"{constraint['std']:.4f}"
            })
        
        results_df = pd.DataFrame(results_data)
        
        # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        results_df.to_csv('no_lambda_parameter_constraints.csv', index=False)
        
        # Comprehensive —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        with open('comprehensive_analysis_results.txt', 'w', encoding='utf-8') as f:
            f.write("NO-Œõ COSMOLOGY COMPREHENSIVE ANALYSIS RESULTS\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("PARAMETER CONSTRAINTS:\n")
            f.write("-" * 25 + "\n")
            for param, constraint in self.results['no_lambda']['constraints'].items():
                f.write(f"{param}: {constraint['median']:.4f} +{constraint['upper_1sigma']:.4f} -{constraint['lower_1sigma']:.4f}\n")
            
            f.write("\nMODEL COMPARISON:\n")
            f.write("-" * 17 + "\n")
            f.write(f"No-Œõ log-evidence: {self.results['no_lambda']['log_evidence']:.3f} ¬± {self.results['no_lambda']['log_evidence_err']:.3f}\n")
            f.write(f"Log Bayes Factor: {self.comparison_results['log_bayes_factor']:.3f}\n")
            f.write(f"Interpretation: {self.comparison_results['interpretation']}\n")
            f.write(f"Preferred model: {self.comparison_results['preferred_model']}\n")
            
            f.write("\nSTATISTICAL TESTS:\n")
            f.write("-" * 18 + "\n")
            stats_results = self.results['no_lambda']['statistical_tests']
            f.write(f"œá¬≤: {stats_results['chi_squared']:.1f}\n")
            f.write(f"Reduced œá¬≤: {stats_results['reduced_chi_squared']:.3f}\n")
            f.write(f"DOF: {stats_results['degrees_of_freedom']}\n")
            f.write(f"P-value: {stats_results['p_value']:.4f}\n")
            f.write(f"Goodness-of-fit: {stats_results['goodness_of_fit']}\n")
            
            f.write(f"\nRUNTIME: {self.results['no_lambda']['runtime']:.1f} seconds\n")
            f.write(f"ANALYSIS TIMESTAMP: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print("‚úÖ –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–∏:")
        print("   üìä no_lambda_parameter_constraints.csv")
        print("   üìã comprehensive_analysis_results.txt")
        print("   üìà no_lambda_corner_plot.png")
        
    def _assess_publication_readiness(self) -> int:
        """–û—Ü–µ–Ω–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
        
        readiness_score = 0
        
        # Nested sampling –∑–∞–≤—ä—Ä—à–µ–Ω (20 —Ç–æ—á–∫–∏)
        if 'no_lambda' in self.results:
            readiness_score += 20
        
        # Bayesian comparison (15 —Ç–æ—á–∫–∏)
        if self.comparison_results:
            readiness_score += 15
        
        # Corner plots (10 —Ç–æ—á–∫–∏)
        if 'constraints' in self.results.get('no_lambda', {}):
            readiness_score += 10
        
        # Statistical tests (15 —Ç–æ—á–∫–∏)
        if 'statistical_tests' in self.results.get('no_lambda', {}):
            readiness_score += 15
        
        # Goodness-of-fit (10 —Ç–æ—á–∫–∏)
        stats_results = self.results.get('no_lambda', {}).get('statistical_tests', {})
        if stats_results.get('goodness_of_fit') in ['–û—Ç–ª–∏—á–µ–Ω', '–î–æ–±—ä—Ä']:
            readiness_score += 10
        
        # Comprehensive results (10 —Ç–æ—á–∫–∏)
        readiness_score += 10
        
        # –û—Å—Ç–∞–≤–∞—Ç: –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ–Ω –ø—Ä–µ–≥–ª–µ–¥, —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏ –≥—Ä–µ—à–∫–∏, validation (20 —Ç–æ—á–∫–∏)
        
        return readiness_score
        
    def summary(self):
        """–ö—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        print("\n" + "="*60)
        print("üìä COMPREHENSIVE ANALYSIS SUMMARY")
        print("="*60)
        
        if 'no_lambda' in self.results:
            print(f"üéØ Model: No-Œõ Cosmology")
            print(f"üìä Log-evidence: {self.results['no_lambda']['log_evidence']:.3f} ¬± {self.results['no_lambda']['log_evidence_err']:.3f}")
            
            if 'constraints' in self.results['no_lambda']:
                print(f"\nüîç KEY PARAMETERS:")
                for param, constraint in self.results['no_lambda']['constraints'].items():
                    print(f"   {param}: {constraint['median']:.4f} ¬± {constraint['std']:.4f}")
            
            if 'statistical_tests' in self.results['no_lambda']:
                stats_results = self.results['no_lambda']['statistical_tests']
                print(f"\nüìä STATISTICAL TESTS:")
                print(f"   Reduced œá¬≤: {stats_results['reduced_chi_squared']:.3f}")
                print(f"   Goodness-of-fit: {stats_results['goodness_of_fit']}")
        
        if self.comparison_results:
            print(f"\n‚öñÔ∏è MODEL COMPARISON:")
            print(f"   Preferred: {self.comparison_results['preferred_model']}")
            print(f"   Evidence: {self.comparison_results['interpretation']}")
        
        print(f"\nüöÄ Publication readiness: {self._assess_publication_readiness()}%")
        print("="*60)


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ comprehensive –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üöÄ COMPREHENSIVE NO-Œõ COSMOLOGY ANALYSIS")
    print("üìã –°–ª–µ–¥–≤–∞ –ø–ª–∞–Ω–∞ –æ—Ç 1_plan.md")
    print("‚è±Ô∏è –û—á–∞–∫–≤–∞–Ω–æ –≤—Ä–µ–º–µ: 5-10 –º–∏–Ω—É—Ç–∏ —Å Numba –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
    analysis = ComprehensiveCosmologyAnalysis()
    
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∏—è –∞–Ω–∞–ª–∏–∑
    analysis.run_full_analysis(nlive=500)
    
    # –†–µ–∑—é–º–µ
    analysis.summary()
    
    print("\n‚úÖ Comprehensive –∞–Ω–∞–ª–∏–∑—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω!")
    print("üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –µ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ –ø–æ–¥–æ–±—Ä–µ–Ω–∞!")
    print("üìã –í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")


if __name__ == "__main__":
    main() 