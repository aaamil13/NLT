#!/usr/bin/env python3
"""
–î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏—Ç–µ –Ω–∞ Œ∏_s = r_s / D_A(z_drag)
–¶–µ–ª: –†–∞–∑–±–∏—Ä–∞–Ω–µ –∑–∞—â–æ No-Œõ –º–æ–¥–µ–ª—ä—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–≤–∞ –≥—Ä–µ—à–Ω–æ CMB —ä–≥–ª–æ–≤–∏—è –º–∞—â–∞–±
"""

import numpy as np
import matplotlib.pyplot as plt
from no_lambda_cosmology import NoLambdaCosmology
from astropy.cosmology import FlatLambdaCDM
from astropy import units as u

def analyze_theta_s_components():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏—Ç–µ –Ω–∞ Œ∏_s"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ù–ê –ö–û–ú–ü–û–ù–ï–ù–¢–ò–¢–ï –ù–ê Œ∏_s")
    print("=" * 60)
    
    # –ù–∞–π-–¥–æ–±—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç nested sampling
    best_params = {
        'H0': 73.23,
        'Omega_m': 0.3046,
        'epsilon_bao': 0.0437,
        'epsilon_cmb': 0.0233
    }
    
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: H‚ÇÄ={best_params['H0']:.2f}, Œ©‚Çò={best_params['Omega_m']:.4f}")
    print(f"             Œµ_BAO={best_params['epsilon_bao']:.4f}, Œµ_CMB={best_params['epsilon_cmb']:.4f}")
    print()
    
    # === NO-LAMBDA –ú–û–î–ï–õ ===
    print("ÔøΩÔøΩ NO-LAMBDA –ú–û–î–ï–õ:")
    print("-" * 30)
    
    cosmo_nl = NoLambdaCosmology(
        H0=best_params['H0'],
        Omega_m=best_params['Omega_m'],
        epsilon_bao=best_params['epsilon_bao'],
        epsilon_cmb=best_params['epsilon_cmb']
    )
    
    # –ö–ª—é—á–æ–≤–∏ –µ–ø–æ—Ö–∏
    z_drag_nl = cosmo_nl.z_drag
    z_star_nl = cosmo_nl.z_star
    
    print(f"   z_drag = {z_drag_nl:.1f}")
    print(f"   z_star = {z_star_nl:.1f}")
    
    # –ó–≤—É–∫–æ–≤ —Ö–æ—Ä–∏–∑–æ–Ω—Ç
    r_s_nl = cosmo_nl.sound_horizon_scale(z_end=z_drag_nl)
    print(f"   r_s = {r_s_nl:.2f} Mpc")
    
    # –™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ drag epoch
    D_A_drag_nl = cosmo_nl.angular_diameter_distance(z_drag_nl)
    print(f"   D_A(z_drag) = {D_A_drag_nl:.2f} Mpc")
    
    # Œ∏_s –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
    theta_s_nl = r_s_nl / D_A_drag_nl
    print(f"   Œ∏_s = r_s / D_A = {theta_s_nl:.6f} rad")
    
    # === ŒõCDM –†–ï–§–ï–†–ï–ù–¶–ò–Ø ===
    print("\nüåå ŒõCDM –†–ï–§–ï–†–ï–ù–¶–ò–Ø:")
    print("-" * 30)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ Planck 2018 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    H0_lcdm = 67.4  # km/s/Mpc
    Omega_m_lcdm = 0.315
    Omega_b_lcdm = 0.049
    
    cosmo_lcdm = FlatLambdaCDM(
        H0=H0_lcdm * u.km / u.s / u.Mpc,
        Om0=Omega_m_lcdm,
        Ob0=Omega_b_lcdm
    )
    
    print(f"   H‚ÇÄ = {H0_lcdm} km/s/Mpc")
    print(f"   Œ©‚Çò = {Omega_m_lcdm}")
    print(f"   Œ©·µ¶ = {Omega_b_lcdm}")
    
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–µ–Ω z_drag –∑–∞ ŒõCDM
    z_drag_lcdm = 1060  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    
    # –ó–≤—É–∫–æ–≤ —Ö–æ—Ä–∏–∑–æ–Ω—Ç –∑–∞ ŒõCDM (–∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞)
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞
    r_s_lcdm = 147.0  # Mpc (Planck 2018)
    
    # –™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∑–∞ ŒõCDM
    D_A_drag_lcdm = cosmo_lcdm.angular_diameter_distance(z_drag_lcdm).value
    
    print(f"   z_drag ‚âà {z_drag_lcdm}")
    print(f"   r_s ‚âà {r_s_lcdm:.2f} Mpc")
    print(f"   D_A(z_drag) = {D_A_drag_lcdm:.2f} Mpc")
    
    # Œ∏_s –∑–∞ ŒõCDM
    theta_s_lcdm = r_s_lcdm / D_A_drag_lcdm
    print(f"   Œ∏_s = r_s / D_A = {theta_s_lcdm:.6f} rad")
    
    # === –ï–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–ù–ê –°–¢–û–ô–ù–û–°–¢ ===
    print("\nüî¨ –ï–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–ù–ê –°–¢–û–ô–ù–û–°–¢:")
    print("-" * 30)
    theta_s_obs = 0.010409
    theta_s_err = 0.0000031
    print(f"   Œ∏_s = {theta_s_obs:.6f} ¬± {theta_s_err:.7f} rad")
    
    # === –°–†–ê–í–ù–ï–ù–ò–ï ===
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("=" * 60)
    
    # –†–µ–∑–∏–¥—É–∞–ª–∏
    residual_nl = theta_s_nl - theta_s_obs
    residual_lcdm = theta_s_lcdm - theta_s_obs
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ –≥—Ä–µ—à–∫–∏
    error_nl = 100 * residual_nl / theta_s_obs
    error_lcdm = 100 * residual_lcdm / theta_s_obs
    
    # Sigma –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    sigma_nl = abs(residual_nl) / theta_s_err
    sigma_lcdm = abs(residual_lcdm) / theta_s_err
    
    print(f"{'-':<12} {'Œ∏_s':<10} {'–†–µ–∑–∏–¥—É–∞–ª':<12} {'–ì—Ä–µ—à–∫–∞ %':<10} {'Sigma':<10}")
    print("-" * 60)
    print(f"{'-':<12} {theta_s_nl:<10.6f} {residual_nl:<12.6f} {error_nl:<10.2f} {sigma_nl:<10.1f}")
    print(f"{'-':<12} {theta_s_lcdm:<10.6f} {residual_lcdm:<12.6f} {error_lcdm:<10.2f} {sigma_lcdm:<10.1f}")
    print(f"{'-':<12} {theta_s_obs:<10.6f} {'0.000000':<12} {'0.00':<10} {'0.0':<10}")
    
    # === –ö–û–ú–ü–û–ù–ï–ù–¢–ï–ù –ê–ù–ê–õ–ò–ó ===
    print("\nüîç –ö–û–ú–ü–û–ù–ï–ù–¢–ï–ù –ê–ù–ê–õ–ò–ó:")
    print("=" * 60)
    
    # r_s —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    r_s_ratio = r_s_nl / r_s_lcdm
    print("–ó–≤—É–∫–æ–≤ —Ö–æ—Ä–∏–∑–æ–Ω—Ç r_s:")
    print(f"   No-Œõ: {r_s_nl:.2f} Mpc")
    print(f"   ŒõCDM: {r_s_lcdm:.2f} Mpc")
    print(f"   Ratio: {r_s_ratio:.3f} ({(r_s_ratio-1)*100:+.1f}%)")
    
    # D_A —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    D_A_ratio = D_A_drag_nl / D_A_drag_lcdm
    print(f"\n–™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ D_A(z_drag):")
    print(f"   No-Œõ: {D_A_drag_nl:.2f} Mpc")
    print(f"   ŒõCDM: {D_A_drag_lcdm:.2f} Mpc")
    print(f"   Ratio: {D_A_ratio:.3f} ({(D_A_ratio-1)*100:+.1f}%)")
    
    # Œ∏_s —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    theta_s_ratio = theta_s_nl / theta_s_lcdm
    print(f"\n–™–≥–ª–æ–≤ –º–∞—â–∞–± Œ∏_s = r_s / D_A:")
    print(f"   No-Œõ: {theta_s_nl:.6f} rad")
    print(f"   ŒõCDM: {theta_s_lcdm:.6f} rad")
    print(f"   Ratio: {theta_s_ratio:.3f} ({(theta_s_ratio-1)*100:+.1f}%)")
    
    # === –î–ò–ê–ì–ù–û–ó–ê ===
    print("\nüéØ –î–ò–ê–ì–ù–û–ó–ê:")
    print("=" * 60)
    
    if abs(error_nl) > 10:
        print(f"‚ùå No-Œõ –º–æ–¥–µ–ª—ä—Ç –∏–º–∞ {error_nl:.1f}% –≥—Ä–µ—à–∫–∞ –≤ Œ∏_s ({sigma_nl:.0f}-sigma –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)")
        
        if abs(r_s_ratio - 1) > 0.1:
            print(f"‚ö†Ô∏è  –ó–≤—É–∫–æ–≤–∏—è—Ç —Ö–æ—Ä–∏–∑–æ–Ω—Ç r_s –µ {(r_s_ratio-1)*100:+.1f}% —Ä–∞–∑–ª–∏—á–µ–Ω –æ—Ç ŒõCDM")
        
        if abs(D_A_ratio - 1) > 0.1:
            print(f"‚ö†Ô∏è  –™–≥–ª–æ–≤–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ D_A –µ {(D_A_ratio-1)*100:+.1f}% —Ä–∞–∑–ª–∏—á–Ω–æ –æ—Ç ŒõCDM")
        
        print("\nüîß –ù–ï–û–ë–•–û–î–ò–ú–ò –ö–û–†–ï–ö–¶–ò–ò:")
        if r_s_ratio < 0.9:
            print("   - –ó–≤—É–∫–æ–≤–∏—è—Ç —Ö–æ—Ä–∏–∑–æ–Ω—Ç –µ —Ç–≤—ä—Ä–¥–µ –º–∞–ª—ä–∫")
        elif r_s_ratio > 1.1:
            print("   - –ó–≤—É–∫–æ–≤–∏—è—Ç —Ö–æ—Ä–∏–∑–æ–Ω—Ç –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º")
        
        if D_A_ratio < 0.9:
            print("   - –™–≥–ª–æ–≤–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –µ —Ç–≤—ä—Ä–¥–µ –º–∞–ª–∫–æ")
        elif D_A_ratio > 1.1:
            print("   - –™–≥–ª–æ–≤–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º–æ")
        
        print("\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:")
        print("   1. –ü—Ä–µ—Ä–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ –∫–∞–ª–∏–±—Ä–∞—Ü–∏—è—Ç–∞ –Ω–∞ z_drag")
        print("   2. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞ –∑–∞ sound horizon")
        print("   3. –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ—Ç–æ –Ω–∞ epsilon_cmb")
        print("   4. –†–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ç–µ –∫–æ—Ä–µ–∫—Ü–∏–∏ –≤ –º–æ–¥–µ–ª–∞")
    
    else:
        print(f"‚úÖ –ú–æ–¥–µ–ª—ä—Ç –∏–º–∞ –ø—Ä–∏–µ–º–ª–∏–≤–∞ –≥—Ä–µ—à–∫–∞ –æ—Ç {error_nl:.1f}%")
    
    return {
        'theta_s_nl': theta_s_nl,
        'theta_s_lcdm': theta_s_lcdm,
        'theta_s_obs': theta_s_obs,
        'r_s_nl': r_s_nl,
        'r_s_lcdm': r_s_lcdm,
        'D_A_nl': D_A_drag_nl,
        'D_A_lcdm': D_A_drag_lcdm,
        'error_nl': error_nl,
        'sigma_nl': sigma_nl
    }

if __name__ == "__main__":
    results = analyze_theta_s_components()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–™–†–®–ï–ù!")
    print(f"üìä No-Œõ –≥—Ä–µ—à–∫–∞: {results['error_nl']:.1f}% ({results['sigma_nl']:.0f}-sigma)")
    print("üéØ –°–ª–µ–¥–≤–∞—â–∞ —Å—Ç—ä–ø–∫–∞: –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—è –º–æ–¥–µ–ª")
    print("=" * 60) 