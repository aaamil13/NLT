#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –≤ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—Ç–µ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–æ –∑–∞–±–∞–≤—è–Ω–µ

–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ä–∞–≤–Ω—è–≤–∞:
1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ ŒõCDM –∫–æ—Å–º–æ–ª–æ–≥–∏—è
2. –ò–∑–æ—Ç—Ä–æ–ø–Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞ –≤—Ä–µ–º–µ–≤–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—è  
3. –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞ –≤—Ä–µ–º–µ–≤–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—è

–ü–æ–∫–∞–∑–≤–∞ –∫–∞–∫ –ø–æ—Å–æ—á–Ω–æ—Ç–æ –∑–∞–±–∞–≤—è–Ω–µ –≤–ª–∏—è–µ –≤—ä—Ä—Ö—É –Ω–∞–±–ª—é–¥–∞–µ–º–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω–∏.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate
import seaborn as sns
from typing import Dict, List, Tuple
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ª–æ–∫–∞–ª–Ω–∏ –º–æ–¥—É–ª–∏
from anisotropic_nonlinear_time import AnisotropicNonlinearTimeCosmology

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—Ç–∏–ª–æ–≤–µ—Ç–µ  
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∏–∑–∏—á–Ω–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
c = 299792458  # –º/—Å


class StandardCosmology:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ ŒõCDM –∫–æ—Å–º–æ–ª–æ–≥–∏—è –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    
    def __init__(self, H0=67.4, Omega_m=0.315, Omega_Lambda=0.685):
        self.H0 = H0
        self.Omega_m = Omega_m
        self.Omega_Lambda = Omega_Lambda
        
    def hubble_function(self, z):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏—è"""
        z = np.asarray(z)
        return self.H0 * np.sqrt(self.Omega_m * (1 + z)**3 + self.Omega_Lambda)
        
    def angular_diameter_distance(self, z):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —ä–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ"""
        z = np.asarray(z)
        
        def integrand(z_val):
            return c / (self.hubble_function(z_val) * 1000)
            
        D_A = np.zeros_like(z)
        for i, z_val in enumerate(z.flat):
            if z_val > 0:
                integral, _ = integrate.quad(integrand, 0, z_val)
                D_A.flat[i] = integral / (1 + z_val)
            else:
                D_A.flat[i] = 0
                
        return D_A.reshape(z.shape)


class IsotropicNonlinearTime:
    """–ò–∑–æ—Ç—Ä–æ–ø–Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞ –≤—Ä–µ–º–µ–≤–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—è"""
    
    def __init__(self, H0=67.4, Omega_m=0.315, Omega_Lambda=0.685,
                 alpha=1.5, beta=0.0, gamma=0.5, delta=0.1):
        self.H0 = H0
        self.Omega_m = Omega_m
        self.Omega_Lambda = Omega_Lambda
        self.alpha = alpha
        self.beta = beta
        self.gamma = gamma
        self.delta = delta
        
    def time_delay(self, z):
        """–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ –≤—Ä–µ–º–µ–≤–æ –∑–∞–±–∞–≤—è–Ω–µ"""
        z = np.asarray(z)
        one_plus_z = 1 + z
        z_safe = np.maximum(z, 1e-10)
        
        return (self.alpha * z_safe**self.beta * 
                np.exp(-self.gamma * z_safe) / one_plus_z + 
                self.delta * np.log(one_plus_z))
    
    def hubble_function(self, z):
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏—è"""
        z = np.asarray(z)
        E_z = np.sqrt(self.Omega_m * (1 + z)**3 + self.Omega_Lambda)
        t_z = self.time_delay(z)
        
        return self.H0 * E_z * (1 + self.alpha * t_z)
    
    def angular_diameter_distance(self, z):
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–æ —ä–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ"""
        z = np.asarray(z)
        
        def integrand(z_val):
            return c / (self.hubble_function(z_val) * 1000)
            
        D_A = np.zeros_like(z)
        for i, z_val in enumerate(z.flat):
            if z_val > 0:
                integral, _ = integrate.quad(integrand, 0, z_val)
                D_A.flat[i] = integral / (1 + z_val)
            else:
                D_A.flat[i] = 0
                
        return D_A.reshape(z.shape)


def analyze_anisotropic_effects():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏ –≤—ä—Ä—Ö—É –∫–æ—Å–º–æ–ª–æ–≥–∏—è—Ç–∞"""
    
    print("üî¨ –ê–ù–ê–õ–ò–ó –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò–¢–ï –ï–§–ï–ö–¢–ò")
    print("=" * 60)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª–∏
    lambda_cdm = StandardCosmology()
    isotropic_nl = IsotropicNonlinearTime()
    
    # –†–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è
    anisotropy_levels = [
        (0.0, 0.0, 0.0, "–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ"),
        (0.02, 0.01, 0.005, "–°–ª–∞–±–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è"),
        (0.05, 0.03, 0.02, "–£–º–µ—Ä–µ–Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è"),
        (0.1, 0.06, 0.04, "–°–∏–ª–Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è")
    ]
    
    # –ß–µ—Ä–≤–µ–Ω–∏ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–∏—è –∑–∞ –∞–Ω–∞–ª–∏–∑
    z_range = np.logspace(-2, 0.5, 50)  # z –æ—Ç 0.01 –¥–æ ~3.16
    
    # –¢–µ—Å—Ç–æ–≤–∏ –ø–æ—Å–æ–∫–∏
    directions = [
        (0, 0, "–ü–æ–ª—è—Ä–Ω–∞ (z-–æ—Å)"),
        (np.pi/2, 0, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞ (x-–æ—Å)"),
        (np.pi/2, np.pi/2, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞ (y-–æ—Å)"),
        (np.pi/4, np.pi/4, "–î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞")
    ]
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è
    print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ê –†–ê–ó–õ–ò–ß–ù–ò –°–¢–ï–ü–ï–ù–ò –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ò–Ø:")
    print("-" * 50)
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('–ï—Ñ–µ–∫—Ç–∏ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–æ—Ç–æ –∑–∞–±–∞–≤—è–Ω–µ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ—Ç–æ', fontsize=16)
    
    # Subplot 1: –•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏—è
    ax1 = axes[0, 0]
    ax1.set_title('–•—ä–±—ä–ª –ø–∞—Ä–∞–º–µ—Ç—ä—Ä H(z)')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ –º–æ–¥–µ–ª–∏
    H_lcdm = lambda_cdm.hubble_function(z_range)
    H_iso = isotropic_nl.hubble_function(z_range)
    
    ax1.plot(z_range, H_lcdm, '--', label='ŒõCDM —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω', linewidth=2, color='black')
    ax1.plot(z_range, H_iso, '-', label='–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ –ù–í', linewidth=2, color='blue')
    
    colors = ['green', 'orange', 'red', 'purple']
    
    for i, (eps_x, eps_y, eps_z, label) in enumerate(anisotropy_levels[1:]):
        aniso_cosmo = AnisotropicNonlinearTimeCosmology(
            epsilon_x=eps_x, epsilon_y=eps_y, epsilon_z=eps_z,
            tau_x=eps_x*0.8, tau_y=eps_y*0.8, tau_z=eps_z*0.8
        )
        
        # –°—Ä–µ–¥–Ω–æ –ø–æ –ø–æ—Å–æ–∫–∏
        H_avg = np.zeros_like(z_range)
        for theta, phi, _ in directions:
            H_dir = aniso_cosmo.anisotropic_hubble_function(z_range, theta, phi)
            H_avg += H_dir
        H_avg /= len(directions)
        
        ax1.plot(z_range, H_avg, '-', label=f'{label}', 
                linewidth=2, color=colors[i])
    
    ax1.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax1.set_ylabel('H(z) [km/s/Mpc]')
    ax1.set_xscale('log')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Subplot 2: –™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
    ax2 = axes[0, 1]
    ax2.set_title('–™–≥–ª–æ–≤–æ –¥–∏–∞–º–µ—Ç—Ä–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ')
    
    D_A_lcdm = lambda_cdm.angular_diameter_distance(z_range)
    D_A_iso = isotropic_nl.angular_diameter_distance(z_range)
    
    ax2.plot(z_range, D_A_lcdm, '--', label='ŒõCDM —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω', linewidth=2, color='black')
    ax2.plot(z_range, D_A_iso, '-', label='–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ –ù–í', linewidth=2, color='blue')
    
    for i, (eps_x, eps_y, eps_z, label) in enumerate(anisotropy_levels[1:]):
        aniso_cosmo = AnisotropicNonlinearTimeCosmology(
            epsilon_x=eps_x, epsilon_y=eps_y, epsilon_z=eps_z,
            tau_x=eps_x*0.8, tau_y=eps_y*0.8, tau_z=eps_z*0.8
        )
        
        # –°—Ä–µ–¥–Ω–æ –ø–æ –ø–æ—Å–æ–∫–∏
        D_A_avg = np.zeros_like(z_range)
        for theta, phi, _ in directions:
            D_A_dir = aniso_cosmo.anisotropic_angular_diameter_distance(z_range, theta, phi)
            D_A_avg += D_A_dir
        D_A_avg /= len(directions)
        
        ax2.plot(z_range, D_A_avg, '-', label=f'{label}', 
                linewidth=2, color=colors[i])
    
    ax2.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax2.set_ylabel('D_A(z) [Mpc]')
    ax2.set_xscale('log')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # Subplot 3: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç ŒõCDM
    ax3 = axes[1, 0]
    ax3.set_title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç ŒõCDM')
    
    for i, (eps_x, eps_y, eps_z, label) in enumerate(anisotropy_levels[1:]):
        aniso_cosmo = AnisotropicNonlinearTimeCosmology(
            epsilon_x=eps_x, epsilon_y=eps_y, epsilon_z=eps_z,
            tau_x=eps_x*0.8, tau_y=eps_y*0.8, tau_z=eps_z*0.8
        )
        
        # –°—Ä–µ–¥–Ω–æ –ø–æ –ø–æ—Å–æ–∫–∏
        H_avg = np.zeros_like(z_range)
        for theta, phi, _ in directions:
            H_dir = aniso_cosmo.anisotropic_hubble_function(z_range, theta, phi)
            H_avg += H_dir
        H_avg /= len(directions)
        
        deviation = (H_avg - H_lcdm) / H_lcdm * 100
        ax3.plot(z_range, deviation, '-', label=f'{label}', 
                linewidth=2, color=colors[i])
    
    ax3.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax3.set_ylabel('Œîh/H_ŒõCDM [%]')
    ax3.set_xscale('log')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    ax3.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    # Subplot 4: –ü–æ—Å–æ—á–Ω–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
    ax4 = axes[1, 1]
    ax4.set_title('–ü–æ—Å–æ—á–Ω–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ (—É–º–µ—Ä–µ–Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è)')
    
    aniso_cosmo = AnisotropicNonlinearTimeCosmology(
        epsilon_x=0.05, epsilon_y=0.03, epsilon_z=0.02,
        tau_x=0.04, tau_y=0.024, tau_z=0.016
    )
    
    colors_dir = ['red', 'green', 'blue', 'orange']
    
    for i, (theta, phi, dir_name) in enumerate(directions):
        H_dir = aniso_cosmo.anisotropic_hubble_function(z_range, theta, phi)
        ax4.plot(z_range, H_dir, '-', label=f'{dir_name}', 
                linewidth=2, color=colors_dir[i])
    
    ax4.plot(z_range, H_lcdm, '--', label='ŒõCDM –µ—Ç–∞–ª–æ–Ω', linewidth=2, color='black')
    ax4.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax4.set_ylabel('H(z) [km/s/Mpc]')
    ax4.set_xscale('log')
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('anisotropic_effects_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    print("\nüìà –ö–û–õ–ò–ß–ï–°–¢–í–ï–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print("-" * 40)
    
    z_test = np.array([0.1, 0.5, 1.0, 2.0])
    
    print(f"{'z':<8} {'ŒõCDM':<12} {'–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ':<12} {'–ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–æ':<12} {'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ':<12}")
    print("-" * 60)
    
    H_lcdm_test = lambda_cdm.hubble_function(z_test)
    H_iso_test = isotropic_nl.hubble_function(z_test)
    
    aniso_cosmo = AnisotropicNonlinearTimeCosmology(
        epsilon_x=0.05, epsilon_y=0.03, epsilon_z=0.02,
        tau_x=0.04, tau_y=0.024, tau_z=0.016
    )
    
    # –°—Ä–µ–¥–Ω–æ –ø–æ –ø–æ—Å–æ–∫–∏ –∑–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—è –º–æ–¥–µ–ª
    H_aniso_test = np.zeros_like(z_test)
    for theta, phi, _ in directions:
        H_dir = aniso_cosmo.anisotropic_hubble_function(z_test, theta, phi)
        H_aniso_test += H_dir
    H_aniso_test /= len(directions)
    
    for i, z in enumerate(z_test):
        deviation = (H_aniso_test[i] - H_lcdm_test[i]) / H_lcdm_test[i] * 100
        print(f"{z:<8.1f} {H_lcdm_test[i]:<12.1f} {H_iso_test[i]:<12.1f} {H_aniso_test[i]:<12.1f} {deviation:<12.1f}%")
    
    return aniso_cosmo


def analyze_directional_variations():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø–æ—Å–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏"""
    
    print("\nüß≠ –ê–ù–ê–õ–ò–ó –ù–ê –ü–û–°–û–ß–ù–ò–¢–ï –í–ê–†–ò–ê–¶–ò–ò")
    print("=" * 60)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–∏–ª–Ω–æ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω –º–æ–¥–µ–ª
    aniso_cosmo = AnisotropicNonlinearTimeCosmology(
        epsilon_x=0.1, epsilon_y=0.06, epsilon_z=0.04,
        tau_x=0.08, tau_y=0.048, tau_z=0.032,
        theta_preference=np.pi/3, phi_preference=np.pi/4,
        angular_strength=0.8
    )
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞ –æ—Ç –ø–æ—Å–æ–∫–∏
    n_theta = 20
    n_phi = 40
    
    theta_grid = np.linspace(0, np.pi, n_theta)
    phi_grid = np.linspace(0, 2*np.pi, n_phi)
    
    # –¢–µ—Å—Ç–æ–≤–æ —á–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ
    z_test = 1.0
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ H(z) –∑–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Å–æ–∫–∏
    H_map = np.zeros((n_theta, n_phi))
    
    for i, theta in enumerate(theta_grid):
        for j, phi in enumerate(phi_grid):
            H_map[i, j] = aniso_cosmo.anisotropic_hubble_function(z_test, theta, phi)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–µ–±–µ—Å–Ω–∞ –∫–∞—Ä—Ç–∞
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
    
    # Subplot 1: –ù–µ–±–µ—Å–Ω–∞ –∫–∞—Ä—Ç–∞ –≤ –ø–æ–ª—è—Ä–Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    ax1 = axes[0]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    THETA, PHI = np.meshgrid(theta_grid, phi_grid)
    X = np.sin(THETA) * np.cos(PHI)
    Y = np.sin(THETA) * np.sin(PHI)
    
    im1 = ax1.contourf(PHI, THETA, H_map.T, levels=50, cmap='RdYlBu_r')
    ax1.set_xlabel('–ê–∑–∏–º—É—Ç–µ–Ω —ä–≥—ä–ª œÜ [—Ä–∞–¥–∏–∞–Ω–∏]')
    ax1.set_ylabel('–ü–æ–ª—è—Ä–µ–Ω —ä–≥—ä–ª Œ∏ [—Ä–∞–¥–∏–∞–Ω–∏]')
    ax1.set_title(f'–ù–µ–±–µ—Å–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞ H(z={z_test})')
    
    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ü–≤–µ—Ç–æ–≤–∞ —Å–∫–∞–ª–∞
    cbar1 = plt.colorbar(im1, ax=ax1)
    cbar1.set_label('H(z) [km/s/Mpc]')
    
    # Subplot 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏—Ç–µ
    ax2 = axes[1]
    
    H_flat = H_map.flatten()
    H_mean = np.mean(H_flat)
    H_std = np.std(H_flat)
    
    ax2.hist(H_flat, bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    ax2.axvline(H_mean, color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω–æ: {H_mean:.1f}')
    ax2.axvline(H_mean + H_std, color='orange', linestyle='--', linewidth=2, label=f'+1œÉ: {H_mean+H_std:.1f}')
    ax2.axvline(H_mean - H_std, color='orange', linestyle='--', linewidth=2, label=f'-1œÉ: {H_mean-H_std:.1f}')
    
    ax2.set_xlabel('H(z) [km/s/Mpc]')
    ax2.set_ylabel('–ß–µ—Å—Ç–æ—Ç–∞')
    ax2.set_title('–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ H(z) –ø–æ –ø–æ—Å–æ–∫–∏')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('directional_variations_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ù–ê –ü–û–°–û–ß–ù–ò–¢–ï –í–ê–†–ò–ê–¶–ò–ò:")
    print("-" * 40)
    print(f"–°—Ä–µ–¥–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: {H_mean:.3f} km/s/Mpc")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {H_std:.3f} km/s/Mpc")
    print(f"–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è: {H_std/H_mean*100:.2f}%")
    print(f"–ú–∏–Ω–∏–º–∞–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: {np.min(H_flat):.3f} km/s/Mpc")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: {np.max(H_flat):.3f} km/s/Mpc")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {np.max(H_flat) - np.min(H_flat):.3f} km/s/Mpc")
    
    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–æ–∫–∞
    diagnostics = aniso_cosmo.anisotropy_diagnostics()
    print(f"\n–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–æ–∫–∞: Œ∏={diagnostics['theta_pref_deg']:.1f}¬∞, œÜ={diagnostics['phi_pref_deg']:.1f}¬∞")
    
    return H_map, theta_grid, phi_grid


def compare_observational_effects():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏"""
    
    print("\nüî≠ –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê –ù–ê–ë–õ–Æ–î–ê–ï–ú–ò–¢–ï –ï–§–ï–ö–¢–ò")
    print("=" * 60)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    lambda_cdm = StandardCosmology()
    aniso_cosmo = AnisotropicNonlinearTimeCosmology(
        epsilon_x=0.05, epsilon_y=0.03, epsilon_z=0.02,
        tau_x=0.04, tau_y=0.024, tau_z=0.016
    )
    
    # –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏
    z_obs = np.array([0.1, 0.2, 0.3, 0.5, 0.7, 1.0, 1.5, 2.0])
    
    # –†–∞–∑–ª–∏—á–Ω–∏ –ø–æ—Å–æ–∫–∏ –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    directions = [
        (0, 0, "–ü–æ–ª—è—Ä–Ω–∞"),
        (np.pi/2, 0, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞-X"),
        (np.pi/2, np.pi/2, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞-Y"),
        (np.pi/4, np.pi/4, "–î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞")
    ]
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('–ù–∞–±–ª—é–¥–∞–µ–º–∏ –µ—Ñ–µ–∫—Ç–∏ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–æ—Ç–æ –∑–∞–±–∞–≤—è–Ω–µ', fontsize=16)
    
    # Subplot 1: –•—ä–±—ä–ª –¥–∏–∞–≥—Ä–∞–º–∞
    ax1 = axes[0, 0]
    ax1.set_title('–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –•—ä–±—ä–ª –¥–∏–∞–≥—Ä–∞–º–∞')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ ŒõCDM
    H_lcdm = lambda_cdm.hubble_function(z_obs)
    ax1.plot(z_obs, H_lcdm, 'k--', linewidth=3, label='ŒõCDM —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω')
    
    # –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    colors = ['red', 'green', 'blue', 'orange']
    
    for i, (theta, phi, dir_name) in enumerate(directions):
        H_aniso = aniso_cosmo.anisotropic_hubble_function(z_obs, theta, phi)
        ax1.plot(z_obs, H_aniso, 'o-', color=colors[i], linewidth=2, 
                label=f'{dir_name} –ø–æ—Å–æ–∫–∞')
    
    ax1.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax1.set_ylabel('H(z) [km/s/Mpc]')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Subplot 2: –™–≥–ª–æ–≤–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
    ax2 = axes[0, 1]
    ax2.set_title('–™–≥–ª–æ–≤–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ ŒõCDM
    D_A_lcdm = lambda_cdm.angular_diameter_distance(z_obs)
    ax2.plot(z_obs, D_A_lcdm, 'k--', linewidth=3, label='ŒõCDM —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω')
    
    # –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    for i, (theta, phi, dir_name) in enumerate(directions):
        D_A_aniso = aniso_cosmo.anisotropic_angular_diameter_distance(z_obs, theta, phi)
        ax2.plot(z_obs, D_A_aniso, 'o-', color=colors[i], linewidth=2, 
                label=f'{dir_name} –ø–æ—Å–æ–∫–∞')
    
    ax2.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax2.set_ylabel('D_A(z) [Mpc]')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # Subplot 3: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    ax3 = axes[1, 0]
    ax3.set_title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç ŒõCDM')
    
    for i, (theta, phi, dir_name) in enumerate(directions):
        H_aniso = aniso_cosmo.anisotropic_hubble_function(z_obs, theta, phi)
        deviation = (H_aniso - H_lcdm) / H_lcdm * 100
        ax3.plot(z_obs, deviation, 'o-', color=colors[i], linewidth=2, 
                label=f'{dir_name} –ø–æ—Å–æ–∫–∞')
    
    ax3.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax3.set_ylabel('Œî–Ω/H_ŒõCDM [%]')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    ax3.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    # Subplot 4: –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏
    ax4 = axes[1, 1]
    ax4.set_title('–ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏')
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –¥–∏—Å–ø–µ—Ä—Å–∏—è—Ç–∞ –ø–æ –ø–æ—Å–æ–∫–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ z
    z_fine = np.linspace(0.1, 2.0, 20)
    variances = []
    
    for z_val in z_fine:
        H_values = []
        for theta, phi, _ in directions:
            H_dir = aniso_cosmo.anisotropic_hubble_function(z_val, theta, phi)
            H_values.append(H_dir)
        
        variance = np.var(H_values) / np.mean(H_values)**2 * 100  # CV –≤ %
        variances.append(variance)
    
    ax4.plot(z_fine, variances, 'ro-', linewidth=2, markersize=6)
    ax4.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax4.set_ylabel('–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è [%]')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('observational_effects_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏—è
    print("\nüìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    print("-" * 20)
    
    max_deviation = 0
    for i, (theta, phi, dir_name) in enumerate(directions):
        H_aniso = aniso_cosmo.anisotropic_hubble_function(z_obs, theta, phi)
        deviation = np.max(np.abs((H_aniso - H_lcdm) / H_lcdm * 100))
        
        print(f"{dir_name:<20}: –ú–∞–∫—Å–∏–º–∞–ª–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {deviation:.2f}%")
        max_deviation = max(max_deviation, deviation)
    
    print(f"\n–û–±—â–æ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max_deviation:.2f}%")
    
    # –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostics = aniso_cosmo.anisotropy_diagnostics()
    print(f"–û–±—â–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ —Å–∏–ª–∞: {diagnostics['total_anisotropy']:.3f}")
    print(f"–û–±—â–æ –≤—Ä–µ–º–µ–≤–æ –∑–∞–±–∞–≤—è–Ω–µ: {diagnostics['total_delay']:.3f}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∞–Ω–∞–ª–∏–∑"""
    
    print("üåå –ê–ù–ê–õ–ò–ó –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–û–¢–û –ó–ê–ë–ê–í–Ø–ù–ï –ù–ê –†–ê–ó–®–ò–†–ï–ù–ò–ï–¢–û")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
    try:
        aniso_cosmo = analyze_anisotropic_effects()
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∏—è—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∏—è –∞–Ω–∞–ª–∏–∑: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø–æ—Å–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    try:
        H_map, theta_grid, phi_grid = analyze_directional_variations()
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –Ω–∞ –ø–æ—Å–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø–æ—Å–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏: {e}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏
    try:
        compare_observational_effects()
        print("\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ–º–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏: {e}")
    
    print("\nüéØ –†–ï–ó–Æ–ú–ï:")
    print("-" * 15)
    print("–ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–æ—Ç–æ –∑–∞–±–∞–≤—è–Ω–µ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ—Ç–æ –≤–æ–¥–∏ –¥–æ:")
    print("1. –ü–æ—Å–æ—á–Ω–æ –∑–∞–≤–∏—Å–∏–º–∏ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    print("2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∏ –Ω–∞–±–ª—é–¥–∞–µ–º–∏ –≤–µ–ª–∏—á–∏–Ω–∏")
    print("3. –ù–æ–≤–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print("4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–∏ –æ–±—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—Ç–µ –∞–Ω–æ–º–∞–ª–∏–∏")
    

if __name__ == "__main__":
    main() 