#!/usr/bin/env python3
"""
–ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ angular_diameter_distance –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ
–¶–µ–ª: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ü–∏—Ä–∞–Ω–µ –∏ –∫–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏—Ç–µ —Å –µ–¥–∏–Ω–∏—Ü–∏ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
"""

import numpy as np
from scipy import integrate
import logging
from no_lambda_cosmology import NoLambdaCosmology

# –§–∏–∑–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
c = 299792458  # –º/—Å

def debug_angular_diameter_calculation():
    """–î–µ—Ç–∞–π–ª–Ω–æ –¥–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ D_A –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ"""
    
    print("üîç –î–ï–ë–™–ì–í–ê–ù–ï –ù–ê ANGULAR DIAMETER DISTANCE")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    H0 = 73.23
    Omega_m = 0.3046
    
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: H‚ÇÄ={H0}, Œ©‚Çò={Omega_m}")
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(H0=H0, Omega_m=Omega_m)
    
    # –¢–µ—Å—Ç–æ–≤–∏ z —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    z_test_values = [1076.8, 1090.0, 100.0, 1.0, 0.1]
    
    print("\nüß™ –¢–ï–°–¢ –ù–ê –†–ê–ó–õ–ò–ß–ù–ò Z –°–¢–û–ô–ù–û–°–¢–ò:")
    print("-" * 60)
    print(f"{'|z':<10} {'D_A (—Ç–µ–∫—É—â–∞)':<15} {'D_A (–æ—á–∞–∫–≤–∞–Ω–∞)':<15} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 60)
    
    for z in z_test_values:
        # –¢–µ–∫—É—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        D_A_current = cosmo.angular_diameter_distance(z)
        
        # –û—á–∞–∫–≤–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞)
        if z > 1000:
            D_A_expected = 14000  # Mpc –∑–∞ –≤–∏—Å–æ–∫–æ z
        elif z > 10:
            D_A_expected = 1000 + z * 10  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ –∑–∞ —Å—Ä–µ–¥–Ω–æ z
        else:
            D_A_expected = z * 1000  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ –∑–∞ –Ω–∏—Å–∫–æ z
        
        # –°—Ç–∞—Ç—É—Å
        ratio = D_A_current / D_A_expected
        if 0.5 < ratio < 2.0:
            status = "‚úÖ OK"
        else:
            status = "‚ùå –ì–†–ï–®–ö–ê"
        
        print(f"{z:<10.1f} {D_A_current:<15.2f} {D_A_expected:<15.2f} {status:<10}")
    
    # –î–µ—Ç–∞–π–ª–Ω–æ –¥–µ–±—ä–≥–≤–∞–Ω–µ –∑–∞ z_drag
    print("\nüîç –î–ï–¢–ê–ô–õ–ù–û –î–ï–ë–™–ì–í–ê–ù–ï –ó–ê z_drag:")
    print("-" * 60)
    
    z_drag = cosmo.z_drag
    print(f"z_drag = {z_drag:.1f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –ù–ê –ò–ù–¢–ï–ì–†–ê–õ–ê:")
    
    def integrand_test(z_val):
        H_z = cosmo.hubble_function(z_val)  # –∫–º/—Å/Mpc
        return (c / 1000) / H_z  # km -> Mpc
    
    # –¢–µ—Å—Ç –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞–ª
    try:
        comoving_distance, _ = integrate.quad(integrand_test, 0, z_drag, 
                                            epsabs=1e-10, epsrel=1e-8)
        print(f"Comoving distance: {comoving_distance:.2f} Mpc")
        
        # –ö–æ—Ä–µ–∫—Ü–∏—è –∑–∞ –∫—Ä–∏–≤–∏–Ω–∞
        if abs(cosmo.Omega_k) > 1e-6:
            sqrt_Ok = np.sqrt(abs(cosmo.Omega_k))
            DH = (c / 1000) / cosmo.H0  # Hubble distance –≤ Mpc
            
            print(f"Omega_k = {cosmo.Omega_k:.4f}")
            print(f"sqrt(|Omega_k|) = {sqrt_Ok:.4f}")
            print(f"DH = {DH:.2f} Mpc")
            
            if cosmo.Omega_k > 0:  # –û—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞
                transverse_distance = DH / sqrt_Ok * np.sinh(sqrt_Ok * comoving_distance / DH)
                print(f"–û—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞: transverse_distance = {transverse_distance:.2f} Mpc")
            else:  # –ó–∞—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞
                transverse_distance = DH / sqrt_Ok * np.sin(sqrt_Ok * comoving_distance / DH)
                print(f"–ó–∞—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞: transverse_distance = {transverse_distance:.2f} Mpc")
        else:
            transverse_distance = comoving_distance
            print(f"–ü–ª–æ—Å–∫–∞ –í—Å–µ–ª–µ–Ω–∞: transverse_distance = {transverse_distance:.2f} Mpc")
        
        # –™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
        D_A_computed = transverse_distance / (1 + z_drag)
        print(f"D_A = transverse_distance / (1 + z) = {D_A_computed:.2f} Mpc")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
        D_A_function = cosmo.angular_diameter_distance(z_drag)
        print(f"D_A (—Ñ—É–Ω–∫—Ü–∏—è) = {D_A_function:.2f} Mpc")
        
        print(f"–†–∞–∑–ª–∏–∫–∞: {abs(D_A_computed - D_A_function):.2f} Mpc")
        
    except Exception as e:
        print(f"–ì—Ä–µ—à–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞: {e}")
    
    return cosmo, z_drag

def create_corrected_angular_diameter_distance():
    """–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ–ø—Ä–∞–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ angular diameter distance"""
    
    print("\nüîß –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –ü–û–ü–†–ê–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø")
    print("=" * 60)
    
    def corrected_angular_diameter_distance(cosmo, z, theta=0, phi=0):
        """–ü–æ–ø—Ä–∞–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ angular diameter distance"""
        z = np.asarray(z)
        
        def integrand(z_val):
            H_z = cosmo.hubble_function(z_val, theta, phi)  # –∫–º/—Å/Mpc
            return (c / 1000) / H_z  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –≤ Mpc
        
        D_A = np.zeros_like(z)
        
        for i, z_val in enumerate(z.flat):
            if z_val > 0:
                try:
                    # –ö–æ–º–æ—Ä–±–∏–¥–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
                    comoving_distance, _ = integrate.quad(integrand, 0, z_val,
                                                         epsabs=1e-10, epsrel=1e-8)
                    
                    # –ö–æ—Ä–µ–∫—Ü–∏—è –∑–∞ –∫—Ä–∏–≤–∏–Ω–∞
                    if abs(cosmo.Omega_k) > 1e-6:
                        sqrt_Ok = np.sqrt(abs(cosmo.Omega_k))
                        DH = (c / 1000) / cosmo.H0  # Hubble distance –≤ Mpc
                        
                        if cosmo.Omega_k > 0:  # –û—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞
                            transverse_distance = DH / sqrt_Ok * np.sinh(sqrt_Ok * comoving_distance / DH)
                        else:  # –ó–∞—Ç–≤–æ—Ä–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–∞
                            transverse_distance = DH / sqrt_Ok * np.sin(sqrt_Ok * comoving_distance / DH)
                    else:
                        transverse_distance = comoving_distance
                    
                    # –™–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
                    D_A.flat[i] = transverse_distance / (1 + z_val)
                    
                except Exception as e:
                    print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ z={z_val}: {e}")
                    # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                    D_A.flat[i] = (c / 1000) * z_val / (cosmo.H0 * (1 + z_val))
            else:
                D_A.flat[i] = 0
        
        return D_A.reshape(z.shape)
    
    # –¢–µ—Å—Ç –Ω–∞ –ø–æ–ø—Ä–∞–≤–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    print("\nüß™ –¢–ï–°–¢ –ù–ê –ü–û–ü–†–ê–í–ï–ù–ê–¢–ê –§–£–ù–ö–¶–ò–Ø:")
    print("-" * 40)
    
    cosmo = NoLambdaCosmology(H0=73.23, Omega_m=0.3046)
    z_test = [1076.8, 1090.0, 100.0, 1.0]
    
    print(f"{'|z':<10} {'–û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞':<15} {'–ü–æ–ø—Ä–∞–≤–µ–Ω–∞':<15} {'–†–∞–∑–ª–∏–∫–∞':<15}")
    print("-" * 55)
    
    for z in z_test:
        D_A_original = cosmo.angular_diameter_distance(z)
        D_A_corrected = corrected_angular_diameter_distance(cosmo, z)
        difference = abs(D_A_original - D_A_corrected)
        
        print(f"{z:<10.1f} {D_A_original:<15.2f} {D_A_corrected:<15.2f} {difference:<15.2f}")
    
    return corrected_angular_diameter_distance

def test_theta_s_with_correction():
    """–¢–µ—Å—Ç –Ω–∞ Œ∏_s —Å –ø–æ–ø—Ä–∞–≤–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("\nüéØ –¢–ï–°–¢ –ù–ê Œ∏_s –° –ü–û–ü–†–ê–í–ö–ê–¢–ê")
    print("=" * 60)
    
    cosmo = NoLambdaCosmology(H0=73.23, Omega_m=0.3046)
    
    # –ó–≤—É–∫–æ–≤ —Ö–æ—Ä–∏–∑–æ–Ω—Ç
    r_s = cosmo.sound_horizon_scale(z_end=cosmo.z_drag)
    print(f"r_s = {r_s:.2f} Mpc")
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ D_A
    D_A_original = cosmo.angular_diameter_distance(cosmo.z_drag)
    theta_s_original = r_s / D_A_original
    
    print(f"\n–û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:")
    print(f"  D_A(z_drag) = {D_A_original:.2f} Mpc")
    print(f"  Œ∏_s = {theta_s_original:.6f} rad")
    
    # –ü–æ–ø—Ä–∞–≤–µ–Ω–∞ D_A
    corrected_func = create_corrected_angular_diameter_distance()
    D_A_corrected = corrected_func(cosmo, cosmo.z_drag)
    theta_s_corrected = r_s / D_A_corrected
    
    print(f"\n–ü–æ–ø—Ä–∞–≤–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:")
    print(f"  D_A(z_drag) = {D_A_corrected:.2f} Mpc")
    print(f"  Œ∏_s = {theta_s_corrected:.6f} rad")
    
    # –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    theta_s_obs = 0.010409
    error_original = abs(theta_s_original - theta_s_obs) / theta_s_obs * 100
    error_corrected = abs(theta_s_corrected - theta_s_obs) / theta_s_obs * 100
    
    print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç:")
    print(f"  Œ∏_s –Ω–∞–±–ª—é–¥–∞–≤–∞–Ω–æ = {theta_s_obs:.6f} rad")
    print(f"  –ì—Ä–µ—à–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª) = {error_original:.1f}%")
    print(f"  –ì—Ä–µ—à–∫–∞ (–ø–æ–ø—Ä–∞–≤–µ–Ω–æ) = {error_corrected:.1f}%")
    print(f"  –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ = {error_original - error_corrected:.1f}%")
    
    return {
        'r_s': r_s,
        'D_A_original': D_A_original,
        'D_A_corrected': D_A_corrected,
        'theta_s_original': theta_s_original,
        'theta_s_corrected': theta_s_corrected,
        'error_original': error_original,
        'error_corrected': error_corrected
    }

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–µ–Ω –∞–Ω–∞–ª–∏–∑
    cosmo, z_drag = debug_angular_diameter_calculation()
    
    # –¢–µ—Å—Ç –Ω–∞ –ø–æ–ø—Ä–∞–≤–∫–∞—Ç–∞  
    results = test_theta_s_with_correction()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–™–†–®–ï–ù!")
    print(f"üéØ –ö–ª—é—á–æ–≤ —Ä–µ–∑—É–ª—Ç–∞—Ç: D_A —Ç—Ä—è–±–≤–∞ –¥–∞ –µ ~{14000:.0f} Mpc, –Ω–µ {results['D_A_original']:.0f} Mpc")
    print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ angular_diameter_distance —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞")
    print("=" * 60) 