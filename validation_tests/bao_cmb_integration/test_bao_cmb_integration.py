#!/usr/bin/env python3
"""
–û–±–æ–±—â–µ–Ω —Ç–µ—Å—Ç –∑–∞ BAO –∏ CMB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞

–¢–æ–∑–∏ —Ñ–∞–π–ª —Ç–µ—Å—Ç–≤–∞ —Ü—è–ª–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ —Å BAO –∏ CMB –¥–∞–Ω–Ω–∏.
"""

import numpy as np
import sys
import os

# –î–æ–±–∞–≤—è–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ä–º –ø—ä—Ç—è
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def main():
    print("üöÄ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê BAO –ò CMB –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–ê –°–ò–°–¢–ï–ú–ê")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∏ –º–æ–¥—É–ª–∏
        print("\nüì¶ –¢–ï–°–¢ 1: –û–°–ù–û–í–ù–ò –ú–û–î–£–õ–ò")
        print("-" * 40)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è –º–æ–¥—É–ª
        from common_utils.nonlinear_time_core import NonlinearTimeCosmology, test_nonlinear_time_cosmology
        print("‚úÖ –ù–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ –º–æ–¥—É–ª –∑–∞—Ä–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è –º–æ–¥—É–ª
        test_nonlinear_time_cosmology()
        
        # –¢–µ—Å—Ç 2: –ö–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        print("\nüìä –¢–ï–°–¢ 2: –ö–û–°–ú–û–õ–û–ì–ò–ß–ù–ò –ü–ê–†–ê–ú–ï–¢–†–ò")
        print("-" * 40)
        
        from common_utils.cosmological_parameters import print_data_summary
        print_data_summary()
        
        # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏
        print("\nüîß –¢–ï–°–¢ 3: –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –î–ê–ù–ù–ò")
        print("-" * 40)
        
        from common_utils.data_processing import test_data_processing
        test_data_processing()
        
        # –¢–µ—Å—Ç 4: BAO –∞–Ω–∞–ª–∏–∑
        print("\nüåê –¢–ï–°–¢ 4: BAO –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        from bao_analysis.bao_analyzer import BAOAnalyzer
        bao_analyzer = BAOAnalyzer()
        
        # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
        bao_analyzer.load_real_data('combined')
        print(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(bao_analyzer.processed_data['z'])} BAO —Ç–æ—á–∫–∏")
        
        # –û—Å–Ω–æ–≤–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = bao_analyzer.compare_with_observations()
        print(f"‚úÖ BAO œá¬≤/dof = {comparison['statistics']['reduced_chi_squared']:.2f}")
        print(f"‚úÖ –ù–∏–≤–æ –Ω–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {comparison['agreement_level']}")
        
        # –¢–µ—Å—Ç 5: CMB –∞–Ω–∞–ª–∏–∑
        print("\nüå† –¢–ï–°–¢ 5: CMB –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        from cmb_analysis.cmb_analyzer import CMBAnalyzer
        cmb_analyzer = CMBAnalyzer()
        
        # –™–≥–ª–æ–≤ —Ä–∞–∑–º–µ—Ä –Ω–∞ –∑–≤—É–∫–æ–≤–∏—è —Ö–æ—Ä–∏–∑–æ–Ω—Ç
        theta_star = cmb_analyzer.calculate_angular_sound_horizon()
        print(f"‚úÖ Œ∏* = {theta_star:.7f} rad")
        
        # –ê–∫—É—Å—Ç–∏—á–Ω–∏ –ø–∏–∫–æ–≤–µ
        peaks = cmb_analyzer.calculate_acoustic_peak_positions()
        print(f"‚úÖ –ü—ä—Ä–≤–∏ –ø–∏–∫: l = {peaks[0]:.1f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Planck
        cmb_comparison = cmb_analyzer.compare_with_planck_data()
        print(f"‚úÖ CMB œá¬≤/dof = {cmb_comparison['statistics']['reduced_chi_squared']:.2f}")
        print(f"‚úÖ –ù–∏–≤–æ –Ω–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {cmb_comparison['agreement_level']}")
        
        # –¢–µ—Å—Ç 6: –°—ä–≤–º–µ—Å—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑
        print("\nüîó –¢–ï–°–¢ 6: –°–™–í–ú–ï–°–¢–ï–ù –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        from integration_core.joint_analyzer import JointBAOCMBAnalyzer
        joint_analyzer = JointBAOCMBAnalyzer()
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
        optimization = joint_analyzer.optimize_parameters()
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏: {optimization['success']}")
        print(f"‚úÖ –ù–∞–π-–¥–æ–±—ä—Ä œá¬≤: {optimization['chi_squared']:.2f}")
        
        # –û–±—à–∏—Ä–µ–Ω –∞–Ω–∞–ª–∏–∑
        results = joint_analyzer.comprehensive_joint_analysis()
        
        # –ü—Ä–∏–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫—Ä–∞–π–Ω–∏—è –¥–æ–∫–ª–∞–¥
        joint_analyzer.print_comprehensive_report()
        
        # –§–∏–Ω–∞–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        print("\nüéâ –§–ò–ù–ê–õ–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò")
        print("-" * 40)
        
        best_params = results.best_fit_parameters
        print(f"‚úÖ –ù–∞–π-–¥–æ–±—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
        print(f"   Œ± = {best_params['alpha']:.4f}")
        print(f"   Œ≤ = {best_params['beta']:.4f}")
        print(f"   Œ≥ = {best_params['gamma']:.4f}")
        print(f"   Œ¥ = {best_params['delta']:.4f}")
        
        combined_stats = results.combined_statistics
        print(f"‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        print(f"   –û–±—â–æ œá¬≤ = {combined_stats['total_chi_squared']:.2f}")
        print(f"   –†–µ–¥—É—Ü–∏—Ä–∞–Ω œá¬≤ = {combined_stats['reduced_chi_squared']:.2f}")
        print(f"   DOF = {combined_stats['total_dof']}")
        
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—Ç–∞:")
        print(f"   {results.agreement_assessment}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å ŒõCDM
        comparison_table = joint_analyzer.generate_comparison_table()
        improvement = "–î–ê" if comparison_table['improvement'] else "–ù–ï"
        print(f"‚úÖ –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å–ø—Ä—è–º–æ ŒõCDM: {improvement}")
        print(f"‚úÖ Œîœá¬≤ = {comparison_table['delta_chi2']:.2f}")
        print(f"‚úÖ –ó–Ω–∞—á–∏–º–æ—Å—Ç = {comparison_table['significance']:.2f}œÉ")
        
        print("\n" + "="*80)
        print("üéä –í–°–ò–ß–ö–ò –¢–ï–°–¢–û–í–ï –ó–ê–í–™–†–®–ò–•–ê –£–°–ü–ï–®–ù–û!")
        print("üéä BAO –ò CMB –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–ê–¢–ê –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ò –ü–ï–†–§–ï–ö–¢–ù–û!")
        print("=" * 80)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ì–†–ï–®–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 