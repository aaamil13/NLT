#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO –∏ CMB –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è (Œõ=0)

–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ä–∞–≤–Ω—è–≤–∞:
1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω ŒõCDM –º–æ–¥–µ–ª
2. –ú–æ–¥–µ–ª –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è (Œõ=0)
3. –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω –º–æ–¥–µ–ª –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è
4. –†–µ–∞–ª–Ω–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏

–§–æ–∫—É—Å–∏—Ä–∞ —Å–µ –Ω–∞:
- BAO —Å–∫–∞–ª–∞ –Ω–∞ –∑–≤—É–∫–æ–≤–∏—è —Ö–æ—Ä–∏–∑–æ–Ω—Ç r_s
- CMB —ä–≥–ª–æ–≤–∞ —Å–∫–∞–ª–∞ Œ∏_s –∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø—ä—Ä–≤–∏—è –ø–∏–∫ l_peak
- –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∫–æ—Ä–µ–∫—Ü–∏–∏ –∏ –ø–æ—Å–æ—á–Ω–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate
import seaborn as sns
from typing import Dict, List, Tuple
import logging
import warnings

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–¥—É–ª–∏—Ç–µ
from no_lambda_cosmology import NoLambdaCosmology
from anisotropic_nonlinear_time import AnisotropicNonlinearTimeCosmology

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—Ç–∏–ª–æ–≤–µ—Ç–µ
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∏–∑–∏—á–Ω–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
c = 299792458  # –º/—Å


class StandardLCDM:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω ŒõCDM –º–æ–¥–µ–ª –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    
    def __init__(self, H0=67.4, Omega_m=0.315, Omega_Lambda=0.685, Omega_b=0.049):
        self.H0 = H0
        self.Omega_m = Omega_m
        self.Omega_Lambda = Omega_Lambda
        self.Omega_b = Omega_b
        self.Omega_r = 8.24e-5
        
        # –§–∏–∫—Å–∏—Ä–∞–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ z_drag –∏ z_star
        self.z_drag = 1060
        self.z_star = 1090
        
    def hubble_function(self, z):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ ŒõCDM –•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏—è"""
        z = np.asarray(z)
        return self.H0 * np.sqrt(self.Omega_m * (1 + z)**3 + self.Omega_Lambda)
    
    def sound_horizon_scale(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ BAO —Å–∫–∞–ª–∞ (Planck 2018)"""
        return 147.09  # Mpc
    
    def angular_diameter_distance(self, z):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —ä–≥–ª–æ–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ"""
        z = np.asarray(z)
        
        def integrand(z_val):
            return c / (self.hubble_function(z_val) * 1000)
        
        D_A = np.zeros_like(z)
        for i, z_val in enumerate(z.flat):
            if z_val > 0:
                integral, _ = integrate.quad(integrand, 0, z_val)
                D_A.flat[i] = integral / (1 + z_val)
            else:
                D_A.flat[i] = 0
        
        return D_A.reshape(z.shape)
    
    def cmb_angular_scale(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ CMB —ä–≥–ª–æ–≤–∞ —Å–∫–∞–ª–∞"""
        r_s = self.sound_horizon_scale()
        D_A_star = self.angular_diameter_distance(self.z_star)
        return r_s / D_A_star
    
    def cmb_peak_position(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø—ä—Ä–≤–∏—è CMB –ø–∏–∫"""
        theta_s = self.cmb_angular_scale()
        return np.pi / theta_s


def compare_cosmological_models():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª–∏"""
    
    print("üåå –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê –ö–û–°–ú–û–õ–û–ì–ò–ß–ù–ò–¢–ï –ú–û–î–ï–õ–ò")
    print("=" * 80)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    lcdm = StandardLCDM()
    no_lambda = NoLambdaCosmology(epsilon_bao=0.02, epsilon_cmb=0.015)
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    diag_no_lambda = no_lambda.diagnostics()
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
    print(f"\nüìä –û–°–ù–û–í–ù–ò –ü–ê–†–ê–ú–ï–¢–†–ò:")
    print(f"{'–ü–∞—Ä–∞–º–µ—Ç—ä—Ä':<25} {'ŒõCDM':<15} {'No-Œõ':<15} {'–†–∞–∑–ª–∏–∫–∞':<15}")
    print("-" * 75)
    
    # –û—Å–Ω–æ–≤–Ω–∏ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    print(f"{'Œ©‚Çò':<25} {lcdm.Omega_m:<15.4f} {no_lambda.Omega_m:<15.4f} {no_lambda.Omega_m - lcdm.Omega_m:<15.4f}")
    print(f"{'Œ©Œõ':<25} {lcdm.Omega_Lambda:<15.4f} {no_lambda.Omega_Lambda:<15.4f} {no_lambda.Omega_Lambda - lcdm.Omega_Lambda:<15.4f}")
    print(f"{'Œ©‚Çñ':<25} {0.0:<15.4f} {diag_no_lambda['Omega_k']:<15.4f} {diag_no_lambda['Omega_k']:<15.4f}")
    
    print(f"\nüîç –ö–†–ò–¢–ò–ß–ù–ò –ß–ï–†–í–ï–ù–ò –û–¢–ú–ï–°–¢–í–ê–ù–ò–Ø:")
    print(f"{'z_drag':<25} {lcdm.z_drag:<15.1f} {diag_no_lambda['z_drag']:<15.1f} {diag_no_lambda['z_drag'] - lcdm.z_drag:<15.1f}")
    print(f"{'z_star':<25} {lcdm.z_star:<15.1f} {diag_no_lambda['z_star']:<15.1f} {diag_no_lambda['z_star'] - lcdm.z_star:<15.1f}")
    
    print(f"\nüéµ BAO –ü–ê–†–ê–ú–ï–¢–†–ò:")
    r_s_lcdm = lcdm.sound_horizon_scale()
    r_s_no_lambda = diag_no_lambda['r_s_isotropic']
    print(f"{'r_s [Mpc]':<25} {r_s_lcdm:<15.3f} {r_s_no_lambda:<15.3f} {r_s_no_lambda - r_s_lcdm:<15.3f}")
    print(f"{'–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞':<25} {'-':<15} {(r_s_no_lambda - r_s_lcdm)/r_s_lcdm*100:<15.2f}% {'-':<15}")
    
    print(f"\nüåå CMB –ü–ê–†–ê–ú–ï–¢–†–ò:")
    theta_s_lcdm = lcdm.cmb_angular_scale()
    theta_s_no_lambda = diag_no_lambda['theta_s_isotropic']
    l_peak_lcdm = lcdm.cmb_peak_position()
    l_peak_no_lambda = diag_no_lambda['l_peak_isotropic']
    
    print(f"{'Œ∏_s [rad]':<25} {theta_s_lcdm:<15.6f} {theta_s_no_lambda:<15.6f} {theta_s_no_lambda - theta_s_lcdm:<15.6f}")
    print(f"{'l_peak':<25} {l_peak_lcdm:<15.1f} {l_peak_no_lambda:<15.1f} {l_peak_no_lambda - l_peak_lcdm:<15.1f}")
    
    print(f"\n‚è∞ –í–™–ó–†–ê–°–¢ –ù–ê –í–°–ï–õ–ï–ù–ê–¢–ê:")
    age_lcdm = 13.8  # Gyr (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç)
    age_no_lambda = diag_no_lambda['age_universe_Gyr']
    print(f"{'–í—ä–∑—Ä–∞—Å—Ç [Gyr]':<25} {age_lcdm:<15.2f} {age_no_lambda:<15.2f} {age_no_lambda - age_lcdm:<15.2f}")
    
    return lcdm, no_lambda, diag_no_lambda


def analyze_bao_effects():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO –µ—Ñ–µ–∫—Ç–∏—Ç–µ –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è"""
    
    print(f"\nüéµ –î–ï–¢–ê–ô–õ–ï–ù BAO –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    lcdm = StandardLCDM()
    no_lambda = NoLambdaCosmology(epsilon_bao=0.02)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('BAO –ê–Ω–∞–ª–∏–∑: –ï—Ñ–µ–∫—Ç–∏ –Ω–∞ –ª–∏–ø—Å–∞—Ç–∞ –Ω–∞ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è', fontsize=16)
    
    # Subplot 1: –•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏–∏
    ax1 = axes[0, 0]
    ax1.set_title('–•—ä–±—ä–ª —Ñ—É–Ω–∫—Ü–∏–∏ H(z)')
    
    z_range = np.logspace(-2, 0.5, 100)
    H_lcdm = lcdm.hubble_function(z_range)
    H_no_lambda = no_lambda.hubble_function(z_range)
    
    ax1.plot(z_range, H_lcdm, '--', label='ŒõCDM', linewidth=2, color='black')
    ax1.plot(z_range, H_no_lambda, '-', label='No-Œõ', linewidth=2, color='blue')
    
    ax1.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax1.set_ylabel('H(z) [km/s/Mpc]')
    ax1.set_xscale('log')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Subplot 2: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏
    ax2 = axes[0, 1]
    ax2.set_title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏ –≤ H(z)')
    
    relative_diff = (H_no_lambda - H_lcdm) / H_lcdm * 100
    ax2.plot(z_range, relative_diff, '-', linewidth=2, color='red')
    
    ax2.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax2.set_ylabel('ŒîH/H_ŒõCDM [%]')
    ax2.set_xscale('log')
    ax2.grid(True, alpha=0.3)
    ax2.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    # Subplot 3: –°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –∑–≤—É–∫–∞
    ax3 = axes[1, 0]
    ax3.set_title('–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –∑–≤—É–∫–∞ c_s(z)')
    
    z_early = np.logspace(1, 3, 100)  # z –æ—Ç 10 –¥–æ 1000
    c_s_values = no_lambda.sound_speed(z_early) / c  # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–æ –∫—ä–º c
    
    ax3.plot(z_early, c_s_values, '-', linewidth=2, color='green')
    ax3.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax3.set_ylabel('c_s/c')
    ax3.set_xscale('log')
    ax3.grid(True, alpha=0.3)
    
    # Subplot 4: –ò–Ω—Ç–µ–≥—Ä–∞–Ω–¥ –Ω–∞ –∑–≤—É–∫–æ–≤–∏—è —Ö–æ—Ä–∏–∑–æ–Ω—Ç
    ax4 = axes[1, 1]
    ax4.set_title('–ò–Ω—Ç–µ–≥—Ä–∞–Ω–¥ –Ω–∞ –∑–≤—É–∫–æ–≤–∏—è —Ö–æ—Ä–∏–∑–æ–Ω—Ç')
    
    integrand_values = []
    for z_val in z_early:
        integrand_val = no_lambda.sound_horizon_integrand(z_val)
        integrand_values.append(integrand_val)
    
    ax4.plot(z_early, integrand_values, '-', linewidth=2, color='purple')
    ax4.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax4.set_ylabel('c_s(z)/H(z) [Mpc]')
    ax4.set_xscale('log')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('bao_analysis_no_lambda.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    print(f"\nüìà BAO –ö–û–õ–ò–ß–ï–°–¢–í–ï–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"  ŒõCDM r_s = {lcdm.sound_horizon_scale():.3f} Mpc")
    print(f"  No-Œõ r_s = {no_lambda.sound_horizon_scale():.3f} Mpc")
    print(f"  –†–∞–∑–ª–∏–∫–∞ = {no_lambda.sound_horizon_scale() - lcdm.sound_horizon_scale():.3f} Mpc")
    print(f"  –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞ = {(no_lambda.sound_horizon_scale() - lcdm.sound_horizon_scale())/lcdm.sound_horizon_scale()*100:.2f}%")


def analyze_cmb_effects():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB –µ—Ñ–µ–∫—Ç–∏—Ç–µ –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è"""
    
    print(f"\nüåå –î–ï–¢–ê–ô–õ–ï–ù CMB –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    lcdm = StandardLCDM()
    no_lambda = NoLambdaCosmology(epsilon_cmb=0.015)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('CMB –ê–Ω–∞–ª–∏–∑: –ï—Ñ–µ–∫—Ç–∏ –Ω–∞ –ª–∏–ø—Å–∞—Ç–∞ –Ω–∞ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è', fontsize=16)
    
    # Subplot 1: –™–≥–ª–æ–≤–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
    ax1 = axes[0, 0]
    ax1.set_title('–™–≥–ª–æ–≤–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è')
    
    z_range = np.logspace(-1, 3.5, 100)  # z –æ—Ç 0.1 –¥–æ ~3162
    D_A_lcdm = lcdm.angular_diameter_distance(z_range)
    D_A_no_lambda = no_lambda.angular_diameter_distance(z_range)
    
    ax1.plot(z_range, D_A_lcdm, '--', label='ŒõCDM', linewidth=2, color='black')
    ax1.plot(z_range, D_A_no_lambda, '-', label='No-Œõ', linewidth=2, color='blue')
    
    # –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ z_star
    ax1.axvline(x=lcdm.z_star, color='red', linestyle=':', alpha=0.7, label='z* (ŒõCDM)')
    ax1.axvline(x=no_lambda.z_star, color='orange', linestyle=':', alpha=0.7, label='z* (No-Œõ)')
    
    ax1.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax1.set_ylabel('D_A(z) [Mpc]')
    ax1.set_xscale('log')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Subplot 2: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏ –≤ D_A
    ax2 = axes[0, 1]
    ax2.set_title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏ –≤ D_A(z)')
    
    relative_diff_DA = (D_A_no_lambda - D_A_lcdm) / D_A_lcdm * 100
    ax2.plot(z_range, relative_diff_DA, '-', linewidth=2, color='red')
    
    ax2.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax2.set_ylabel('ŒîD_A/D_A_ŒõCDM [%]')
    ax2.set_xscale('log')
    ax2.grid(True, alpha=0.3)
    ax2.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    # Subplot 3: CMB –º–æ—â–Ω–æ—Å—Ç–µ–Ω —Å–ø–µ–∫—Ç—ä—Ä (—Å–∏–º—É–ª–∞—Ü–∏—è)
    ax3 = axes[1, 0]
    ax3.set_title('CMB –º–æ—â–Ω–æ—Å—Ç–µ–Ω —Å–ø–µ–∫—Ç—ä—Ä (—Å–∏–º—É–ª–∞—Ü–∏—è)')
    
    # –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ CMB –ø–∏–∫–æ–≤–µ
    l_values = np.logspace(0.5, 3, 1000)  # l –æ—Ç ~3 –¥–æ 1000
    
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–µ–Ω CMB —Å–ø–µ–∫—Ç—ä—Ä (Gaussian –ø–∏–∫–æ–≤–µ)
    def cmb_spectrum_approx(l, l_peak, amplitude=1.0):
        """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–µ–Ω CMB —Å–ø–µ–∫—Ç—ä—Ä —Å Gaussian –ø–∏–∫"""
        return amplitude * np.exp(-0.5 * ((l - l_peak) / (l_peak * 0.2))**2)
    
    # –ü–∏–∫–æ–≤–µ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª–∏
    l_peak_lcdm = lcdm.cmb_peak_position()
    l_peak_no_lambda = no_lambda.cmb_peak_position()
    
    C_l_lcdm = cmb_spectrum_approx(l_values, l_peak_lcdm)
    C_l_no_lambda = cmb_spectrum_approx(l_values, l_peak_no_lambda)
    
    ax3.plot(l_values, C_l_lcdm, '--', label=f'ŒõCDM (l_peak={l_peak_lcdm:.0f})', linewidth=2, color='black')
    ax3.plot(l_values, C_l_no_lambda, '-', label=f'No-Œõ (l_peak={l_peak_no_lambda:.0f})', linewidth=2, color='blue')
    
    ax3.set_xlabel('–ú—É–ª—Ç–∏–ø–æ–ª l')
    ax3.set_ylabel('C_l [–ø—Ä–æ–∏–∑–≤–æ–ª–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏]')
    ax3.set_xscale('log')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # Subplot 4: –ò–∑–º–µ—Å—Ç–≤–∞–Ω–∏—è –Ω–∞ CMB –ø–∏–∫–æ–≤–µ—Ç–µ
    ax4 = axes[1, 1]
    ax4.set_title('–ò–∑–º–µ—Å—Ç–≤–∞–Ω–∏—è –Ω–∞ CMB –ø–∏–∫–æ–≤–µ—Ç–µ')
    
    # –ü—ä—Ä–≤–∏ –Ω—è–∫–æ–ª–∫–æ –ø–∏–∫–∞
    peak_numbers = np.array([1, 2, 3, 4, 5])
    l_peaks_lcdm = l_peak_lcdm * peak_numbers
    l_peaks_no_lambda = l_peak_no_lambda * peak_numbers
    
    shift = l_peaks_no_lambda - l_peaks_lcdm
    
    ax4.plot(peak_numbers, shift, 'o-', linewidth=2, markersize=8, color='red')
    ax4.set_xlabel('–ù–æ–º–µ—Ä –Ω–∞ –ø–∏–∫–∞')
    ax4.set_ylabel('–ò–∑–º–µ—Å—Ç–≤–æ–Ω–µ –Ω–∞ –ø–∏–∫–∞ Œîl')
    ax4.grid(True, alpha=0.3)
    ax4.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    plt.tight_layout()
    plt.savefig('cmb_analysis_no_lambda.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    print(f"\nüìà CMB –ö–û–õ–ò–ß–ï–°–¢–í–ï–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"  ŒõCDM Œ∏_s = {lcdm.cmb_angular_scale():.6f} rad")
    print(f"  No-Œõ Œ∏_s = {no_lambda.cmb_angular_scale():.6f} rad")
    print(f"  –†–∞–∑–ª–∏–∫–∞ = {no_lambda.cmb_angular_scale() - lcdm.cmb_angular_scale():.6f} rad")
    print(f"  ŒõCDM l_peak = {lcdm.cmb_peak_position():.1f}")
    print(f"  No-Œõ l_peak = {no_lambda.cmb_peak_position():.1f}")
    print(f"  –ò–∑–º–µ—Å—Ç–≤–æ–Ω–µ = {no_lambda.cmb_peak_position() - lcdm.cmb_peak_position():.1f}")


def analyze_anisotropic_effects():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏ –≤ No-Œõ –º–æ–¥–µ–ª–∞"""
    
    print(f"\nüß≠ –ê–ù–ê–õ–ò–ó –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò–¢–ï –ï–§–ï–ö–¢–ò")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª —Å —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è
    anisotropy_levels = [
        (0.0, 0.0, "–ò–∑–æ—Ç—Ä–æ–ø–Ω–æ"),
        (0.01, 0.008, "–°–ª–∞–±–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è"),
        (0.03, 0.02, "–£–º–µ—Ä–µ–Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è"),
        (0.06, 0.04, "–°–∏–ª–Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è")
    ]
    
    # –¢–µ—Å—Ç–æ–≤–∏ –ø–æ—Å–æ–∫–∏
    directions = [
        (0, 0, "–ü–æ–ª—è—Ä–Ω–∞"),
        (np.pi/2, 0, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞-X"),
        (np.pi/2, np.pi/2, "–ï–∫–≤–∞—Ç–æ—Ä–∏–∞–ª–Ω–∞-Y"),
        (np.pi/4, np.pi/4, "–î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞")
    ]
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –µ—Ñ–µ–∫—Ç–∏ –≤ No-Œõ –º–æ–¥–µ–ª–∞', fontsize=16)
    
    # Subplot 1: BAO –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è
    ax1 = axes[0, 0]
    ax1.set_title('BAO –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è (r_s –ø–æ –ø–æ—Å–æ–∫–∏)')
    
    colors = ['blue', 'green', 'orange', 'red']
    
    for i, (eps_bao, eps_cmb, label) in enumerate(anisotropy_levels[1:]):
        cosmo = NoLambdaCosmology(epsilon_bao=eps_bao, epsilon_cmb=eps_cmb)
        
        r_s_values = []
        dir_names = []
        
        for theta, phi, dir_name in directions:
            r_s = cosmo.sound_horizon_scale(theta=theta, phi=phi)
            r_s_values.append(r_s)
            dir_names.append(dir_name)
        
        ax1.plot(range(len(directions)), r_s_values, 'o-', 
                label=label, color=colors[i], linewidth=2, markersize=8)
    
    ax1.set_xticks(range(len(directions)))
    ax1.set_xticklabels([d[2] for d in directions], rotation=45)
    ax1.set_ylabel('r_s [Mpc]')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Subplot 2: CMB –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è
    ax2 = axes[0, 1]
    ax2.set_title('CMB –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è (l_peak –ø–æ –ø–æ—Å–æ–∫–∏)')
    
    for i, (eps_bao, eps_cmb, label) in enumerate(anisotropy_levels[1:]):
        cosmo = NoLambdaCosmology(epsilon_bao=eps_bao, epsilon_cmb=eps_cmb)
        
        l_peak_values = []
        
        for theta, phi, dir_name in directions:
            l_peak = cosmo.cmb_peak_position(theta=theta, phi=phi)
            l_peak_values.append(l_peak)
        
        ax2.plot(range(len(directions)), l_peak_values, 'o-', 
                label=label, color=colors[i], linewidth=2, markersize=8)
    
    ax2.set_xticks(range(len(directions)))
    ax2.set_xticklabels([d[2] for d in directions], rotation=45)
    ax2.set_ylabel('l_peak')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # Subplot 3: –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è –∫–∞—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç —Å–∏–ª–∞—Ç–∞
    ax3 = axes[1, 0]
    ax3.set_title('–ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è –∫–∞—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞')
    
    epsilon_range = np.linspace(0, 0.08, 20)
    r_s_variations = []
    l_peak_variations = []
    
    for eps in epsilon_range:
        cosmo = NoLambdaCosmology(epsilon_bao=eps, epsilon_cmb=eps*0.7)
        
        r_s_values = []
        l_peak_values = []
        
        for theta, phi, _ in directions:
            r_s_values.append(cosmo.sound_horizon_scale(theta=theta, phi=phi))
            l_peak_values.append(cosmo.cmb_peak_position(theta=theta, phi=phi))
        
        r_s_variations.append(np.std(r_s_values) / np.mean(r_s_values) * 100)
        l_peak_variations.append(np.std(l_peak_values) / np.mean(l_peak_values) * 100)
    
    ax3.plot(epsilon_range, r_s_variations, '-', label='BAO (r_s)', linewidth=2, color='blue')
    ax3.plot(epsilon_range, l_peak_variations, '-', label='CMB (l_peak)', linewidth=2, color='red')
    
    ax3.set_xlabel('–ü–∞—Ä–∞–º–µ—Ç—ä—Ä –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è Œµ')
    ax3.set_ylabel('–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è [%]')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # Subplot 4: –ö–æ—Ä–µ–ª–∞—Ü–∏—è BAO-CMB
    ax4 = axes[1, 1]
    ax4.set_title('–ö–æ—Ä–µ–ª–∞—Ü–∏—è –º–µ–∂–¥—É BAO –∏ CMB –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏–∏')
    
    # –î–∞–Ω–Ω–∏ –∑–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏—è—Ç–∞
    cosmo = NoLambdaCosmology(epsilon_bao=0.04, epsilon_cmb=0.03)
    
    r_s_dir = []
    l_peak_dir = []
    
    for theta, phi, _ in directions:
        r_s_dir.append(cosmo.sound_horizon_scale(theta=theta, phi=phi))
        l_peak_dir.append(cosmo.cmb_peak_position(theta=theta, phi=phi))
    
    ax4.scatter(r_s_dir, l_peak_dir, s=100, alpha=0.7, color='purple')
    
    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –µ—Ç–∏–∫–µ—Ç–∏
    for i, (r_s, l_peak) in enumerate(zip(r_s_dir, l_peak_dir)):
        ax4.annotate(directions[i][2], (r_s, l_peak), 
                    xytext=(5, 5), textcoords='offset points')
    
    ax4.set_xlabel('r_s [Mpc]')
    ax4.set_ylabel('l_peak')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('anisotropic_effects_no_lambda.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    print(f"\nüìä –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
    print(f"{'–ü–∞—Ä–∞–º–µ—Ç—ä—Ä':<15} {'–ú–∏–Ω–∏–º—É–º':<12} {'–ú–∞–∫—Å–∏–º—É–º':<12} {'–î–∏–∞–ø–∞–∑–æ–Ω':<12} {'CV %':<10}")
    print("-" * 70)
    
    cosmo = NoLambdaCosmology(epsilon_bao=0.03, epsilon_cmb=0.02)
    
    r_s_all = [cosmo.sound_horizon_scale(theta=theta, phi=phi) for theta, phi, _ in directions]
    l_peak_all = [cosmo.cmb_peak_position(theta=theta, phi=phi) for theta, phi, _ in directions]
    
    r_s_min, r_s_max = min(r_s_all), max(r_s_all)
    l_peak_min, l_peak_max = min(l_peak_all), max(l_peak_all)
    
    r_s_cv = np.std(r_s_all) / np.mean(r_s_all) * 100
    l_peak_cv = np.std(l_peak_all) / np.mean(l_peak_all) * 100
    
    print(f"{'r_s [Mpc]':<15} {r_s_min:<12.3f} {r_s_max:<12.3f} {r_s_max-r_s_min:<12.3f} {r_s_cv:<10.2f}")
    print(f"{'l_peak':<15} {l_peak_min:<12.1f} {l_peak_max:<12.1f} {l_peak_max-l_peak_min:<12.1f} {l_peak_cv:<10.2f}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∞–Ω–∞–ª–∏–∑"""
    
    print("üåå –ê–ù–ê–õ–ò–ó –ù–ê BAO –ò CMB –ë–ï–ó –¢–™–ú–ù–ê –ï–ù–ï–†–ì–ò–Ø")
    print("=" * 80)
    
    # –ï—Ç–∞–ø 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –º–æ–¥–µ–ª–∏
    try:
        lcdm, no_lambda, diag = compare_cosmological_models()
        print("\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ: {e}")
        return
    
    # –ï—Ç–∞–ø 2: BAO –∞–Ω–∞–ª–∏–∑
    try:
        analyze_bao_effects()
        print("\n‚úÖ BAO –∞–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ BAO –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ï—Ç–∞–ø 3: CMB –∞–Ω–∞–ª–∏–∑
    try:
        analyze_cmb_effects()
        print("\n‚úÖ CMB –∞–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ CMB –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ï—Ç–∞–ø 4: –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –µ—Ñ–µ–∫—Ç–∏
    try:
        analyze_anisotropic_effects()
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏: {e}")
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    print("-" * 20)
    print("1. –ú–æ–¥–µ–ª—ä—Ç –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è –ø–æ–∫–∞–∑–≤–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏ –æ—Ç ŒõCDM")
    print("2. BAO —Å–∫–∞–ª–∞—Ç–∞ r_s —Å–µ –ø—Ä–æ–º–µ–Ω—è –ø–æ—Ä–∞–¥–∏ –ª–∏–ø—Å–∞—Ç–∞ –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ")
    print("3. CMB –ø—ä—Ä–≤–∏—è –ø–∏–∫ —Å–µ –∏–∑–º–µ—Å—Ç–≤–∞ –ø–æ—Ä–∞–¥–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞—Ç–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è")
    print("4. –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏ –≤—ä–≤–µ–∂–¥–∞—Ç –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø–æ—Å–æ—á–Ω–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏")
    print("5. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–Ω–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏")


if __name__ == "__main__":
    main() 