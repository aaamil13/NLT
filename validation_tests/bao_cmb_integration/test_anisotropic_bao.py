#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω BAO –∞–Ω–∞–ª–∏–∑
============================

–¢–µ—Å—Ç–≤–∞ –Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ BAO –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è:
- DA/rs –∏ DH/rs –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
- –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ likelihood —Ñ—É–Ω–∫—Ü–∏–∏
- –ö—Ä—ä—Å—Ç–æ—Å–∞–Ω–∏ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è—Ç–∞
- Nested sampling —Å –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –¥–∞–Ω–Ω–∏
"""

import numpy as np
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple
import logging
import time

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from no_lambda_cosmology import NoLambdaCosmology
from observational_data import BAOObservationalData, CMBObservationalData, LikelihoodFunctions
from bao_covariance_matrices import BAOCovarianceMatrices
from nested_sampling_analysis import OptimizedNestedSampling

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 12


def test_anisotropic_distance_calculations():
    """–¢–µ—Å—Ç –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢ –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò –†–ê–ó–°–¢–û–Ø–ù–ò–Ø")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(
        H0=70.0,
        Omega_m=0.3,
        epsilon_bao=0.02,
        epsilon_cmb=0.015
    )
    
    # –¢–µ—Å—Ç–æ–≤–∏ —á–µ—Ä–≤–µ–Ω–∏ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–∏—è
    z_test = np.array([0.38, 0.51, 0.61, 0.70, 0.85])
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ BAO —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
    bao_measures = cosmo.bao_distance_measures(z_test)
    
    print(f"{'z':<6} {'DA/rs':<8} {'DH/rs':<8} {'DV/rs':<8} {'r_s':<8}")
    print("-" * 50)
    
    for i, z in enumerate(z_test):
        print(f"{z:<6.2f} {bao_measures['DA_rs'][i]:<8.2f} {bao_measures['DH_rs'][i]:<8.2f} {bao_measures['DV_rs'][i]:<8.2f} {bao_measures['r_s']:<8.2f}")
    
    # –§–∏–∑–∏—á–µ—Å–∫–∏ —Å–º–∏—Å—ä–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\nüîç –§–ò–ó–ò–ß–ï–°–ö–ò –ü–†–û–í–ï–†–ö–ò:")
    print(f"  r_s = {bao_measures['r_s']:.2f} Mpc (–æ—á–∞–∫–≤–∞ —Å–µ ~147 Mpc)")
    print(f"  DA/rs –¥–∏–∞–ø–∞–∑–æ–Ω: {np.min(bao_measures['DA_rs']):.2f} - {np.max(bao_measures['DA_rs']):.2f}")
    print(f"  DH/rs –¥–∏–∞–ø–∞–∑–æ–Ω: {np.min(bao_measures['DH_rs']):.2f} - {np.max(bao_measures['DH_rs']):.2f}")
    print(f"  DV/rs –¥–∏–∞–ø–∞–∑–æ–Ω: {np.min(bao_measures['DV_rs']):.2f} - {np.max(bao_measures['DV_rs']):.2f}")
    
    # –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–∏—è —Ç–µ—Å—Ç
    print(f"\nüß≠ –ê–ù–ò–ó–û–¢–†–û–ü–ò–Ø –¢–ï–°–¢:")
    
    # –†–∞–∑–ª–∏—á–Ω–∏ –ø–æ—Å–æ–∫–∏
    directions = [
        (0, 0, "z-–æ—Å"),
        (np.pi/2, 0, "x-–æ—Å"),
        (np.pi/2, np.pi/2, "y-–æ—Å"),
        (np.pi/4, np.pi/4, "–¥–∏–∞–≥–æ–Ω–∞–ª")
    ]
    
    z_single = 0.5
    
    for theta, phi, name in directions:
        bao_aniso = cosmo.bao_distance_measures(z_single, theta, phi)
        print(f"  {name:<12}: DA/rs={bao_aniso['DA_rs']:.3f}, DH/rs={bao_aniso['DH_rs']:.3f}, DV/rs={bao_aniso['DV_rs']:.3f}")
    
    return bao_measures


def test_anisotropic_likelihood():
    """–¢–µ—Å—Ç –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ likelihood —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("\nüß™ –¢–ï–°–¢ –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–ê LIKELIHOOD")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∏ likelihood —Ñ—É–Ω–∫—Ü–∏—è
    bao_data = BAOObservationalData()
    cmb_data = CMBObservationalData()
    likelihood_func = LikelihoodFunctions(bao_data, cmb_data)
    
    # –¢–µ—Å—Ç–æ–≤ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(H0=70.0, Omega_m=0.3)
    
    # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ redshift —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    combined_data = bao_data.get_combined_data()
    z_values = combined_data['redshifts']
    
    print(f"–¢–µ—Å—Ç–æ–≤–∏ z —Å—Ç–æ–π–Ω–æ—Å—Ç–∏: {z_values}")
    print(f"–ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(z_values)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ model predictions
    bao_predictions = cosmo.calculate_bao_predictions(z_values)
    
    model_predictions = {
        'DV_rs': bao_predictions['DV_rs'],
        'DA_rs': bao_predictions['DA_rs'],
        'DH_rs': bao_predictions['DH_rs'],
        'theta_s': cosmo.cmb_angular_scale()
    }
    
    print(f"\nModel predictions:")
    print(f"  DV/rs: {model_predictions['DV_rs'][:5]}...")
    print(f"  DA/rs: {model_predictions['DA_rs'][:5]}...")
    print(f"  DH/rs: {model_predictions['DH_rs'][:5]}...")
    print(f"  theta_s: {model_predictions['theta_s']:.6f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ vs –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ likelihood
    print(f"\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê LIKELIHOOD:")
    
    # –ò–∑–æ—Ç—Ä–æ–ø–Ω–∞ (—Å–∞–º–æ DV/rs)
    loglike_iso = likelihood_func.bao_likelihood(model_predictions, use_anisotropic=False)
    
    # –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ (DV/rs + DA/rs + DH/rs)
    loglike_aniso = likelihood_func.bao_likelihood(model_predictions, use_anisotropic=True)
    
    # CMB likelihood
    cmb_loglike = likelihood_func.cmb_likelihood(model_predictions)
    
    print(f"  BAO –∏–∑–æ—Ç—Ä–æ–ø–Ω–∞: {loglike_iso:.2f}")
    print(f"  BAO –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞: {loglike_aniso:.2f}")
    print(f"  CMB: {cmb_loglike:.2f}")
    print(f"  –†–∞–∑–ª–∏–∫–∞: {loglike_aniso - loglike_iso:.2f}")
    
    # Chi-squared –∞–Ω–∞–ª–∏–∑
    chi2_analysis = likelihood_func.chi_squared_analysis(model_predictions)
    
    print(f"\nüìä CHI-SQUARED –ê–ù–ê–õ–ò–ó:")
    print(f"  BAO œá¬≤: {chi2_analysis['bao_chi2']:.2f}")
    print(f"  CMB œá¬≤: {chi2_analysis['cmb_chi2']:.2f}")
    print(f"  –û–±—â–æ œá¬≤: {chi2_analysis['combined_chi2']:.2f}")
    print(f"  Reduciran œá¬≤: {chi2_analysis['reduced_chi2_combined']:.2f}")
    
    return loglike_aniso, chi2_analysis


def test_covariance_matrices():
    """–¢–µ—Å—Ç –Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏ –∑–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è"""
    
    print("\nüß™ –¢–ï–°–¢ –ù–ê –ö–û–í–ê–†–ò–ê–¶–ò–û–ù–ù–ò –ú–ê–¢–†–ò–¶–ò")
    print("=" * 50)
    
    bao_cov = BAOCovarianceMatrices()
    
    # –¢–µ—Å—Ç –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ä–∞–∑–º–µ—Ä–∏
    test_sizes = [3, 6, 9, 12, 15]
    
    for size in test_sizes:
        cov_matrix = bao_cov.get_dataset_covariance_matrix('BOSS_DR12', size)
        
        print(f"  –†–∞–∑–º–µ—Ä {size}: –º–∞—Ç—Ä–∏—Ü–∞ {cov_matrix.shape}")
        print(f"    Condition number: {np.linalg.cond(cov_matrix):.2e}")
        print(f"    Determinant: {np.linalg.det(cov_matrix):.2e}")
        print(f"    –î–∏–∞–≥–æ–Ω–∞–ª: {np.diag(cov_matrix)[:3]}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ—Å—Ç
        eigenvals = np.linalg.eigvals(cov_matrix)
        is_pos_def = np.all(eigenvals > 0)
        print(f"    –ü–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ—Å—Ç: {is_pos_def}")
        
        if not is_pos_def:
            print(f"    ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏ eigenvalues: {eigenvals[eigenvals <= 0]}")
    
    # –¢–µ—Å—Ç –∑–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
    print(f"\nüéØ –ê–ù–ò–ó–û–¢–†–û–ü–ù–ê –ú–ê–¢–†–ò–¶–ê:")
    
    aniso_cov = bao_cov.generate_anisotropic_covariance('BOSS_DR12')
    
    print(f"  –†–∞–∑–º–µ—Ä: {aniso_cov['covariance'].shape}")
    print(f"  z —Ç–æ—á–∫–∏: {aniso_cov['redshifts']}")
    print(f"  DA/rs –≥—Ä–µ—à–∫–∏: {aniso_cov['da_rs_errors']}")
    print(f"  DH/rs –≥—Ä–µ—à–∫–∏: {aniso_cov['dh_rs_errors']}")
    
    # –ö–æ—Ä–µ–ª–∞—Ü–∏–æ–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑
    cov_matrix = aniso_cov['covariance']
    corr_matrix = cov_matrix / np.sqrt(np.outer(np.diag(cov_matrix), np.diag(cov_matrix)))
    
    print(f"  –ö–æ—Ä–µ–ª–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω: {np.min(corr_matrix):.3f} - {np.max(corr_matrix):.3f}")
    
    return aniso_cov


def test_nested_sampling_anisotropic():
    """–¢–µ—Å—Ç –Ω–∞ nested sampling —Å –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –∏–∑–º–µ—Ä–≤–∞–Ω–∏—è"""
    
    print("\nüß™ –¢–ï–°–¢ –ù–ê NESTED SAMPLING –ê–ù–ò–ó–û–¢–†–û–ü–ï–ù")
    print("=" * 50)
    
    # –ú–∞–ª—ä–∫ —Ç–µ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    parameter_ranges = {
        'H0': (68.0, 74.0),
        'Omega_m': (0.25, 0.35),
        'epsilon_bao': (0.0, 0.05),
        'epsilon_cmb': (0.0, 0.03)
    }
    
    ns = OptimizedNestedSampling(
        parameter_names=list(parameter_ranges.keys()),
        parameter_ranges=parameter_ranges,
        nlive=50  # –ú–∞–ª–∫–æ –∑–∞ –±—ä—Ä–∑ —Ç–µ—Å—Ç
    )
    
    print(f"üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫—Ä–∞—Ç—ä–∫ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω —Ç–µ—Å—Ç...")
    start_time = time.time()
    
    try:
        # –°–∞–º–æ —Å–µ—Ä–∏–µ–Ω —Ä–µ–∂–∏–º –∑–∞ –ø–æ-—Å—Ç–∞–±–∏–ª–µ–Ω —Ç–µ—Å—Ç
        ns.run_fast_sampling(nlive=50, parallel=False, progress=False)
        
        runtime = time.time() - start_time
        
        print(f"‚úÖ –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω —Ç–µ—Å—Ç –∑–∞–≤—ä—Ä—à–µ–Ω –∑–∞ {runtime:.1f}s")
        print(f"üìä Log-evidence: {ns.log_evidence:.3f} ¬± {ns.log_evidence_err:.3f}")
        print(f"üìà Samples: {len(ns.posterior_samples)}")
        
        # –ö—Ä–∞—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ns.quick_summary()
        
        return ns
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω —Ç–µ—Å—Ç: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç"""
    
    print("üéØ –ü–™–õ–ï–ù –¢–ï–°–¢ –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ï–ù BAO –ê–ù–ê–õ–ò–ó")
    print("=" * 70)
    
    # –°—Ç—ä–ø–∫–∞ 1: –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
    print("\nüìè –°–¢–™–ü–ö–ê 1: –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è")
    bao_measures = test_anisotropic_distance_calculations()
    
    # –°—Ç—ä–ø–∫–∞ 2: –¢–µ—Å—Ç –Ω–∞ likelihood
    print("\n‚öñÔ∏è –°–¢–™–ü–ö–ê 2: –¢–µ—Å—Ç –Ω–∞ likelihood")
    loglike_aniso, chi2_analysis = test_anisotropic_likelihood()
    
    # –°—Ç—ä–ø–∫–∞ 3: –¢–µ—Å—Ç –Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
    print("\nüìä –°–¢–™–ü–ö–ê 3: –¢–µ—Å—Ç –Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏")
    aniso_cov = test_covariance_matrices()
    
    # –°—Ç—ä–ø–∫–∞ 4: –¢–µ—Å—Ç –Ω–∞ nested sampling
    print("\nüéØ –°–¢–™–ü–ö–ê 4: –¢–µ—Å—Ç –Ω–∞ nested sampling")
    ns_result = test_nested_sampling_anisotropic()
    
    # –†–µ–∑—é–º–µ
    print("\n" + "=" * 70)
    print("üìã –†–ï–ó–Æ–ú–ï –ù–ê –ê–ù–ò–ó–û–¢–†–û–ü–ù–ò–Ø –¢–ï–°–¢")
    print("=" * 70)
    
    print(f"‚úÖ –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è: –†–∞–±–æ—Ç—è—Ç")
    print(f"‚úÖ –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∞ likelihood: {loglike_aniso:.2f}")
    print(f"‚úÖ Chi-squared: {chi2_analysis['reduced_chi2_combined']:.2f}")
    print(f"‚úÖ –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏: –†–∞–±–æ—Ç—è—Ç")
    
    if ns_result:
        print(f"‚úÖ Nested sampling: Log-evidence {ns_result.log_evidence:.3f}")
        print(f"üéØ –ê–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏—è—Ç BAO –∞–Ω–∞–ª–∏–∑ –µ –ì–û–¢–û–í –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ!")
    else:
        print(f"‚ùå Nested sampling: –ù–µ—É—Å–ø–µ—à–µ–Ω")
        print(f"‚ö†Ô∏è  –ù—É–∂–Ω–∞ –µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞")
    
    print(f"\nüöÄ –ì–æ—Ç–æ–≤ –∑–∞ **–°—Ç—ä–ø–∫–∞ 4**: –¢–µ—Å—Ç –Ω–∞ –ø—ä–ª–µ–Ω –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–µ–Ω –∞–Ω–∞–ª–∏–∑")


if __name__ == "__main__":
    main() 