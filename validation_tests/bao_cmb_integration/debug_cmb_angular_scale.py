#!/usr/bin/env python3
"""
DEBUG CMB Angular Scale
=======================

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ –∑–∞ CMB Œ∏_s –ø—Ä–æ–±–ª–µ–º–∞:
- –ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ: Œ∏_s = 0.010409
- –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ: Œ∏_s = 6.621363 (637x –ø–æ-–≥–æ–ª—è–º–æ!)
- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∞ –≥—Ä–µ—à–∫–∞: -63,510.7%
"""

import numpy as np
from no_lambda_cosmology import NoLambdaCosmology
from observational_data import CMBObservationalData
from scipy.integrate import quad

def debug_cmb_angular_scale():
    """–î–µ—Ç–∞–π–ª–µ–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ –Ω–∞ CMB angular scale"""
    
    print("üîç DEBUG CMB ANGULAR SCALE")
    print("=" * 50)
    
    # Best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    params = {
        'H0': 68.4557,
        'Omega_m': 0.2576,
        'epsilon_bao': 0.0492,
        'epsilon_cmb': 0.0225
    }
    
    print(f"üìä Best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {params}")
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(
        H0=params['H0'],
        Omega_m=params['Omega_m'],
        epsilon_bao=params['epsilon_bao'],
        epsilon_cmb=params['epsilon_cmb']
    )
    
    print(f"\nüìä –ö–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"  H‚ÇÄ = {cosmo.H0:.2f} km/s/Mpc")
    print(f"  Œ©‚Çò = {cosmo.Omega_m:.4f}")
    print(f"  Œ©·µ¶ = {cosmo.Omega_b:.4f}")
    print(f"  Œ©·µ£ = {cosmo.Omega_r:.2e}")
    print(f"  Œ©‚Çñ = {cosmo.Omega_k:.4f} üö® –û–ì–†–û–ú–ù–û!")
    print(f"  z_drag = {cosmo.z_drag:.1f}")
    
    # CMB –¥–∞–Ω–Ω–∏
    cmb_data = CMBObservationalData()
    cmb_obs = cmb_data.get_acoustic_scale()
    
    print(f"\nüìä CMB –¥–∞–Ω–Ω–∏:")
    print(f"  –ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ Œ∏_s = {cmb_obs['theta_s']:.6f} rad")
    print(f"  –ì—Ä–µ—à–∫–∞ = {cmb_obs['theta_s_err']:.2e} rad")
    
    # –°—Ç—ä–ø–∫–∞ –ø–æ —Å—Ç—ä–ø–∫–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
    print(f"\nüîç –°–¢–™–ü–ö–ê –ü–û –°–¢–™–ü–ö–ê –ò–ó–ß–ò–°–õ–ï–ù–ò–ï")
    print("=" * 50)
    
    # 1. Sound horizon
    z_cmb = 1090.0
    r_s = cosmo.sound_horizon_scale(cosmo.z_drag)
    print(f"1. Sound horizon r_s = {r_s:.2f} Mpc")
    
    # 2. Angular diameter distance - –¥–µ—Ç–∞–π–ª–Ω–æ
    print(f"2. Angular diameter distance D_A(z={z_cmb}):")
    
    # Comoving distance
    def integrand(z):
        H_z = cosmo.hubble_function(z)
        return (299792.458 / 1000) / H_z  # km/s -> Mpc
    
    comoving_dist, _ = quad(integrand, 0, z_cmb)
    print(f"   Comoving distance D_M = {comoving_dist:.1f} Mpc")
    
    # Open universe correction
    Omega_k = cosmo.Omega_k
    if abs(Omega_k) > 1e-6:
        sqrt_Ok = np.sqrt(abs(Omega_k))
        DH = (299792.458 / 1000) / cosmo.H0  # Hubble distance
        print(f"   ‚àö|Œ©‚Çñ| = {sqrt_Ok:.4f}")
        print(f"   Hubble distance D_H = {DH:.1f} Mpc")
        
        if Omega_k > 0:  # Open universe
            argument = sqrt_Ok * comoving_dist / DH
            print(f"   Sinh argument = {argument:.4f}")
            transverse_dist = DH / sqrt_Ok * np.sinh(argument)
            print(f"   Transverse distance D_T = {transverse_dist:.1f} Mpc")
        else:
            argument = sqrt_Ok * comoving_dist / DH
            transverse_dist = DH / sqrt_Ok * np.sin(argument)
            print(f"   Transverse distance D_T = {transverse_dist:.1f} Mpc")
    else:
        transverse_dist = comoving_dist
        print(f"   Transverse distance D_T = {transverse_dist:.1f} Mpc (–ø–ª–æ—Å–∫–∞)")
    
    # Angular diameter distance
    D_A = transverse_dist / (1 + z_cmb)
    print(f"   Angular diameter distance D_A = {D_A:.1f} Mpc")
    
    # 3. Angular scale
    theta_s_theory = r_s / D_A
    print(f"3. Angular scale Œ∏_s = r_s/D_A = {theta_s_theory:.6f} rad")
    
    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï:")
    print(f"  –ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ: Œ∏_s = {cmb_obs['theta_s']:.6f} rad")
    print(f"  –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ:  Œ∏_s = {theta_s_theory:.6f} rad")
    print(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ: theory/obs = {theta_s_theory/cmb_obs['theta_s']:.1f}")
    print(f"  –†–∞–∑–ª–∏–∫–∞: {abs(theta_s_theory - cmb_obs['theta_s']):.6f} rad")
    
    # 5. –î–∏–∞–≥–Ω–æ–∑–∞
    print(f"\nüö® –î–ò–ê–ì–ù–û–ó–ê:")
    if theta_s_theory > 100 * cmb_obs['theta_s']:
        print("  –ö–†–ò–¢–ò–ß–ù–û: –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ >100x –ø–æ-–≥–æ–ª—è–º–∞!")
        print("  –ü—Ä–æ–±–ª–µ–º—ä—Ç –µ –Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–æ –≤:")
        print("    - Open universe –≥–µ–æ–º–µ—Ç—Ä–∏—è—Ç–∞ (Œ©‚Çñ = 0.6849)")
        print("    - Angular diameter distance –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ")
        print("    - Sinh —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –∑–∞ open universe")
    
    # 6. –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüîç –†–ï–§–ï–†–ï–ù–¢–ù–ê –ü–†–û–í–ï–†–ö–ê:")
    print("  –¢–∏–ø–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ ŒõCDM:")
    print("    - r_s ‚âà 147 Mpc")
    print("    - D_A(1090) ‚âà 14,000 Mpc")
    print("    - Œ∏_s ‚âà 0.0104 rad")
    
    print(f"  –ù–∞—à–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏:")
    print(f"    - r_s = {r_s:.1f} Mpc ({'‚úÖ' if 140 < r_s < 150 else '‚ùå'})")
    print(f"    - D_A(1090) = {D_A:.1f} Mpc ({'‚úÖ' if 13000 < D_A < 15000 else '‚ùå'})")
    print(f"    - Œ∏_s = {theta_s_theory:.6f} rad ({'‚úÖ' if 0.009 < theta_s_theory < 0.012 else '‚ùå'})")
    
    # 7. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ —Ä–µ—à–µ–Ω–∏–µ
    print(f"\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ó–ê –†–ï–®–ï–ù–ò–ï:")
    print("  1. –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ Œ©‚Çñ –¥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ (-0.1 < Œ©‚Çñ < 0.1)")
    print("  2. –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ flat universe –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ")
    print("  3. –ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ D_A –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ—Ç–æ –∑–∞ extreme curvature")
    print("  4. –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ D_A")
    
    return {
        'r_s': r_s,
        'D_A': D_A,
        'theta_s_theory': theta_s_theory,
        'theta_s_obs': cmb_obs['theta_s'],
        'ratio': theta_s_theory/cmb_obs['theta_s'],
        'Omega_k': Omega_k,
        'comoving_dist': comoving_dist,
        'transverse_dist': transverse_dist
    }

def test_flat_universe_approximation():
    """–¢–µ—Å—Ç —Å flat universe –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ"""
    
    print(f"\nüß™ –¢–ï–°–¢ –° FLAT UNIVERSE –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï")
    print("=" * 50)
    
    # –°—ä—â–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –Ω–æ —Å Œ©‚Çñ = 0
    params = {
        'H0': 68.4557,
        'Omega_m': 0.2576,
        'epsilon_bao': 0.0492,
        'epsilon_cmb': 0.0225
    }
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–Ω–æ flat universe
    cosmo = NoLambdaCosmology(
        H0=params['H0'],
        Omega_m=params['Omega_m'],
        epsilon_bao=params['epsilon_bao'],
        epsilon_cmb=params['epsilon_cmb']
    )
    
    # Temporarily override Omega_k
    cosmo.Omega_k = 0.0  # Flat universe
    cosmo.Omega_Lambda = 1.0 - cosmo.Omega_m - cosmo.Omega_r  # Compensate
    
    print(f"üìä Flat universe –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"  Œ©‚Çñ = {cosmo.Omega_k:.1f} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–Ω–æ)")
    print(f"  Œ©Œõ = {cosmo.Omega_Lambda:.4f} (–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è)")
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Œ∏_s
    z_cmb = 1090.0
    r_s = cosmo.sound_horizon_scale(cosmo.z_drag)
    D_A = cosmo.angular_diameter_distance(z_cmb)
    theta_s_flat = r_s / D_A
    
    print(f"  r_s = {r_s:.1f} Mpc")
    print(f"  D_A(1090) = {D_A:.1f} Mpc")
    print(f"  Œ∏_s = {theta_s_flat:.6f} rad")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    cmb_data = CMBObservationalData()
    cmb_obs = cmb_data.get_acoustic_scale()
    
    print(f"\nüìä Flat universe —Ä–µ–∑—É–ª—Ç–∞—Ç–∏:")
    print(f"  –ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ: Œ∏_s = {cmb_obs['theta_s']:.6f} rad")
    print(f"  Flat theory: Œ∏_s = {theta_s_flat:.6f} rad")
    print(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ: theory/obs = {theta_s_flat/cmb_obs['theta_s']:.1f}")
    
    improvement = theta_s_flat < 0.1  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ
    print(f"  –†–µ–∑—É–ª—Ç–∞—Ç: {'‚úÖ –ü–û–î–û–ë–†–ï–ù–ò–ï' if improvement else '‚ùå –ù–ï –ü–û–ú–ê–ì–ê'}")
    
    return theta_s_flat

if __name__ == "__main__":
    print("üö® DEBUG CMB ANGULAR SCALE PROBLEM")
    print("üéØ –¶–µ–ª: –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–∞—Ç–∞ –∑–∞ Œ∏_s –ø—Ä–æ–±–ª–µ–º–∞")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–µ–Ω –¥–µ–±—ä–≥–≤–∞–Ω–µ
    results = debug_cmb_angular_scale()
    
    # –¢–µ—Å—Ç —Å flat universe
    theta_s_flat = test_flat_universe_approximation()
    
    print(f"\nüéâ –î–ï–ë–™–ì–í–ê–ù–ï–¢–û –ó–ê–í–™–†–®–ò!")
    print(f"üìã –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∑–∞ –≤—ä–∑–º–æ–∂–Ω–∏ —Ä–µ—à–µ–Ω–∏—è") 