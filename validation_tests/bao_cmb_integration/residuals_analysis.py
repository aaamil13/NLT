#!/usr/bin/env python3
"""
Residuals Analysis
==================

–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏ –∑–∞ œá¬≤ = 223.749

–¶–µ–ª:
1. –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏ –æ–±–ª–∞—Å—Ç–∏
2. –ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO –∏ CMB –æ—Å—Ç–∞—Ç—ä—Ü–∏
3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è
4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.optimize import minimize
from typing import Dict, List, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from observational_data import BAOObservationalData, CMBObservationalData, LikelihoodFunctions
from no_lambda_cosmology import NoLambdaCosmology
from nested_sampling_analysis import OptimizedNestedSampling

class ResidualsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏ –∑–∞ No-Lambda –º–æ–¥–µ–ª"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Residuals Analyzer")
        
        # –ó–∞—Ä–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
        self.bao_data = BAOObservationalData()
        self.cmb_data = CMBObservationalData()
        
        # Best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç nested sampling
        self.best_fit_params = {
            'H0': 68.4557,
            'Omega_m': 0.2576,
            'epsilon_bao': 0.0492,
            'epsilon_cmb': 0.0225
        }
        
        print(f"üìä Best-fit –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {self.best_fit_params}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–æ–¥–µ–ª
        self.cosmology = NoLambdaCosmology(
            H0=self.best_fit_params['H0'],
            Omega_m=self.best_fit_params['Omega_m'],
            epsilon_bao=self.best_fit_params['epsilon_bao'],
            epsilon_cmb=self.best_fit_params['epsilon_cmb']
        )
        
        # Likelihood —Ñ—É–Ω–∫—Ü–∏—è
        self.likelihood = LikelihoodFunctions(self.bao_data, self.cmb_data)
        
        print("‚úÖ Residuals Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω")
    
    def analyze_bao_residuals(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO –æ—Å—Ç–∞—Ç—ä—Ü–∏"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê BAO –û–°–¢–ê–¢–™–¶–ò")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ BAO –¥–∞–Ω–Ω–∏
        bao_obs = self.bao_data.get_combined_data()
        
        # –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –≤ combined —Ñ–æ—Ä–º–∞—Ç
        z = bao_obs['redshifts']
        DV_rs_obs = bao_obs['DV_rs']
        DV_rs_err = bao_obs['DV_rs_err']
        
        print(f"\nüìä –û–±—â–æ BAO —Ç–æ—á–∫–∏: {len(z)}")
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        DV_rs_theory = []
        for zi in z:
            # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ D_V/r_s
            D_A = self.cosmology.angular_diameter_distance(zi)
            H_z = self.cosmology.hubble_function(zi)
            D_H = 299792.458 / H_z  # Hubble distance
            D_V = (zi * D_A**2 * D_H)**(1/3)  # Dilation scale
            r_s = self.cosmology.sound_horizon_scale()
            DV_rs_theory.append(D_V / r_s)
        
        DV_rs_theory = np.array(DV_rs_theory)
        
        # –û—Å—Ç–∞—Ç—ä—Ü–∏
        residuals = DV_rs_obs - DV_rs_theory
        normalized_residuals = residuals / DV_rs_err
        
        # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
        predictions = DV_rs_theory
        observed = DV_rs_obs
        errors = DV_rs_err
        redshifts = z
        
        # –î–µ—Ç–∞–π–ª–µ–Ω –∏–∑—Ö–æ–¥
        for i, zi in enumerate(z):
            print(f"  z={zi:.3f}: obs={DV_rs_obs[i]:.3f}, theory={DV_rs_theory[i]:.3f}, "
                  f"residual={residuals[i]:.3f} ({residuals[i]/DV_rs_obs[i]*100:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        chi2_individual = normalized_residuals**2
        
        print(f"\nüìä BAO –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        print(f"–ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(residuals)}")
        print(f"–°—Ä–µ–¥–Ω–∏ –æ—Å—Ç–∞—Ç—ä—Ü–∏: {np.mean(residuals):.3f}")
        print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(residuals):.3f}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –æ—Å—Ç–∞—Ç—ä–∫: {np.max(np.abs(residuals)):.3f}")
        print(f"BAO œá¬≤: {np.sum(chi2_individual):.3f}")
        
        # –ù–∞–π-–ø—Ä–æ–±–ª–µ–º–Ω–∏ —Ç–æ—á–∫–∏
        problematic_indices = np.argsort(chi2_individual)[-3:]  # –¢–æ–ø 3 –Ω–∞–π-–ª–æ—à–∏
        print(f"\nüö® –ù–ê–ô-–ü–†–û–ë–õ–ï–ú–ù–ò –¢–û–ß–ö–ò:")
        for i in problematic_indices:
            print(f"  z={redshifts[i]:.3f}: œá¬≤={chi2_individual[i]:.1f}, "
                  f"residual={residuals[i]:.3f} ({residuals[i]/observed[i]*100:.1f}%)")
        
        return {
            'redshifts': redshifts,
            'observed': observed,
            'predicted': predictions,
            'errors': errors,
            'residuals': residuals,
            'normalized_residuals': normalized_residuals,
            'chi2_individual': chi2_individual,
            'chi2_total': np.sum(chi2_individual),
            'problematic_indices': problematic_indices
        }
    
    def analyze_cmb_residuals(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB –æ—Å—Ç–∞—Ç—ä—Ü–∏"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê CMB –û–°–¢–ê–¢–™–¶–ò")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ CMB –¥–∞–Ω–Ω–∏
        cmb_obs = self.cmb_data.get_acoustic_scale()
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        theta_s_theory = self.cosmology.cmb_angular_scale()
        theta_s_obs = cmb_obs['theta_s']
        theta_s_err = cmb_obs['theta_s_err']
        
        # –û—Å—Ç–∞—Ç—ä—Ü–∏
        residual = theta_s_obs - theta_s_theory
        normalized_residual = residual / theta_s_err
        chi2_cmb = normalized_residual**2
        
        print(f"üìä CMB –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        print(f"–ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ theta_s: {theta_s_obs:.6f}")
        print(f"–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ theta_s: {theta_s_theory:.6f}")
        print(f"–û—Å—Ç–∞—Ç—ä–∫: {residual:.6f}")
        print(f"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –æ—Å—Ç–∞—Ç—ä–∫: {residual/theta_s_obs*100:.1f}%")
        print(f"–ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω –æ—Å—Ç–∞—Ç—ä–∫: {normalized_residual:.1f}")
        print(f"CMB œá¬≤: {chi2_cmb:.1f}")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if abs(normalized_residual) > 3:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: >3œÉ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ!")
        elif abs(normalized_residual) > 2:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: >2œÉ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
        else:
            print("‚úÖ –ü—Ä–∏–µ–º–ª–∏–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
        
        return {
            'theta_s_obs': theta_s_obs,
            'theta_s_theory': theta_s_theory,
            'theta_s_err': theta_s_err,
            'residual': residual,
            'normalized_residual': normalized_residual,
            'chi2_cmb': chi2_cmb
        }
    
    def statistical_tests(self, bao_results: Dict, cmb_results: Dict) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏"""
        print("\nüîç –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –¢–ï–°–¢–û–í–ï")
        print("=" * 40)
        
        # BAO —Ç–µ—Å—Ç–æ–≤–µ
        bao_residuals = bao_results['normalized_residuals']
        
        # –ù–æ—Ä–º–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç
        shapiro_stat, shapiro_p = stats.shapiro(bao_residuals)
        print(f"üìä Shapiro-Wilk —Ç–µ—Å—Ç (–Ω–æ—Ä–º–∞–ª–Ω–æ—Å—Ç):")
        print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {shapiro_stat:.3f}")
        print(f"  P-value: {shapiro_p:.6f}")
        print(f"  –†–µ–∑—É–ª—Ç–∞—Ç: {'–ù–æ—Ä–º–∞–ª–Ω–æ' if shapiro_p > 0.05 else '–ù–ï –Ω–æ—Ä–º–∞–ª–Ω–æ'}")
        
        # Autocorrelation —Ç–µ—Å—Ç
        # –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ z –∑–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–ª–∞—Ü–∏—è
        sorted_indices = np.argsort(bao_results['redshifts'])
        sorted_residuals = bao_residuals[sorted_indices]
        
        # Durbin-Watson —Ç–µ—Å—Ç
        def durbin_watson(residuals):
            diff = np.diff(residuals)
            return np.sum(diff**2) / np.sum(residuals**2)
        
        dw_stat = durbin_watson(sorted_residuals)
        print(f"\nüìä Durbin-Watson —Ç–µ—Å—Ç (–∞–≤—Ç–æ–∫–æ—Ä–µ–ª–∞—Ü–∏—è):")
        print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dw_stat:.3f}")
        print(f"  –û—á–∞–∫–≤–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: ~2.0")
        print(f"  –†–µ–∑—É–ª—Ç–∞—Ç: {'–î–æ–±—Ä–µ' if 1.5 < dw_stat < 2.5 else '–ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ'}")
        
        # Runs —Ç–µ—Å—Ç –∑–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç
        median_residual = np.median(bao_residuals)
        runs, n1, n2 = 0, 0, 0
        for i, res in enumerate(bao_residuals):
            if res > median_residual:
                n1 += 1
                if i == 0 or bao_residuals[i-1] <= median_residual:
                    runs += 1
            else:
                n2 += 1
                if i == 0 or bao_residuals[i-1] > median_residual:
                    runs += 1
        
        expected_runs = (2 * n1 * n2) / (n1 + n2) + 1
        print(f"\nüìä Runs —Ç–µ—Å—Ç (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç):")
        print(f"  Runs: {runs}")
        print(f"  –û—á–∞–∫–≤–∞–Ω–∏ runs: {expected_runs:.1f}")
        print(f"  –†–µ–∑—É–ª—Ç–∞—Ç: {'–°–ª—É—á–∞–π–Ω–æ' if abs(runs - expected_runs) < 2 else '–ù–µ—Å–ª—É—á–∞–π–Ω–æ'}")
        
        return {
            'shapiro_stat': shapiro_stat,
            'shapiro_p': shapiro_p,
            'durbin_watson': dw_stat,
            'runs': runs,
            'expected_runs': expected_runs
        }
    
    def identify_problems(self, bao_results: Dict, cmb_results: Dict) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏"""
        print("\nüîç –ò–î–ï–ù–¢–ò–§–ò–¶–ò–†–ê–ù–ï –ù–ê –ü–†–û–ë–õ–ï–ú–ò")
        print("=" * 40)
        
        problems = []
        
        # BAO –ø—Ä–æ–±–ª–µ–º–∏
        if bao_results['chi2_total'] > 20:  # –û—á–∞–∫–≤–∞–º–µ ~10 –∑–∞ 10 —Ç–æ—á–∫–∏
            problems.append(f"BAO œá¬≤ = {bao_results['chi2_total']:.1f} >> 10 (–æ—á–∞–∫–≤–∞–Ω–æ)")
        
        # –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        mean_residual = np.mean(bao_results['residuals'])
        if abs(mean_residual) > 0.5:
            problems.append(f"–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ BAO: {mean_residual:.3f}")
        
        # –ì–æ–ª–µ–º–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è  
        max_chi2 = np.max(bao_results['chi2_individual'])
        if max_chi2 > 10:
            problems.append(f"–û–≥—Ä–æ–º–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–æ BAO œá¬≤ = {max_chi2:.1f}")
        
        # CMB –ø—Ä–æ–±–ª–µ–º–∏
        if abs(cmb_results['normalized_residual']) > 2:
            problems.append(f"CMB –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {cmb_results['normalized_residual']:.1f}œÉ")
        
        # Redshift –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç
        z_residuals = []
        for i, z in enumerate(bao_results['redshifts']):
            z_residuals.append((z, bao_results['normalized_residuals'][i]))
        
        z_residuals.sort()
        low_z_residuals = [res for z, res in z_residuals if z < 0.5]
        high_z_residuals = [res for z, res in z_residuals if z > 1.0]
        
        if len(low_z_residuals) > 0 and len(high_z_residuals) > 0:
            low_z_mean = np.mean(low_z_residuals)
            high_z_mean = np.mean(high_z_residuals)
            if abs(low_z_mean - high_z_mean) > 1:
                problems.append(f"Redshift –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç: low-z={low_z_mean:.1f}, high-z={high_z_mean:.1f}")
        
        print(f"üö® –ù–ê–ú–ï–†–ï–ù–ò –ü–†–û–ë–õ–ï–ú–ò ({len(problems)}):")
        for i, problem in enumerate(problems, 1):
            print(f"  {i}. {problem}")
        
        return problems
    
    def suggest_improvements(self, problems: List[str]) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        print("\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ó–ê –ü–û–î–û–ë–†–ï–ù–ò–Ø")
        print("=" * 40)
        
        suggestions = []
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏—Ç–µ
        if any("BAO œá¬≤" in p for p in problems):
            suggestions.append("–ü—Ä–µ—Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ –Ω–∞ BAO likelihood —Ñ—É–Ω–∫—Ü–∏—è")
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ BAO –¥–∞–Ω–Ω–∏ –∑–∞ outliers")
            suggestions.append("–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ-—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∏ –≥—Ä–µ—à–∫–∏")
        
        if any("CMB –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ" in p for p in problems):
            suggestions.append("–ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ CMB angular scale –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ recombination redshift")
            suggestions.append("–ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ sound horizon –∑–∞ open universe")
        
        if any("–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ" in p for p in problems):
            suggestions.append("–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ bias –ø–∞—Ä–∞–º–µ—Ç—ä—Ä")
            suggestions.append("–ö–∞–ª–∏–±—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        
        if any("Redshift –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç" in p for p in problems):
            suggestions.append("–ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ redshift –µ–≤–æ–ª—é—Ü–∏—è")
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–∏ –µ—Ñ–µ–∫—Ç–∏")
            suggestions.append("–ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ –∞–Ω–∏–∑–æ—Ç—Ä–æ–ø–Ω–∏ –µ—Ñ–µ–∫—Ç–∏")
        
        if any("–û–≥—Ä–æ–º–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–æ" in p for p in problems):
            suggestions.append("–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ problematic data points")
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ individual survey systematics")
            suggestions.append("–í—ä–∑–º–æ–∂–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ outliers")
        
        # –û–±—â–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions.append("–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ MCMC –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä estimation")
        suggestions.append("Bootstrap –∞–Ω–∞–ª–∏–∑ –∑–∞ uncertainty estimation")
        suggestions.append("Cross-validation —Å –Ω–µ–∑–∞–≤–∏—Å–∏–º–∏ –¥–∞–Ω–Ω–∏")
        
        print(f"üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø ({len(suggestions)}):")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"  {i}. {suggestion}")
        
        return suggestions
    
    def create_residuals_plots(self, bao_results: Dict, cmb_results: Dict):
        """–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ plots –∑–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏"""
        print("\nüìà –°–™–ó–î–ê–í–ê–ù–ï –ù–ê RESIDUALS PLOTS")
        print("=" * 40)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ plot —Å—Ç–∏–ª
        plt.style.use('seaborn-v0_8')
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Residuals Analysis: No-Œõ Cosmology', fontsize=16, fontweight='bold')
        
        # 1. BAO –æ—Å—Ç–∞—Ç—ä—Ü–∏ vs redshift
        ax1 = axes[0, 0]
        ax1.errorbar(bao_results['redshifts'], bao_results['residuals'], 
                    yerr=bao_results['errors'], fmt='o', capsize=5, alpha=0.7)
        ax1.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        ax1.set_xlabel('Redshift z')
        ax1.set_ylabel('Residuals (obs - theory)')
        ax1.set_title('BAO Residuals vs Redshift')
        ax1.grid(True, alpha=0.3)
        
        # 2. Normalized –æ—Å—Ç–∞—Ç—ä—Ü–∏
        ax2 = axes[0, 1]
        ax2.scatter(bao_results['redshifts'], bao_results['normalized_residuals'], 
                   alpha=0.7, s=50)
        ax2.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        ax2.axhline(y=2, color='orange', linestyle=':', alpha=0.5, label='2œÉ')
        ax2.axhline(y=-2, color='orange', linestyle=':', alpha=0.5)
        ax2.axhline(y=3, color='red', linestyle=':', alpha=0.5, label='3œÉ')
        ax2.axhline(y=-3, color='red', linestyle=':', alpha=0.5)
        ax2.set_xlabel('Redshift z')
        ax2.set_ylabel('Normalized Residuals (œÉ)')
        ax2.set_title('Normalized BAO Residuals')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # 3. Q-Q plot –∑–∞ –Ω–æ—Ä–º–∞–ª–Ω–æ—Å—Ç
        ax3 = axes[1, 0]
        stats.probplot(bao_results['normalized_residuals'], dist="norm", plot=ax3)
        ax3.set_title('Q-Q Plot: Normality Test')
        ax3.grid(True, alpha=0.3)
        
        # 4. Histogram –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏
        ax4 = axes[1, 1]
        ax4.hist(bao_results['normalized_residuals'], bins=8, alpha=0.7, 
                density=True, edgecolor='black')
        
        # Overlay –Ω–æ—Ä–º–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        x = np.linspace(-4, 4, 100)
        ax4.plot(x, stats.norm.pdf(x, 0, 1), 'r-', linewidth=2, 
                label='Standard Normal')
        ax4.set_xlabel('Normalized Residuals')
        ax4.set_ylabel('Density')
        ax4.set_title('Residuals Distribution')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('residuals_analysis_plots.png', dpi=300, bbox_inches='tight')
        print("‚úÖ Plots –∑–∞–ø–∏—Å–∞–Ω–∏: residuals_analysis_plots.png")
        
        # CMB residuals info
        print(f"\nüìä CMB RESIDUALS INFO:")
        print(f"CMB œá¬≤: {cmb_results['chi2_cmb']:.1f}")
        print(f"CMB œÉ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {cmb_results['normalized_residual']:.1f}")
        
        return fig
    
    def save_results(self, bao_results: Dict, cmb_results: Dict, 
                    problems: List[str], suggestions: List[str]):
        """–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ"""
        print("\nüíæ –ó–ê–ü–ò–°–í–ê–ù–ï –ù–ê –†–ï–ó–£–õ–¢–ê–¢–ò–¢–ï")
        print("=" * 40)
        
        # Detailed results
        results_text = f"""
RESIDUALS ANALYSIS REPORT
========================

üéØ OBJECTIVE: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏ –∑–∞ œá¬≤ = 223.749

üìä SUMMARY STATISTICS:
- BAO œá¬≤: {bao_results['chi2_total']:.1f}
- CMB œá¬≤: {cmb_results['chi2_cmb']:.1f}  
- Total œá¬≤: {bao_results['chi2_total'] + cmb_results['chi2_cmb']:.1f}
- Reduced œá¬≤: {(bao_results['chi2_total'] + cmb_results['chi2_cmb']) / 10:.1f}

üìà BAO ANALYSIS:
- –ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(bao_results['residuals'])}
- –°—Ä–µ–¥–Ω–∏ –æ—Å—Ç–∞—Ç—ä—Ü–∏: {np.mean(bao_results['residuals']):.3f}
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(bao_results['residuals']):.3f}
- –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –æ—Å—Ç–∞—Ç—ä–∫: {np.max(np.abs(bao_results['residuals'])):.3f}

üìà CMB ANALYSIS:
- –ù–∞–±–ª—é–¥–∞–≤–∞–Ω–æ Œ∏‚Çõ: {cmb_results['theta_s_obs']:.6f}
- –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ Œ∏‚Çõ: {cmb_results['theta_s_theory']:.6f}
- –û—Å—Ç–∞—Ç—ä–∫: {cmb_results['residual']:.6f}
- –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω –æ—Å—Ç–∞—Ç—ä–∫: {cmb_results['normalized_residual']:.1f}œÉ

üö® IDENTIFIED PROBLEMS ({len(problems)}):
"""
        
        for i, problem in enumerate(problems, 1):
            results_text += f"{i}. {problem}\n"
        
        results_text += f"\nüí° SUGGESTED IMPROVEMENTS ({len(suggestions)}):\n"
        for i, suggestion in enumerate(suggestions, 1):
            results_text += f"{i}. {suggestion}\n"
        
        results_text += f"""
üîç DETAILED BAO RESIDUALS:
z     | Observed | Theory  | Residual | œá¬≤
------|----------|---------|----------|--------
"""
        
        for i, z in enumerate(bao_results['redshifts']):
            results_text += f"{z:.3f} | {bao_results['observed'][i]:8.3f} | {bao_results['predicted'][i]:7.3f} | {bao_results['residuals'][i]:8.3f} | {bao_results['chi2_individual'][i]:6.1f}\n"
        
        # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª
        with open('residuals_analysis_results.txt', 'w', encoding='utf-8') as f:
            f.write(results_text)
        
        # CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω–∏
        df = pd.DataFrame({
            'redshift': bao_results['redshifts'],
            'observed': bao_results['observed'],
            'predicted': bao_results['predicted'],
            'error': bao_results['errors'],
            'residual': bao_results['residuals'],
            'normalized_residual': bao_results['normalized_residuals'],
            'chi2_individual': bao_results['chi2_individual']
        })
        
        df.to_csv('bao_residuals_data.csv', index=False)
        
        print("‚úÖ –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–∏:")
        print("   üìã residuals_analysis_results.txt")
        print("   üìä bao_residuals_data.csv")
        print("   üìà residuals_analysis_plots.png")

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç RESIDUALS ANALYSIS")
    print("üéØ –¶–µ–ª: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏ –∑–∞ œá¬≤ = 223.749")
    print("=" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ResidualsAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ BAO –æ—Å—Ç–∞—Ç—ä—Ü–∏
    bao_results = analyzer.analyze_bao_residuals()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ CMB –æ—Å—Ç–∞—Ç—ä—Ü–∏
    cmb_results = analyzer.analyze_cmb_residuals()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
    stat_tests = analyzer.statistical_tests(bao_results, cmb_results)
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏
    problems = analyzer.identify_problems(bao_results, cmb_results)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è
    suggestions = analyzer.suggest_improvements(problems)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ plots
    analyzer.create_residuals_plots(bao_results, cmb_results)
    
    # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
    analyzer.save_results(bao_results, cmb_results, problems, suggestions)
    
    print("\nüéâ Residuals –∞–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–∏!")
    print("üìã –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –¥–µ—Ç–∞–π–ª–∏")

if __name__ == "__main__":
    main() 