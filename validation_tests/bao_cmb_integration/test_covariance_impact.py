#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—ä–∑–¥–µ–π—Å—Ç–≤–∏–µ—Ç–æ –Ω–∞ –ø—ä–ª–Ω–∏—Ç–µ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
—Å–ø—Ä—è–º–æ –¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏ –≤ BAO –∞–Ω–∞–ª–∏–∑–∞
"""

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import logging
from observational_data import create_bao_data, BAOObservationalData
from no_lambda_cosmology import NoLambdaCosmology
from nested_sampling_analysis import OptimizedNestedSampling
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_covariance_impact():
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —Å –¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∏ –∏ –ø—ä–ª–Ω–∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
    """
    
    print("ÔøΩÔøΩ –¢–ï–°–¢–í–ê–ù–ï –ù–ê –í–™–ó–î–ï–ô–°–¢–í–ò–ï–¢–û –ù–ê –ö–û–í–ê–†–ò–ê–¶–ò–û–ù–ù–ò–¢–ï –ú–ê–¢–†–ò–¶–ò")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    H0 = 72.0
    Omega_m = 0.30
    epsilon_bao = 0.01
    epsilon_cmb = 0.01
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
    cosmo = NoLambdaCosmology(H0=H0, Omega_m=Omega_m, epsilon_bao=epsilon_bao, epsilon_cmb=epsilon_cmb)
    
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
    try:
        z_bao, DV_rs_obs, DV_rs_err, covariance_matrix = create_bao_data()
        print(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ BAO –¥–∞–Ω–Ω–∏: {len(z_bao)} —Ç–æ—á–∫–∏")
        
        if covariance_matrix is not None:
            print(f"‚úÖ –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {covariance_matrix.shape}")
            has_full_covariance = True
        else:
            print("‚ö†Ô∏è  –ù—è–º–∞ –ø—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ - –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∞")
            has_full_covariance = False
            
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏: {e}")
        return
    
    # –ú–æ–¥–µ–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    DV_rs_model = []
    C_KM_S = 299792.458  # km/s
    
    for z in z_bao:
        D_A = cosmo.angular_diameter_distance(z)
        H_z = cosmo.hubble_function(z)
        D_H = C_KM_S / H_z
        D_V = (z * D_A**2 * D_H)**(1/3.0)
        r_s = cosmo.sound_horizon_scale()
        
        DV_rs_model.append(D_V / r_s)
    
    DV_rs_model = np.array(DV_rs_model)
    residuals = DV_rs_obs - DV_rs_model
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ù–ê RESIDUALS:")
    print(f"   –°—Ä–µ–¥–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.mean(residuals):.4f}")
    print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(residuals):.4f}")
    print(f"   –ú–∏–Ω/–ú–∞–∫—Å: {np.min(residuals):.4f} / {np.max(residuals):.4f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ œá¬≤ –∏–∑—á–∏—Å–ª–∞–Ω–∏—è
    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê œá¬≤ –ò–ó–ß–ò–°–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    
    # –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞ œá¬≤
    chi2_diagonal = np.sum((residuals / DV_rs_err)**2)
    print(f"üìà –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞ œá¬≤: {chi2_diagonal:.2f}")
    print(f"üìà Reduced œá¬≤ (–¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∞): {chi2_diagonal/len(residuals):.2f}")
    
    # –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ œá¬≤
    if has_full_covariance:
        try:
            cov_inv = np.linalg.inv(covariance_matrix)
            chi2_full = residuals.T @ cov_inv @ residuals
            print(f"üìà –ü—ä–ª–Ω–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ œá¬≤: {chi2_full:.2f}")
            print(f"üìà Reduced œá¬≤ (–ø—ä–ª–Ω–∞): {chi2_full/len(residuals):.2f}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            improvement = (chi2_diagonal - chi2_full) / chi2_diagonal * 100
            print(f"üìä –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ: {improvement:.1f}%")
            
            if improvement > 0:
                print("‚úÖ –ü—ä–ª–Ω–∞—Ç–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–≤–∞ –ø–æ-–¥–æ–±—Ä–æ —Ñ–∏—Ç–≤–∞–Ω–µ")
            else:
                print("‚ö†Ô∏è  –î–∏–∞–≥–æ–Ω–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–≤–∞ –ø–æ-–¥–æ–±—Ä–æ —Ñ–∏—Ç–≤–∞–Ω–µ")
                
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏
    if has_full_covariance:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ù–ê –ö–û–†–ï–õ–ê–¶–ò–ò–¢–ï:")
        print("-" * 30)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
        diagonal_cov = np.diag(DV_rs_err**2)
        correlation_matrix = covariance_matrix / np.sqrt(np.outer(np.diag(covariance_matrix), np.diag(covariance_matrix)))
        
        # –°—Ça—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏—Ç–µ
        off_diagonal = correlation_matrix[np.triu_indices_from(correlation_matrix, k=1)]
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.max(off_diagonal):.3f}")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª–Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.min(off_diagonal):.3f}")
        print(f"üìä –°—Ä–µ–¥–Ω–∞ –∫–æ—Ä–µ–ª–∞—Ü–∏—è: {np.mean(off_diagonal):.3f}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –∑–Ω–∞—á–∏–º–∏ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏
        significant_correlations = np.sum(np.abs(off_diagonal) > 0.1)
        total_correlations = len(off_diagonal)
        print(f"üìä –ó–Ω–∞—á–∏–º–∏ –∫–æ—Ä–µ–ª–∞—Ü–∏–∏ (|r|>0.1): {significant_correlations}/{total_correlations} ({significant_correlations/total_correlations*100:.1f}%)")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")

def test_nested_sampling_comparison():
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ nested sampling —Å –∏ –±–µ–∑ –ø—ä–ª–Ω–∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
    """
    
    print("\nüöÄ –°–†–ê–í–ù–ï–ù–ò–ï –ù–ê NESTED SAMPLING –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ù–û–°–¢")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –±—ä—Ä–∑ —Ç–µ—Å—Ç
    nlive_test = 50  # –ú–∞–ª–∫–æ –∑–∞ –±—ä—Ä–∑ —Ç–µ—Å—Ç
    
    # –¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–∞ –∫–æ–≤–∞—Ä–∏–∞–Ω—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏)
    print("\nüìä –¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞:")
    print("-" * 30)
    
    start_time = time.time()
    
    sampler = OptimizedNestedSampling(
        parameter_names=['H0', 'Omega_m', 'epsilon_bao', 'epsilon_cmb'],
        nlive=nlive_test
    )
    
    try:
        sampler.run_fast_sampling(nlive=nlive_test, parallel=False)
        
        runtime = time.time() - start_time
        
        print(f"‚è±Ô∏è  Runtime: {runtime:.1f}s")
        print(f"üìä Log-evidence: {sampler.log_evidence:.3f} ¬± {sampler.log_evidence_err:.3f}")
        
        if hasattr(sampler, 'use_full_bao_covariance'):
            if sampler.use_full_bao_covariance:
                print("‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –ø—ä–ª–Ω–∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏")
            else:
                print("‚ö†Ô∏è  –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–Ω–∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏")
                
        # –†–µ–∑—É–ª—Ç–∞—Ç–∏
        sampler.quick_summary()
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ nested sampling: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤—ä—Ä—à–∏!")

if __name__ == "__main__":
    test_covariance_impact()
    test_nested_sampling_comparison() 