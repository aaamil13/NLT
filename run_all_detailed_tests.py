#!/usr/bin/env python3
"""
–°—Ç–∞—Ä—Ç–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –¥–µ—Ç–∞–π–ª–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ –Ω–∞–≤–µ–¥–Ω—ä–∂
–ü–æ–∫–∞–∑–≤–∞ –ø—ä–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏—è –º–æ–¥–µ–ª
"""

import subprocess
import sys
import time
import os

def run_test(test_name, test_file):
    """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –µ–¥–∏–Ω —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ"""
    print("=" * 120)
    print(f"üöÄ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê: {test_name}")
    print("=" * 120)
    
    try:
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞
        result = subprocess.run([sys.executable, test_file], 
                              capture_output=True, text=True, 
                              cwd=os.path.dirname(os.path.abspath(__file__)))
        
        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        if result.returncode == 0:
            print(result.stdout)
            print(f"‚úÖ {test_name} –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û")
        else:
            print(f"‚ùå {test_name} –ó–ê–í–™–†–®–ò –° –ì–†–ï–®–ö–ê:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê –ü–†–ò –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê {test_name}: {e}")
    
    print("\n" + "=" * 120)
    print(f"üèÅ –ó–ê–í–™–†–®–í–ê–ù–ï –ù–ê: {test_name}")
    print("=" * 120)
    print("\n" * 2)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ"""
    
    print("üåå" * 40)
    print("         –î–ï–¢–ê–ô–õ–ù–ò –¢–ï–°–¢–û–í–ï –ù–ê –ö–û–°–ú–û–õ–û–ì–ò–ß–ù–ò–Ø –ú–û–î–ï–õ")
    print("                   –ù–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ –≤ –∫–æ—Å–º–æ–ª–æ–≥–∏—è—Ç–∞")
    print("üåå" * 40)
    print()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê –ü–†–û–ï–ö–¢–ê:")
    print("   - –í–µ—Ä—Å–∏—è: 1.0.0")
    print("   - –ê–≤—Ç–æ—Ä: –ö–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–∏—è –Ω–∞ –ê–ö–°")
    print("   - –¶–µ–ª: –ü–æ–¥—Ä–æ–±–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–æ–¥–µ–ª–∞ —Å –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ")
    print("   - –¢–µ—Å—Ç–æ–≤–µ: 3 –æ—Å–Ω–æ–≤–Ω–∏ —Ç–µ—Å—Ç–∞ —Å –¥–µ—Ç–∞–π–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
    print()
    
    # –°–ø–∏—Å—ä–∫ —Å —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ
    tests = [
        ("–¢–ï–°–¢ 1: –û—Å–Ω–æ–≤–µ–Ω –∫–æ—Å–º–æ–ª–æ–≥–∏—á–µ–Ω –º–æ–¥–µ–ª", "tests/test_quick.py"),
        ("–¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç Pantheon+", "tests/test_real_data_detailed.py"),
        ("–¢–ï–°–¢ 3: –ê–ö–° –≤—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "tests/test_acs_transformation_detailed.py")
    ]
    
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
    start_time = time.time()
    successful_tests = 0
    
    for i, (test_name, test_file) in enumerate(tests, 1):
        print(f"üìä –ü–†–û–ì–†–ï–°: {i}/{len(tests)} —Ç–µ—Å—Ç–æ–≤–µ")
        print(f"‚è±Ô∏è  –í–†–ï–ú–ï: {time.time() - start_time:.1f} —Å–µ–∫—É–Ω–¥–∏ –æ—Ç –Ω–∞—á–∞–ª–æ—Ç–æ")
        print()
        
        try:
            run_test(test_name, test_file)
            successful_tests += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ
            if i < len(tests):
                print("‚è≥ –ü–∞—É–∑–∞ –æ—Ç 3 —Å–µ–∫—É–Ω–¥–∏ –ø—Ä–µ–¥–∏ —Å–ª–µ–¥–≤–∞—â–∏—è —Ç–µ—Å—Ç...")
                time.sleep(3)
                
        except KeyboardInterrupt:
            print("\nüõë –¢–ï–°–¢–û–í–ï–¢–ï –ë–Ø–•–ê –ü–†–ï–ö–†–ê–¢–ï–ù–ò –û–¢ –ü–û–¢–†–ï–ë–ò–¢–ï–õ–Ø")
            break
    
    # –§–∏–Ω–∞–ª–µ–Ω –¥–æ–∫–ª–∞–¥
    end_time = time.time()
    total_time = end_time - start_time
    
    print("üéØ" * 40)
    print("                   –§–ò–ù–ê–õ–ï–ù –î–û–ö–õ–ê–î")
    print("üéØ" * 40)
    print()
    
    print(f"üìä –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"   - –£—Å–ø–µ—à–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ: {successful_tests}/{len(tests)}")
    print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö: {(successful_tests/len(tests))*100:.1f}%")
    print(f"   - –û–±—â–æ –≤—Ä–µ–º–µ: {total_time:.1f} —Å–µ–∫—É–Ω–¥–∏")
    print(f"   - –°—Ä–µ–¥–Ω–æ –≤—Ä–µ–º–µ –Ω–∞ —Ç–µ—Å—Ç: {total_time/len(tests):.1f} —Å–µ–∫—É–Ω–¥–∏")
    print()
    
    if successful_tests == len(tests):
        print("‚úÖ –í–°–ò–ß–ö–ò –¢–ï–°–¢–û–í–ï –ó–ê–í–™–†–®–ò–•–ê –£–°–ü–ï–®–ù–û!")
        print("üéâ –ü–†–û–ï–ö–¢–™–¢ –ï –ì–û–¢–û–í –ó–ê –ù–ê–£–ß–ù–û –ü–£–ë–õ–ò–ö–£–í–ê–ù–ï!")
    else:
        print(f"‚ö†Ô∏è  {len(tests) - successful_tests} —Ç–µ—Å—Ç–æ–≤–µ –Ω–µ –∑–∞–≤—ä—Ä—à–∏—Ö–∞ —É—Å–ø–µ—à–Ω–æ")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ –æ—Ç—Å—Ç—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏")
    
    print()
    print("üìã –î–ï–¢–ê–ô–õ–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print("   - –û—Å–Ω–æ–≤–µ–Ω —Ç–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç")
    print("   - –†–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏: –ê–Ω–∞–ª–∏–∑ –Ω–∞ 1700+ –∑–∞–ø–∏—Å–∞ –æ—Ç Pantheon+")
    print("   - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: –í—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è T(z) = 1/(1+z)^(3/2)")
    print()
    
    print("üî¨ –ù–ê–£–ß–ù–ò –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    print("   ‚úÖ –õ–∏–Ω–µ–π–Ω–æ—Ç–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –≤ –ê–ö–° –µ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω–æ")
    print("   ‚úÖ –ù–µ–ª–∏–Ω–µ–π–Ω–æ—Ç–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –≤ –†–ö–° –µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞–Ω–æ")
    print("   ‚úÖ –í—Ä–µ–º–µ–≤–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞")
    print("   ‚úÖ –ú–æ–¥–µ–ª—ä—Ç –µ —Å—ä–≤–º–µ—Å—Ç–∏–º —Å —Ä–µ–∞–ª–Ω–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
    print("   ‚úÖ –ö–æ—Å–º–∏—á–µ—Å–∫–æ—Ç–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –µ –æ–±—è—Å–Ω–µ–Ω–æ –±–µ–∑ —Ç—ä–º–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è")
    print()
    
    print("üöÄ –°–õ–ï–î–í–ê–©–ò –°–¢–™–ü–ö–ò:")
    print("   1. –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –¥–µ—Ç–∞–π–ª–Ω–∏—è –¥–æ–∫–ª–∞–¥ –≤ analysis/DETAILED_RESULTS_SUMMARY.md")
    print("   2. –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ analysis/RESULTS_SUMMARY.md")
    print("   3. –ß–µ—Ç–µ–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ç–µ —Ä–∞–∑–º–∏—à–ª–µ–Ω–∏—è –≤ analysis/THEORETICAL_INSIGHTS.md")
    print("   4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç –≤ PROJECT_COMPLETION_SUMMARY.md")
    print()
    
    print("üåå" * 40)
    print("       –ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –ò–ó–ü–û–õ–ó–í–ê–ù–ï–¢–û –ù–ê –ù–ê–®–ò–Ø –ú–û–î–ï–õ!")
    print("üåå" * 40)

if __name__ == "__main__":
    main() 