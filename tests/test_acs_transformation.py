#!/usr/bin/env python3
"""
–ë—ä—Ä–∑ —Ç–µ—Å—Ç –∑–∞ –º–æ–¥—É–ª–∞ –∑–∞ –ê–ö–° –≤—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

import numpy as np
import sys
import os

def test_import():
    """
    –¢–µ—Å—Ç –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–¥—É–ª–∞
    """
    try:
        from acs_time_transformation import (
            TimeTransformationModel, RedshiftTimeRelation, 
            ExpansionAnalyzer, ExpansionVisualizer
        )
        print("‚úì –ú–æ–¥—É–ª—ä—Ç —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ: {e}")
        return False

def test_time_transformation_model():
    """
    –¢–µ—Å—Ç –∑–∞ TimeTransformationModel
    """
    try:
        from acs_time_transformation import TimeTransformationModel
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥–∏
        z_test = np.array([0.1, 1.0, 5.0])
        T_z = model.time_transformation_factor(z_test)
        density = model.density_approximation(z_test)
        
        t_abs_test = np.array([1.0, 5.0, 10.0])
        t_rel = model.compute_relative_time(t_abs_test)
        a_abs = model.scale_factor_absolute(t_abs_test)
        a_rel = model.scale_factor_relative(t_rel)
        
        print("‚úì TimeTransformationModel —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ")
        print(f"  T(z) –ø—Ä–∏–º–µ—Ä–∏: {T_z}")
        print(f"  –ü–ª—ä—Ç–Ω–æ—Å—Ç –ø—Ä–∏–º–µ—Ä–∏: {density}")
        print(f"  –†–µ–ª–∞—Ç–∏–≤–Ω–æ –≤—Ä–µ–º–µ: {t_rel}")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ TimeTransformationModel: {e}")
        return False

def test_redshift_time_relation():
    """
    –¢–µ—Å—Ç –∑–∞ RedshiftTimeRelation
    """
    try:
        from acs_time_transformation import RedshiftTimeRelation
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        redshift_model = RedshiftTimeRelation(H0=70)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥–∏
        z_test = np.array([0.1, 1.0, 2.0])
        H_z = redshift_model.hubble_parameter(z_test)
        dt_dz = redshift_model.dt_abs_dz(z_test)
        
        print("‚úì RedshiftTimeRelation —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ")
        print(f"  H(z) –ø—Ä–∏–º–µ—Ä–∏: {H_z}")
        print(f"  dt/dz –ø—Ä–∏–º–µ—Ä–∏: {dt_dz}")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ RedshiftTimeRelation: {e}")
        return False

def test_expansion_analyzer():
    """
    –¢–µ—Å—Ç –∑–∞ ExpansionAnalyzer
    """
    try:
        from acs_time_transformation import (
            TimeTransformationModel, RedshiftTimeRelation, ExpansionAnalyzer
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
        redshift_model = RedshiftTimeRelation(H0=70)
        analyzer = ExpansionAnalyzer(time_model, redshift_model)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥–∏
        t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=2, max_t_gyr=10)
        results = analyzer.compute_expansion_table(t_abs_array)
        
        print("‚úì ExpansionAnalyzer —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ")
        print(f"  –ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(results['t_abs_gyr'])}")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω z: {np.min(results['z_values']):.3f} - {np.max(results['z_values']):.3f}")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ ExpansionAnalyzer: {e}")
        return False

def test_expansion_visualizer():
    """
    –¢–µ—Å—Ç –∑–∞ ExpansionVisualizer
    """
    try:
        from acs_time_transformation import (
            TimeTransformationModel, RedshiftTimeRelation, 
            ExpansionAnalyzer, ExpansionVisualizer
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
        redshift_model = RedshiftTimeRelation(H0=70)
        analyzer = ExpansionAnalyzer(time_model, redshift_model)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
        t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=2, max_t_gyr=10)
        results = analyzer.compute_expansion_table(t_abs_array)
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        visualizer = ExpansionVisualizer(results)
        
        print("‚úì ExpansionVisualizer —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ")
        print(f"  –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞—Ä–µ–¥–µ–Ω–∏: {len(results['t_abs_gyr'])} —Ç–æ—á–∫–∏")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ ExpansionVisualizer: {e}")
        return False

def test_mathematical_consistency():
    """
    –¢–µ—Å—Ç –∑–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç
    """
    try:
        from acs_time_transformation import TimeTransformationModel
        
        model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç
        z = 1.0
        T_z = model.time_transformation_factor(z)
        density = model.density_approximation(z)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: T(z) = 1/(1+z)^(3/2)
        expected_T = 1.0 / (1 + z)**(3/2)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: œÅ(z) = (1+z)¬≥
        expected_density = (1 + z)**3
        
        if abs(T_z - expected_T) < 1e-10:
            print("‚úì –í—Ä–µ–º–µ–≤–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª–Ω–∞")
        else:
            print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: {T_z} vs {expected_T}")
            return False
        
        if abs(density - expected_density) < 1e-10:
            print("‚úì –ü–ª—ä—Ç–Ω–æ—Å—Ç—Ç–∞ –µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª–Ω–∞")
        else:
            print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ –ø–ª—ä—Ç–Ω–æ—Å—Ç—Ç–∞: {density} vs {expected_density}")
            return False
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞–Ω–µ—Ç–æ
        t_abs = 5.0
        t_rel = model.compute_relative_time(np.array([t_abs]))[0]
        expected_t_rel = (2/5) * t_abs**(5/2)
        
        if abs(t_rel - expected_t_rel) < 1e-10:
            print("‚úì –ò–Ω—Ç–µ–≥—Ä–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞ —Ä–µ–ª–∞—Ç–∏–≤–Ω–æ—Ç–æ –≤—Ä–µ–º–µ –µ –ø—Ä–∞–≤–∏–ª–Ω–æ")
        else:
            print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞–Ω–µ—Ç–æ: {t_rel} vs {expected_t_rel}")
            return False
        
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç: {e}")
        return False

def test_main_function():
    """
    –¢–µ—Å—Ç –∑–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        from acs_time_transformation import main
        
        print("‚úì –û—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ")
        print("  (–ù–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –∑–∞ –¥–∞ —Å–µ –∏–∑–±–µ–≥–Ω–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏)")
        return True
    except Exception as e:
        print(f"‚úó –ì—Ä–µ—à–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è: {e}")
        return False

def main():
    """
    –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ
    """
    print("üß™ –¢–ï–°–¢–í–ê–ù–ï –ù–ê –ú–û–î–£–õ–ê –ó–ê –ê–ö–° –í–†–ï–ú–ï–í–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø")
    print("=" * 60)
    
    tests = [
        test_import,
        test_time_transformation_model,
        test_redshift_time_relation,
        test_expansion_analyzer,
        test_expansion_visualizer,
        test_mathematical_consistency,
        test_main_function
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        print(f"\n--- {test.__name__} ---")
        if test():
            passed += 1
        else:
            print(f"–ù–ï–£–°–ü–ï–®–ï–ù –¢–ï–°–¢: {test.__name__}")
    
    print("\n" + "=" * 60)
    print(f"–†–ï–ó–£–õ–¢–ê–¢–ò: {passed}/{total} —Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ —É—Å–ø–µ—à–Ω–∏!")
        return True
    else:
        print("‚ùå –ù—è–∫–æ–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∏!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 