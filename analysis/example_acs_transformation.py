#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–¥—É–ª–∞ –∑–∞ –ê–ö–° –≤—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –ª–∏–Ω–µ–π–Ω–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ
"""

import numpy as np
import matplotlib.pyplot as plt
from acs_time_transformation import (
    TimeTransformationModel, RedshiftTimeRelation, 
    ExpansionAnalyzer, ExpansionVisualizer
)

def example_1_basic_transformation():
    """
    –û—Å–Ω–æ–≤–µ–Ω –ø—Ä–∏–º–µ—Ä –Ω–∞ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –û—Å–Ω–æ–≤–Ω–∞ –≤—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
    redshift_model = RedshiftTimeRelation(H0=70)
    analyzer = ExpansionAnalyzer(time_model, redshift_model)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏
    t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=1, max_t_gyr=13.8)
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
    results = analyzer.compute_expansion_table(t_abs_array)
    
    # –ü–µ—á–∞—Ç–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
    analyzer.print_expansion_table(results)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualizer = ExpansionVisualizer(results)
    visualizer.plot_time_transformation()
    
    print("‚úÖ –û—Å–Ω–æ–≤–µ–Ω –ø—Ä–∏–º–µ—Ä –∑–∞–≤—ä—Ä—à–µ–Ω")

def example_2_redshift_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–∞ —á–µ—Ä–≤–µ–Ω–æ—Ç–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ –≤ —Ä–∞–∑–ª–∏—á–Ω–∏ –º–æ–¥–µ–ª–∏
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –ê–Ω–∞–ª–∏–∑ –Ω–∞ —á–µ—Ä–≤–µ–Ω–æ—Ç–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
    redshift_model = RedshiftTimeRelation(H0=70)
    analyzer = ExpansionAnalyzer(time_model, redshift_model)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏
    t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=0.5, max_t_gyr=13.8)
    results = analyzer.compute_expansion_table(t_abs_array)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ
    visualizer = ExpansionVisualizer(results)
    visualizer.plot_comparison_models()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –µ–ø–æ—Ö–∏
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –µ–ø–æ—Ö–∏:")
    key_epochs = [
        (0.1, "–†–∞–Ω–Ω–∞ –í—Å–µ–ª–µ–Ω–∞"),
        (1.0, "–ü—ä—Ä–≤–∏ –º–ª—Ä–¥. –≥–æ–¥–∏–Ω–∏"),
        (5.0, "–°—Ä–µ–¥–Ω–∏ –µ–ø–æ—Ö–∏"),
        (10.0, "–§–æ—Ä–º–∏—Ä–∞–Ω–µ –Ω–∞ –≥–∞–ª–∞–∫—Ç–∏–∫–∏"),
        (13.8, "–î–Ω–µ—Å")
    ]
    
    for t_abs, description in key_epochs:
        t_rel = time_model.compute_relative_time(np.array([t_abs]))[0]
        t_rel_norm = t_rel / time_model.compute_relative_time(np.array([13.8]))[0] * 13.8
        a_abs = time_model.scale_factor_absolute(t_abs)
        z = redshift_model.redshift_from_time(np.array([t_abs * 1e9 * 3.1536e16]))[0]
        T_z = time_model.time_transformation_factor(z)
        
        print(f"{description:<20}: t_abs={t_abs:4.1f} Gyr, t_rel={t_rel_norm:5.2f} Gyr, z={z:6.3f}, T(z)={T_z:6.3f}")
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞ —á–µ—Ä–≤–µ–Ω–æ—Ç–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω")

def example_3_custom_parameters():
    """
    –ü—Ä–∏–º–µ—Ä —Å —Ä–∞–∑–ª–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –º–æ–¥–µ–ª–∞
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –†–∞–∑–ª–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –º–æ–¥–µ–ª–∞ ===")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ k
    k_values = [0.5e-3, 1e-3, 2e-3]
    colors = ['blue', 'red', 'green']
    
    plt.figure(figsize=(12, 8))
    
    for i, k in enumerate(k_values):
        time_model = TimeTransformationModel(k_expansion=k, t_universe_gyr=13.8)
        redshift_model = RedshiftTimeRelation(H0=70)
        analyzer = ExpansionAnalyzer(time_model, redshift_model)
        
        t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=0.5, max_t_gyr=13.8)
        results = analyzer.compute_expansion_table(t_abs_array)
        
        plt.subplot(2, 2, i+1)
        plt.plot(results['t_abs_gyr'], results['a_abs'], 
                color=colors[i], linewidth=2, label=f'k = {k:.1e}')
        plt.xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ [Gyr]')
        plt.ylabel('–ú–∞—â–∞–±–µ–Ω —Ñ–∞–∫—Ç–æ—Ä a(t_abs)')
        plt.title(f'–õ–∏–Ω–µ–π–Ω–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ —Å k = {k:.1e}')
        plt.grid(True)
        plt.legend()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –º–æ–¥–µ–ª–∏
    plt.subplot(2, 2, 4)
    for i, k in enumerate(k_values):
        time_model = TimeTransformationModel(k_expansion=k, t_universe_gyr=13.8)
        redshift_model = RedshiftTimeRelation(H0=70)
        analyzer = ExpansionAnalyzer(time_model, redshift_model)
        
        t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=0.5, max_t_gyr=13.8)
        results = analyzer.compute_expansion_table(t_abs_array)
        
        plt.plot(results['t_abs_gyr'], results['a_abs'], 
                color=colors[i], linewidth=2, label=f'k = {k:.1e}')
    
    plt.xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ [Gyr]')
    plt.ylabel('–ú–∞—â–∞–±–µ–Ω —Ñ–∞–∫—Ç–æ—Ä a(t_abs)')
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ k')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–≤—ä—Ä—à–µ–Ω")

def example_4_time_dilation_analysis():
    """
    –ü–æ–¥—Ä–æ–±–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ –¥–∏–ª–∞—Ç–∞—Ü–∏—è
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ –¥–∏–ª–∞—Ç–∞—Ü–∏—è ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
    
    # –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç —á–µ—Ä–≤–µ–Ω–∏ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–∏—è
    z_range = np.logspace(-3, 2, 100)  # –æ—Ç z=0.001 –¥–æ z=100
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∏ —Ñ–∞–∫—Ç–æ—Ä–∏
    T_z = time_model.time_transformation_factor(z_range)
    density_factor = time_model.density_approximation(z_range)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(14, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º–µ–≤–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–µ–Ω —Ñ–∞–∫—Ç–æ—Ä
    axes[0, 0].loglog(z_range, T_z, 'b-', linewidth=2, label='T(z) = 1/(1+z)^(3/2)')
    axes[0, 0].set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    axes[0, 0].set_ylabel('–í—Ä–µ–º–µ–≤–∏—è —Ñ–∞–∫—Ç–æ—Ä T(z)')
    axes[0, 0].set_title('–í—Ä–µ–º–µ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è')
    axes[0, 0].grid(True)
    axes[0, 0].legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ü–ª—ä—Ç–Ω–æ—Å—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏—è—Ç–∞
    axes[0, 1].loglog(z_range, density_factor, 'r-', linewidth=2, label='œÅ(z) ‚àù (1+z)¬≥')
    axes[0, 1].set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    axes[0, 1].set_ylabel('–ü–ª—ä—Ç–Ω–æ—Å—Ç œÅ(z)')
    axes[0, 1].set_title('–ü–ª—ä—Ç–Ω–æ—Å—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏—è—Ç–∞')
    axes[0, 1].grid(True)
    axes[0, 1].legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –û–±—Ä–∞—Ç–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç
    axes[1, 0].loglog(z_range, 1/T_z, 'g-', linewidth=2, label='1/T(z) = (1+z)^(3/2)')
    axes[1, 0].set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    axes[1, 0].set_ylabel('1/T(z)')
    axes[1, 0].set_title('–ï—Ñ–µ–∫—Ç –Ω–∞ –∑–∞–±–∞–≤—è–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ')
    axes[1, 0].grid(True)
    axes[1, 0].legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–≤–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏
    axes[1, 1].loglog(z_range, T_z, 'b-', linewidth=2, label='T(z) = 1/(1+z)^(3/2)')
    axes[1, 1].loglog(z_range, 1/(1+z_range), 'r--', linewidth=2, label='1/(1+z) [—Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω]')
    axes[1, 1].set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    axes[1, 1].set_ylabel('–í—Ä–µ–º–µ–≤–∏—è —Ñ–∞–∫—Ç–æ—Ä')
    axes[1, 1].set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–≤–∏—Ç–µ –µ—Ñ–µ–∫—Ç–∏')
    axes[1, 1].grid(True)
    axes[1, 1].legend()
    
    plt.tight_layout()
    plt.show()
    
    # –ß–∏—Å–ª–µ–Ω–Ω–∏ –ø—Ä–∏–º–µ—Ä–∏
    print("\nüìä –ö–ª—é—á–æ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ –¥–∏–ª–∞—Ç–∞—Ü–∏—è:")
    test_z_values = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0]
    
    print(f"{'z':<8} {'T(z)':<12} {'1/T(z)':<12} {'–ó–∞–±–∞–≤—è–Ω–µ':<15}")
    print("-" * 50)
    
    for z in test_z_values:
        T_val = time_model.time_transformation_factor(z)
        slowdown = 1/T_val
        print(f"{z:<8.1f} {T_val:<12.6f} {slowdown:<12.2f} {slowdown:.1f}x –ø–æ-–±–∞–≤–Ω–æ")
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Ä–µ–º–µ–≤–∞—Ç–∞ –¥–∏–ª–∞—Ç–∞—Ü–∏—è –∑–∞–≤—ä—Ä—à–µ–Ω")

def example_5_comprehensive_analysis():
    """
    –¶—è–ª–æ—Å—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–æ–¥–µ–ª–∞
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 5: –¶—è–ª–æ—Å—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–æ–¥–µ–ª–∞ ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    time_model = TimeTransformationModel(k_expansion=1e-3, t_universe_gyr=13.8)
    redshift_model = RedshiftTimeRelation(H0=70)
    analyzer = ExpansionAnalyzer(time_model, redshift_model)
    
    # –†–∞–∑–ª–∏—á–Ω–∏ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    discretizations = [0.5, 1.0, 2.0]
    
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏:")
    
    for delta_t in discretizations:
        print(f"\n--- –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è: {delta_t} Gyr ---")
        
        t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=delta_t, max_t_gyr=13.8)
        results = analyzer.compute_expansion_table(t_abs_array)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"–ë—Ä–æ–π —Ç–æ—á–∫–∏: {len(results['t_abs_gyr'])}")
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω z: {np.min(results['z_values']):.3f} - {np.max(results['z_values']):.3f}")
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω T(z): {np.min(results['time_transform_factor']):.6f} - {np.max(results['time_transform_factor']):.6f}")
        
        # –°—Ä–µ–¥–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        mean_expansion = np.mean(results['a_abs'])
        mean_z = np.mean(results['z_values'])
        
        print(f"–°—Ä–µ–¥–Ω–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ: {mean_expansion:.6f}")
        print(f"–°—Ä–µ–¥–Ω–æ —á–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ: {mean_z:.3f}")
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    t_abs_array = analyzer.generate_discrete_timeline(delta_t_gyr=1.0, max_t_gyr=13.8)
    results = analyzer.compute_expansion_table(t_abs_array)
    
    visualizer = ExpansionVisualizer(results)
    visualizer.plot_time_transformation()
    visualizer.plot_comparison_models()
    
    print("\n‚úÖ –¶—è–ª–æ—Å—Ç–µ–Ω –∞–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–µ–Ω")

def main():
    """
    –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–∏–º–µ—Ä–∏
    """
    print("üåå –ü–†–ò–ú–ï–†–ò –ó–ê –ê–ö–° –í–†–ï–ú–ï–í–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø")
    print("=" * 60)
    
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∏—Ç–µ
    example_1_basic_transformation()
    example_2_redshift_analysis()
    example_3_custom_parameters()
    example_4_time_dilation_analysis()
    example_5_comprehensive_analysis()
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    print("‚Ä¢ –õ–∏–Ω–µ–π–Ω–æ—Ç–æ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –≤ –ê–ö–° –≤–æ–¥–∏ –¥–æ –Ω–µ–ª–∏–Ω–µ–π–Ω–∏ –µ—Ñ–µ–∫—Ç–∏ –≤ –†–ö–°")
    print("‚Ä¢ –í—Ä–µ–º–µ–≤–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è T(z) = 1/(1+z)^(3/2) –æ–±—è—Å–Ω—è–≤–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ—Ç–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("‚Ä¢ –ö–æ–º–ø—Ä–µ—Å–∏—Ä–∞–Ω–∞—Ç–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –æ—Ç –≤–∏—Å–æ–∫–∞—Ç–∞ –µ–Ω–µ—Ä–≥–∏–π–Ω–∞ –ø–ª—ä—Ç–Ω–æ—Å—Ç")
    print("‚Ä¢ –ú–æ–¥–µ–ª—ä—Ç –ø—Ä–µ–¥–ª–∞–≥–∞ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–∞ —Ç—ä–º–Ω–∞—Ç–∞ –µ–Ω–µ—Ä–≥–∏—è")
    
    print("\nüöÄ –í—Å–∏—á–∫–∏ –ø—Ä–∏–º–µ—Ä–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main() 