"""
–û–±—à–∏—Ä–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
=================================================

–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –Ω–æ–≤–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
1. T(z) - –∏–Ω—Ç–µ–≥—Ä–∞–ª–Ω–∞ –∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞
2. a(t_abs) - –º–∞—â–∞–±–µ–Ω —Ñ–∞–∫—Ç–æ—Ä –∫–∞—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ—Ç–æ –≤—Ä–µ–º–µ
3. H(t_abs) - –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –Ω–∞ Hubble –∫–∞—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç –≤—Ä–µ–º–µ—Ç–æ
4. –ù–∞—Ç—É—Ä–∞–ª–Ω–∞ –º–µ—Ç—Ä–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
5. –†–∞–∑—à–∏—Ä–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–æ z > 2

–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')

from lib.advanced_analytical_functions import AdvancedAnalyticalFunctions, create_analytical_functions, quick_t_z_analysis


def main():
    print("=" * 80)
    print("–û–ë–®–ò–†–ï–ù –ê–ù–ê–õ–ò–ó –ù–ê –†–ê–ó–®–ò–†–ï–ù–ò–¢–ï –ê–ù–ê–õ–ò–¢–ò–ß–ù–ò –§–£–ù–ö–¶–ò–ò")
    print("=" * 80)
    print()
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –æ–±–µ–∫—Ç –∑–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    aaf = create_analytical_functions()
    
    # ===== –ß–ê–°–¢ 1: –ê–ù–ê–õ–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø T(z) =====
    print("üìä –ß–ê–°–¢ 1: –ê–ù–ê–õ–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø T(z)")
    print("-" * 50)
    
    # –¢–µ—Å—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ z
    z_test = np.array([0.1, 0.5, 1.0, 2.0, 5.0, 10.0])
    
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–Ω—Ç–µ–≥—Ä–∞–ª–Ω–∞ –∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞:")
    print("z\t\tT_integral\tT_approx\t–ì—Ä–µ—à–∫–∞ (%)")
    print("-" * 60)
    
    for z in z_test:
        t_integral = aaf.analytical_t_z_integral(z)
        t_approx = aaf.analytical_t_z_approximation(z)
        error = abs(t_integral - t_approx) / t_integral * 100
        print(f"{z:.1f}\t\t{t_integral:.6f}\t{t_approx:.6f}\t{error:.2f}%")
    
    print()
    
    # ===== –ß–ê–°–¢ 2: –§–£–ù–ö–¶–ò–Ø a(t_abs) =====
    print("üìä –ß–ê–°–¢ 2: –§–£–ù–ö–¶–ò–Ø a(t_abs)")
    print("-" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –∑–∞ –º–∞—â–∞–±–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä
    aaf.create_scale_factor_function()
    
    # –¢–µ—Å—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –≤—Ä–µ–º–µ–Ω–∞
    t_test = np.array([1.0, 3.0, 5.0, 8.0, 10.0, 13.8])
    
    print("–ï–≤–æ–ª—é—Ü–∏—è –Ω–∞ –º–∞—â–∞–±–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä:")
    print("t_abs [Gyr]\ta(t_abs)\t\tz —Å—ä–æ—Ç–≤–µ—Ç–Ω–æ")
    print("-" * 50)
    
    for t in t_test:
        a_val = aaf._scale_factor_function(t)
        z_val = (1.0 / a_val) - 1.0
        print(f"{t:.1f}\t\t{a_val:.6f}\t\t{z_val:.3f}")
    
    print()
    
    # ===== –ß–ê–°–¢ 3: –ü–ê–†–ê–ú–ï–¢–™–† –ù–ê HUBBLE H(t_abs) =====
    print("üìä –ß–ê–°–¢ 3: –ü–ê–†–ê–ú–ï–¢–™–† –ù–ê HUBBLE H(t_abs)")
    print("-" * 50)
    
    print("–ï–≤–æ–ª—é—Ü–∏—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞ –Ω–∞ Hubble:")
    print("t_abs [Gyr]\tH(t_abs) [km/s/Mpc]")
    print("-" * 40)
    
    for t in t_test:
        H_val = aaf.hubble_parameter_abs_time(t)
        print(f"{t:.1f}\t\t{H_val:.2f}")
    
    print()
    
    # ===== –ß–ê–°–¢ 4: –ù–ê–¢–£–†–ê–õ–ù–ê –ú–ï–¢–†–ò–ß–ù–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø =====
    print("üìä –ß–ê–°–¢ 4: –ù–ê–¢–£–†–ê–õ–ù–ê –ú–ï–¢–†–ò–ß–ù–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø")
    print("-" * 50)
    
    print("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫—ä–º –Ω–∞—Ç—É—Ä–∞–ª–Ω–æ –≤—Ä–µ–º–µ:")
    print("t_abs [Gyr]\tœÑ [–Ω–∞—Ç—É—Ä–∞–ª–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏]")
    print("-" * 40)
    
    for t in t_test:
        tau_val = aaf.natural_metric_transformation(t)
        print(f"{t:.1f}\t\t{tau_val:.6f}")
    
    print()
    
    # ===== –ß–ê–°–¢ 5: –†–ê–ó–®–ò–†–ï–ù –ê–ù–ê–õ–ò–ó –î–û z > 2 =====
    print("üìä –ß–ê–°–¢ 5: –†–ê–ó–®–ò–†–ï–ù –ê–ù–ê–õ–ò–ó –î–û z > 2")
    print("-" * 50)
    
    extended_results = aaf.extended_z_range_analysis(z_max=10.0)
    
    print("–ö–ª—é—á–æ–≤–∏ –∫–æ—Å–º–æ–ª–æ–≥–∏—á–Ω–∏ –µ–ø–æ—Ö–∏:")
    for epoch, data in extended_results['key_epochs'].items():
        print(f"\n{epoch.upper()}:")
        print(f"  z = {data['z']}")
        if data['t_abs'] is not None:
            print(f"  t_abs = {data['t_abs']:.3f} Gyr")
        print(f"  a = {data['a']:.6f}")
    
    print()
    
    # ===== –ß–ê–°–¢ 6: –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –ì–†–ê–§–ò–ö–ò =====
    print("üìä –ß–ê–°–¢ 6: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø")
    print("-" * 50)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –¥–µ—Ç–∞–π–ª–Ω–∏ –≥—Ä–∞—Ñ–∏–∫–∏
    create_comprehensive_plots(aaf)
    
    # ===== –ß–ê–°–¢ 7: –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê –ü–û–î–†–û–ë–ï–ù –î–û–ö–õ–ê–î =====
    print("üìä –ß–ê–°–¢ 7: –ü–û–î–†–û–ë–ï–ù –î–û–ö–õ–ê–î")
    print("-" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –æ–±–æ–±—â–µ–Ω –¥–æ–∫–ª–∞–¥
    report = aaf.comprehensive_analysis_report()
    
    # –ó–∞–ø–∏—Å–≤–∞–º–µ –¥–æ–∫–ª–∞–¥–∞
    with open('analysis/ADVANCED_ANALYTICAL_FUNCTIONS_REPORT.md', 'w', encoding='utf-8') as f:
        f.write("# –î–æ–∫–ª–∞–¥ –∑–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏\n\n")
        f.write("```\n")
        f.write(report)
        f.write("\n```\n")
    
    print("‚úÖ –î–æ–∫–ª–∞–¥—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω –≤ analysis/ADVANCED_ANALYTICAL_FUNCTIONS_REPORT.md")
    print()
    
    # ===== –ß–ê–°–¢ 8: –°–†–ê–í–ù–ï–ù–ò–ï –° PANTHEON+ =====
    print("üìä –ß–ê–°–¢ 8: –ü–†–û–í–ï–†–ö–ê –ù–ê –°–™–í–ú–ï–°–¢–ò–ú–û–°–¢–¢–ê")
    print("-" * 50)
    
    # –ë—ä—Ä–∑ —Ç–µ—Å—Ç —Å—ä—Å z —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç Pantheon+
    z_pantheon = np.array([0.1, 0.5, 1.0, 1.5, 2.0])
    pantheon_results = quick_t_z_analysis(z_pantheon)
    
    print("–ë—ä—Ä–∑ –∞–Ω–∞–ª–∏–∑ —Å —Ç–∏–ø–∏—á–Ω–∏ z —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç Pantheon+:")
    print("z\t\tT(z)\t\tt_abs [Gyr]\ta(z)")
    print("-" * 50)
    
    for i, z in enumerate(z_pantheon):
        t_val = pantheon_results['t_integral'][i]
        t_abs_val = pantheon_results['t_absolute'][i]
        a_val = pantheon_results['scale_factor'][i]
        print(f"{z:.1f}\t\t{t_val:.6f}\t{t_abs_val:.3f}\t\t{a_val:.6f}")
    
    print()
    print("=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó–™–¢ –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û!")
    print("=" * 80)


def create_comprehensive_plots(aaf):
    """
    –°—ä–∑–¥–∞–≤–∞ –æ–±—à–∏—Ä–Ω–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –≤—Å–∏—á–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∏
    plt.style.use('default')
    plt.rcParams['figure.figsize'] = (16, 12)
    plt.rcParams['font.size'] = 12
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞
    fig = plt.figure(figsize=(20, 16))
    gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 1: T(z) —Ñ—É–Ω–∫—Ü–∏—è - –∏–Ω—Ç–µ–≥—Ä–∞–ª–Ω–∞ vs –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∞ =====
    ax1 = fig.add_subplot(gs[0, 0])
    
    z_range = np.logspace(-3, 1, 1000)
    t_integral = np.array([aaf.analytical_t_z_integral(z) for z in z_range])
    t_approx = np.array([aaf.analytical_t_z_approximation(z) for z in z_range])
    
    ax1.loglog(z_range, t_integral, 'b-', linewidth=2, label='–ò–Ω—Ç–µ–≥—Ä–∞–ª–Ω–∞ —Ñ–æ—Ä–º–∞')
    ax1.loglog(z_range, t_approx, 'r--', linewidth=2, label='–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞')
    ax1.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax1.set_ylabel('T(z)')
    ax1.set_title('–ê–Ω–∞–ª–∏—Ç–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è T(z)')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 2: –ì—Ä–µ—à–∫–∞ –Ω–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ—Ç–æ =====
    ax2 = fig.add_subplot(gs[0, 1])
    
    error = np.abs(t_integral - t_approx) / t_integral * 100
    ax2.semilogx(z_range, error, 'g-', linewidth=2)
    ax2.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax2.set_ylabel('–ì—Ä–µ—à–∫–∞ (%)')
    ax2.set_title('–ì—Ä–µ—à–∫–∞ –Ω–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ—Ç–æ T(z)')
    ax2.grid(True, alpha=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 3: a(t_abs) —Ñ—É–Ω–∫—Ü–∏—è =====
    ax3 = fig.add_subplot(gs[0, 2])
    
    if aaf._scale_factor_function is None:
        aaf.create_scale_factor_function()
    
    t_abs_range = np.linspace(0.1, 13.8, 1000)
    a_values = np.array([aaf._scale_factor_function(t) for t in t_abs_range])
    
    ax3.plot(t_abs_range, a_values, 'purple', linewidth=2)
    ax3.set_xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ t_abs [Gyr]')
    ax3.set_ylabel('–ú–∞—â–∞–±–µ–Ω —Ñ–∞–∫—Ç–æ—Ä a(t_abs)')
    ax3.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç a(t_abs)')
    ax3.grid(True, alpha=0.3)
    
    # –ú–∞—Ä–∫–∏—Ä–∞–º–µ –¥–Ω–µ—à–Ω–∏—è –¥–µ–Ω
    ax3.axhline(y=1.0, color='red', linestyle='--', alpha=0.7, label='–î–Ω–µ—Å (a=1)')
    ax3.axvline(x=13.8, color='red', linestyle='--', alpha=0.7)
    ax3.legend()
    
    # ===== –ì–†–ê–§–ò–ö 4: H(t_abs) —Ñ—É–Ω–∫—Ü–∏—è =====
    ax4 = fig.add_subplot(gs[1, 0])
    
    H_values = np.array([aaf.hubble_parameter_abs_time(t) for t in t_abs_range])
    
    ax4.plot(t_abs_range, H_values, 'orange', linewidth=2)
    ax4.set_xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ t_abs [Gyr]')
    ax4.set_ylabel('H(t_abs) [km/s/Mpc]')
    ax4.set_title('–ü–∞—Ä–∞–º–µ—Ç—ä—Ä –Ω–∞ Hubble H(t_abs)')
    ax4.grid(True, alpha=0.3)
    
    # –ú–∞—Ä–∫–∏—Ä–∞–º–µ –¥–Ω–µ—à–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    ax4.axhline(y=70.0, color='red', linestyle='--', alpha=0.7, label='H‚ÇÄ = 70 km/s/Mpc')
    ax4.axvline(x=13.8, color='red', linestyle='--', alpha=0.7)
    ax4.legend()
    
    # ===== –ì–†–ê–§–ò–ö 5: –ù–∞—Ç—É—Ä–∞–ª–Ω–∞ –º–µ—Ç—Ä–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è =====
    ax5 = fig.add_subplot(gs[1, 1])
    
    tau_values = np.array([aaf.natural_metric_transformation(t) for t in t_abs_range])
    
    ax5.plot(t_abs_range, tau_values, 'cyan', linewidth=2)
    ax5.set_xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ t_abs [Gyr]')
    ax5.set_ylabel('–ù–∞—Ç—É—Ä–∞–ª–Ω–æ –≤—Ä–µ–º–µ œÑ')
    ax5.set_title('–ù–∞—Ç—É—Ä–∞–ª–Ω–∞ –º–µ—Ç—Ä–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è')
    ax5.grid(True, alpha=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 6: –†–∞–∑—à–∏—Ä–µ–Ω z –¥–∏–∞–ø–∞–∑–æ–Ω =====
    ax6 = fig.add_subplot(gs[1, 2])
    
    extended_results = aaf.extended_z_range_analysis(z_max=10.0)
    z_extended = extended_results['z_range']
    t_extended = extended_results['t_abs_values']
    
    ax6.semilogx(z_extended, t_extended, 'brown', linewidth=2)
    ax6.set_xlabel('–ß–µ—Ä–≤–µ–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ z')
    ax6.set_ylabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ t_abs [Gyr]')
    ax6.set_title('–†–∞–∑—à–∏—Ä–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω z > 2')
    ax6.grid(True, alpha=0.3)
    
    # –ú–∞—Ä–∫–∏—Ä–∞–º–µ –∫–ª—é—á–æ–≤–∏ –µ–ø–æ—Ö–∏
    for epoch, data in extended_results['key_epochs'].items():
        if data['t_abs'] is not None:
            ax6.scatter(data['z'], data['t_abs'], s=100, label=f"{epoch}")
    
    ax6.legend()
    
    # ===== –ì–†–ê–§–ò–ö 7: –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ da/dt =====
    ax7 = fig.add_subplot(gs[2, 0])
    
    # –ü—Ä–µ—Å–º—è—Ç–∞–º–µ da/dt —á–∏—Å–ª–µ–Ω–æ
    dt = 0.01
    da_dt = np.gradient(a_values, dt)
    
    ax7.plot(t_abs_range, da_dt, 'magenta', linewidth=2)
    ax7.set_xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Ä–µ–º–µ t_abs [Gyr]')
    ax7.set_ylabel('da/dt [1/Gyr]')
    ax7.set_title('–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –º–∞—â–∞–±–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä')
    ax7.grid(True, alpha=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 8: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ =====
    ax8 = fig.add_subplot(gs[2, 1])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    t_norm = t_abs_range / 13.8
    tau_norm = tau_values / np.max(tau_values)
    
    ax8.plot(t_norm, t_norm, 'k-', linewidth=2, label='–õ–∏–Ω–µ–π–Ω–æ –≤—Ä–µ–º–µ')
    ax8.plot(t_norm, tau_norm, 'c-', linewidth=2, label='–ù–∞—Ç—É—Ä–∞–ª–Ω–æ –≤—Ä–µ–º–µ')
    ax8.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–æ –≤—Ä–µ–º–µ')
    ax8.set_ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç')
    ax8.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–≤–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏')
    ax8.legend()
    ax8.grid(True, alpha=0.3)
    
    # ===== –ì–†–ê–§–ò–ö 9: –§–∞–∑–æ–≤ –¥–∏–∞–≥—Ä–∞–º =====
    ax9 = fig.add_subplot(gs[2, 2])
    
    ax9.plot(a_values, H_values, 'red', linewidth=2)
    ax9.set_xlabel('–ú–∞—â–∞–±–µ–Ω —Ñ–∞–∫—Ç–æ—Ä a')
    ax9.set_ylabel('H(a) [km/s/Mpc]')
    ax9.set_title('–§–∞–∑–æ–≤ –¥–∏–∞–≥—Ä–∞–º H(a)')
    ax9.grid(True, alpha=0.3)
    
    # –ú–∞—Ä–∫–∏—Ä–∞–º–µ –¥–Ω–µ—à–Ω–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
    ax9.scatter(1.0, 70.0, s=100, color='red', marker='*', label='–î–Ω–µ—Å')
    ax9.legend()
    
    # –ó–∞–ø–∏—Å–≤–∞–º–µ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
    plt.suptitle('–û–±—à–∏—Ä–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏', fontsize=16, y=0.98)
    plt.savefig('analysis/comprehensive_analytical_plots.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ analysis/comprehensive_analytical_plots.png")


if __name__ == "__main__":
    main() 