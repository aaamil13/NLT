#!/usr/bin/env python3
"""
–î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ œá¬≤ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ - BAO vs CMB
–¶–µ–ª: –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ –Ω–∞ –≤–∏—Å–æ–∫–∏—è œá¬≤
"""

import numpy as np
import matplotlib.pyplot as plt
from no_lambda_cosmology import NoLambdaCosmology
from observational_data import BAOObservationalData, CMBObservationalData

def detailed_chi_squared_analysis():
    """–î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ œá¬≤ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"""
    
    # –ù–∞–π-–¥–æ–±—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç nested sampling
    best_params = {
        'H0': 73.23,
        'Omega_m': 0.3046,
        'epsilon_bao': 0.0437,
        'epsilon_cmb': 0.0233
    }
    
    print("üîç –î–ï–¢–ê–ô–õ–ï–ù –ê–ù–ê–õ–ò–ó –ù–ê œá¬≤ –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ò")
    print("=" * 60)
    print(f"üìä –ù–∞–π-–¥–æ–±—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç nested sampling:")
    for param, value in best_params.items():
        print(f"   {param}: {value:.4f}")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–æ–¥–µ–ª–∞
    cosmo = NoLambdaCosmology(**best_params)
    
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
    bao_data = BAOObservationalData()
    cmb_data = CMBObservationalData()
    
    # BAO –∞–Ω–∞–ª–∏–∑
    print("üìä BAO –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    bao_combined = bao_data.get_combined_data()
    z_bao = bao_combined['redshifts']
    DV_rs_obs = bao_combined['DV_rs']
    DV_rs_err = bao_combined['DV_rs_err']
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    DV_rs_theory = []
    chi2_individual_bao = []
    residuals_bao = []
    
    C_KM_S = 299792.458  # km/s
    
    for i, z in enumerate(z_bao):
        # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        D_A = cosmo.angular_diameter_distance(z)
        H_z = cosmo.hubble_function(z)
        D_H = C_KM_S / H_z
        D_V = (z * D_A**2 * D_H)**(1/3.0)
        r_s = cosmo.sound_horizon_scale()
        
        DV_rs_model = D_V / r_s
        DV_rs_theory.append(DV_rs_model)
        
        # Residual –∏ œá¬≤
        residual = DV_rs_obs[i] - DV_rs_model
        chi2_point = (residual / DV_rs_err[i])**2
        
        residuals_bao.append(residual)
        chi2_individual_bao.append(chi2_point)
        
        print(f"   z={z:.3f}: obs={DV_rs_obs[i]:.3f}, model={DV_rs_model:.3f}, "
              f"res={residual:.3f}, œá¬≤={chi2_point:.2f}")
    
    chi2_bao_total = np.sum(chi2_individual_bao)
    n_bao = len(z_bao)
    
    print(f"\nüìä BAO œá¬≤ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏:")
    print(f"   –û–±—â–æ œá¬≤_BAO: {chi2_bao_total:.2f}")
    print(f"   –¢–æ—á–∫–∏: {n_bao}")
    print(f"   Reduced œá¬≤_BAO: {chi2_bao_total/n_bao:.2f}")
    print()
    
    # CMB –∞–Ω–∞–ª–∏–∑
    print("üìä CMB –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    acoustic_data = cmb_data.get_acoustic_scale()
    theta_s_obs = acoustic_data['theta_s']
    theta_s_err = acoustic_data['theta_s_err']
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    theta_s_model = cosmo.cmb_angular_scale()
    residual_cmb = theta_s_obs - theta_s_model
    chi2_cmb = (residual_cmb / theta_s_err)**2
    
    print(f"   Œ∏_s observed: {theta_s_obs:.6f} rad")
    print(f"   Œ∏_s model: {theta_s_model:.6f} rad")
    print(f"   Residual: {residual_cmb:.6f} rad")
    print(f"   Relative error: {100*residual_cmb/theta_s_obs:.2f}%")
    print(f"   œá¬≤_CMB: {chi2_cmb:.2f}")
    print()
    
    # –û–±—â–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    chi2_total = chi2_bao_total + chi2_cmb
    n_total = n_bao + 1  # BAO —Ç–æ—á–∫–∏ + 1 CMB —Ç–æ—á–∫–∞
    n_params = 4  # H0, Omega_m, epsilon_bao, epsilon_cmb
    dof = n_total - n_params
    
    print("üìä –û–ë–©–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 40)
    print(f"œá¬≤_BAO: {chi2_bao_total:.2f} ({chi2_bao_total/chi2_total*100:.1f}%)")
    print(f"œá¬≤_CMB: {chi2_cmb:.2f} ({chi2_cmb/chi2_total*100:.1f}%)")
    print(f"œá¬≤_total: {chi2_total:.2f}")
    print(f"DOF: {dof}")
    print(f"Reduced œá¬≤: {chi2_total/dof:.2f}")
    print()
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏ —Ç–æ—á–∫–∏
    print("üîç –ü–†–û–ë–õ–ï–ú–ù–ò –¢–û–ß–ö–ò:")
    print("-" * 30)
    
    # BAO —Ç–æ—á–∫–∏ —Å –≤–∏—Å–æ–∫–∏ œá¬≤
    high_chi2_bao = [(i, z_bao[i], chi2_individual_bao[i]) 
                     for i in range(len(chi2_individual_bao)) 
                     if chi2_individual_bao[i] > 5.0]
    
    if high_chi2_bao:
        print("BAO —Ç–æ—á–∫–∏ —Å œá¬≤ > 5.0:")
        for i, z, chi2 in high_chi2_bao:
            print(f"   z={z:.3f}: œá¬≤={chi2:.2f}")
    else:
        print("–ù—è–º–∞ BAO —Ç–æ—á–∫–∏ —Å œá¬≤ > 5.0")
    
    if chi2_cmb > 5.0:
        print(f"CMB —Ç–æ—á–∫–∞: œá¬≤={chi2_cmb:.2f} (–≤–∏—Å–æ–∫–æ!)")
    else:
        print(f"CMB —Ç–æ—á–∫–∞: œá¬≤={chi2_cmb:.2f} (–ø—Ä–∏–µ–º–ª–∏–≤–æ)")
    
    print()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    create_chi2_breakdown_plot(z_bao, chi2_individual_bao, chi2_cmb)
    
    # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
    print("üéØ –ü–†–ï–ü–û–†–™–ö–ò:")
    print("-" * 30)
    
    if chi2_bao_total > chi2_cmb:
        print("1. BAO –¥–∞–Ω–Ω–∏—Ç–µ –¥–æ–º–∏–Ω–∏—Ä–∞—Ç –≤ œá¬≤ - —Ñ–æ–∫—É—Å –≤—ä—Ä—Ö—É:")
        print("   - –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞ BAO")
        print("   - –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏ –≥—Ä–µ—à–∫–∏ –≤ BAO measurements")
        print("   - epsilon_bao –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    else:
        print("1. CMB –¥–∞–Ω–Ω–∏—Ç–µ –¥–æ–º–∏–Ω–∏—Ä–∞—Ç –≤ œá¬≤ - —Ñ–æ–∫—É—Å –≤—ä—Ä—Ö—É:")
        print("   - CMB –º–æ–¥–µ–ª –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è")
        print("   - epsilon_cmb –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    
    print("2. –û–±—â–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏:")
    print("   - –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –ø—ä–ª–Ω–∞—Ç–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞")
    print("   - –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ SN Ia –¥–∞–Ω–Ω–∏ –∑–∞ cross-validation")
    print("   - –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ z-dependent epsilon –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    
    return {
        'chi2_bao': chi2_bao_total,
        'chi2_cmb': chi2_cmb,
        'chi2_total': chi2_total,
        'dof': dof,
        'reduced_chi2': chi2_total/dof,
        'n_bao': n_bao,
        'high_chi2_bao': high_chi2_bao
    }

def create_chi2_breakdown_plot(z_bao, chi2_individual_bao, chi2_cmb):
    """–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ œá¬≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ"""
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # BAO œá¬≤ –ø–æ redshift
    ax1.bar(range(len(z_bao)), chi2_individual_bao, alpha=0.7, color='blue')
    ax1.axhline(y=1.0, color='red', linestyle='--', alpha=0.7, label='œá¬≤ = 1 (–∏–¥–µ–∞–ª–Ω–æ)')
    ax1.axhline(y=4.0, color='orange', linestyle='--', alpha=0.7, label='œá¬≤ = 4 (–≥—Ä–∞–Ω–∏—á–Ω–æ)')
    ax1.set_xlabel('BAO —Ç–æ—á–∫–∞ index')
    ax1.set_ylabel('œá¬≤')
    ax1.set_title('BAO œá¬≤ –ø–æ —Ç–æ—á–∫–∏')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ BAO vs CMB
    labels = ['BAO', 'CMB']
    sizes = [np.sum(chi2_individual_bao), chi2_cmb]
    colors = ['blue', 'red']
    
    ax2.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    ax2.set_title('–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ œá¬≤ –º–µ–∂–¥—É BAO –∏ CMB')
    
    plt.tight_layout()
    plt.savefig('chi2_component_breakdown.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: chi2_component_breakdown.png")

if __name__ == "__main__":
    results = detailed_chi_squared_analysis()
    print("\n" + "="*60)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑—ä—Ç –∑–∞–≤—ä—Ä—à–µ–Ω!")
    print("üìä –°–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏: –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∏ SN Ia –¥–∞–Ω–Ω–∏") 